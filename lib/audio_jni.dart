// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `android.media.AudioRecord$Builder`
class AudioRecord$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AudioRecord$Builder> $type;

  @jni$_.internal
  AudioRecord$Builder.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/media/AudioRecord$Builder',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AudioRecord$Builder$NullableType();
  static const type = $AudioRecord$Builder$Type();
  static final _id_new$ = _class.constructorId(r'()V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory AudioRecord$Builder() {
    return AudioRecord$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_setAudioSource = _class.instanceMethodId(
    r'setAudioSource',
    r'(I)Landroid/media/AudioRecord$Builder;',
  );

  static final _setAudioSource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.media.AudioRecord$Builder setAudioSource(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  AudioRecord$Builder? setAudioSource(int i) {
    return _setAudioSource(
      reference.pointer,
      _id_setAudioSource as jni$_.JMethodIDPtr,
      i,
    ).object<AudioRecord$Builder?>(const $AudioRecord$Builder$NullableType());
  }

  static final _id_setContext = _class.instanceMethodId(
    r'setContext',
    r'(Landroid/content/Context;)Landroid/media/AudioRecord$Builder;',
  );

  static final _setContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.media.AudioRecord$Builder setContext(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  AudioRecord$Builder? setContext(jni$_.JObject? context) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return _setContext(
      reference.pointer,
      _id_setContext as jni$_.JMethodIDPtr,
      _$context.pointer,
    ).object<AudioRecord$Builder?>(const $AudioRecord$Builder$NullableType());
  }

  static final _id_setAudioFormat = _class.instanceMethodId(
    r'setAudioFormat',
    r'(Landroid/media/AudioFormat;)Landroid/media/AudioRecord$Builder;',
  );

  static final _setAudioFormat =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.media.AudioRecord$Builder setAudioFormat(android.media.AudioFormat audioFormat)`
  /// The returned object must be released after use, by calling the [release] method.
  AudioRecord$Builder? setAudioFormat(jni$_.JObject? audioFormat) {
    final _$audioFormat = audioFormat?.reference ?? jni$_.jNullReference;
    return _setAudioFormat(
      reference.pointer,
      _id_setAudioFormat as jni$_.JMethodIDPtr,
      _$audioFormat.pointer,
    ).object<AudioRecord$Builder?>(const $AudioRecord$Builder$NullableType());
  }

  static final _id_setBufferSizeInBytes = _class.instanceMethodId(
    r'setBufferSizeInBytes',
    r'(I)Landroid/media/AudioRecord$Builder;',
  );

  static final _setBufferSizeInBytes =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.media.AudioRecord$Builder setBufferSizeInBytes(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  AudioRecord$Builder? setBufferSizeInBytes(int i) {
    return _setBufferSizeInBytes(
      reference.pointer,
      _id_setBufferSizeInBytes as jni$_.JMethodIDPtr,
      i,
    ).object<AudioRecord$Builder?>(const $AudioRecord$Builder$NullableType());
  }

  static final _id_setAudioPlaybackCaptureConfig = _class.instanceMethodId(
    r'setAudioPlaybackCaptureConfig',
    r'(Landroid/media/AudioPlaybackCaptureConfiguration;)Landroid/media/AudioRecord$Builder;',
  );

  static final _setAudioPlaybackCaptureConfig =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.media.AudioRecord$Builder setAudioPlaybackCaptureConfig(android.media.AudioPlaybackCaptureConfiguration audioPlaybackCaptureConfiguration)`
  /// The returned object must be released after use, by calling the [release] method.
  AudioRecord$Builder? setAudioPlaybackCaptureConfig(
    jni$_.JObject? audioPlaybackCaptureConfiguration,
  ) {
    final _$audioPlaybackCaptureConfiguration =
        audioPlaybackCaptureConfiguration?.reference ?? jni$_.jNullReference;
    return _setAudioPlaybackCaptureConfig(
      reference.pointer,
      _id_setAudioPlaybackCaptureConfig as jni$_.JMethodIDPtr,
      _$audioPlaybackCaptureConfiguration.pointer,
    ).object<AudioRecord$Builder?>(const $AudioRecord$Builder$NullableType());
  }

  static final _id_setPrivacySensitive = _class.instanceMethodId(
    r'setPrivacySensitive',
    r'(Z)Landroid/media/AudioRecord$Builder;',
  );

  static final _setPrivacySensitive =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.media.AudioRecord$Builder setPrivacySensitive(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  AudioRecord$Builder? setPrivacySensitive(bool z) {
    return _setPrivacySensitive(
      reference.pointer,
      _id_setPrivacySensitive as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<AudioRecord$Builder?>(const $AudioRecord$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroid/media/AudioRecord;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.media.AudioRecord build()`
  /// The returned object must be released after use, by calling the [release] method.
  AudioRecord? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<AudioRecord?>(const $AudioRecord$NullableType());
  }
}

final class $AudioRecord$Builder$NullableType
    extends jni$_.JObjType<AudioRecord$Builder?> {
  @jni$_.internal
  const $AudioRecord$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/media/AudioRecord$Builder;';

  @jni$_.internal
  @core$_.override
  AudioRecord$Builder? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : AudioRecord$Builder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioRecord$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioRecord$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioRecord$Builder$NullableType) &&
        other is $AudioRecord$Builder$NullableType;
  }
}

final class $AudioRecord$Builder$Type
    extends jni$_.JObjType<AudioRecord$Builder> {
  @jni$_.internal
  const $AudioRecord$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/media/AudioRecord$Builder;';

  @jni$_.internal
  @core$_.override
  AudioRecord$Builder fromReference(jni$_.JReference reference) =>
      AudioRecord$Builder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioRecord$Builder?> get nullableType =>
      const $AudioRecord$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioRecord$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioRecord$Builder$Type) &&
        other is $AudioRecord$Builder$Type;
  }
}

/// from: `android.media.AudioRecord$MetricsConstants`
class AudioRecord$MetricsConstants extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AudioRecord$MetricsConstants> $type;

  @jni$_.internal
  AudioRecord$MetricsConstants.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/media/AudioRecord$MetricsConstants',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AudioRecord$MetricsConstants$NullableType();
  static const type = $AudioRecord$MetricsConstants$Type();
  static final _id_CHANNELS = _class.staticFieldId(
    r'CHANNELS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CHANNELS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CHANNELS =>
      _id_CHANNELS.get(_class, const jni$_.JStringNullableType());

  static final _id_ENCODING = _class.staticFieldId(
    r'ENCODING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ENCODING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ENCODING =>
      _id_ENCODING.get(_class, const jni$_.JStringNullableType());

  static final _id_LATENCY = _class.staticFieldId(
    r'LATENCY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LATENCY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LATENCY =>
      _id_LATENCY.get(_class, const jni$_.JStringNullableType());

  static final _id_SAMPLERATE = _class.staticFieldId(
    r'SAMPLERATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SAMPLERATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SAMPLERATE =>
      _id_SAMPLERATE.get(_class, const jni$_.JStringNullableType());

  static final _id_SOURCE = _class.staticFieldId(
    r'SOURCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SOURCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SOURCE =>
      _id_SOURCE.get(_class, const jni$_.JStringNullableType());
}

final class $AudioRecord$MetricsConstants$NullableType
    extends jni$_.JObjType<AudioRecord$MetricsConstants?> {
  @jni$_.internal
  const $AudioRecord$MetricsConstants$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/media/AudioRecord$MetricsConstants;';

  @jni$_.internal
  @core$_.override
  AudioRecord$MetricsConstants? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AudioRecord$MetricsConstants.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioRecord$MetricsConstants?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioRecord$MetricsConstants$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioRecord$MetricsConstants$NullableType) &&
        other is $AudioRecord$MetricsConstants$NullableType;
  }
}

final class $AudioRecord$MetricsConstants$Type
    extends jni$_.JObjType<AudioRecord$MetricsConstants> {
  @jni$_.internal
  const $AudioRecord$MetricsConstants$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/media/AudioRecord$MetricsConstants;';

  @jni$_.internal
  @core$_.override
  AudioRecord$MetricsConstants fromReference(jni$_.JReference reference) =>
      AudioRecord$MetricsConstants.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioRecord$MetricsConstants?> get nullableType =>
      const $AudioRecord$MetricsConstants$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioRecord$MetricsConstants$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioRecord$MetricsConstants$Type) &&
        other is $AudioRecord$MetricsConstants$Type;
  }
}

/// from: `android.media.AudioRecord$OnRecordPositionUpdateListener`
class AudioRecord$OnRecordPositionUpdateListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AudioRecord$OnRecordPositionUpdateListener> $type;

  @jni$_.internal
  AudioRecord$OnRecordPositionUpdateListener.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/media/AudioRecord$OnRecordPositionUpdateListener',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $AudioRecord$OnRecordPositionUpdateListener$NullableType();
  static const type = $AudioRecord$OnRecordPositionUpdateListener$Type();
  static final _id_onMarkerReached = _class.instanceMethodId(
    r'onMarkerReached',
    r'(Landroid/media/AudioRecord;)V',
  );

  static final _onMarkerReached =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void onMarkerReached(android.media.AudioRecord audioRecord)`
  void onMarkerReached(AudioRecord? audioRecord) {
    final _$audioRecord = audioRecord?.reference ?? jni$_.jNullReference;
    _onMarkerReached(
      reference.pointer,
      _id_onMarkerReached as jni$_.JMethodIDPtr,
      _$audioRecord.pointer,
    ).check();
  }

  static final _id_onPeriodicNotification = _class.instanceMethodId(
    r'onPeriodicNotification',
    r'(Landroid/media/AudioRecord;)V',
  );

  static final _onPeriodicNotification =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void onPeriodicNotification(android.media.AudioRecord audioRecord)`
  void onPeriodicNotification(AudioRecord? audioRecord) {
    final _$audioRecord = audioRecord?.reference ?? jni$_.jNullReference;
    _onPeriodicNotification(
      reference.pointer,
      _id_onPeriodicNotification as jni$_.JMethodIDPtr,
      _$audioRecord.pointer,
    ).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $AudioRecord$OnRecordPositionUpdateListener>
  _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onMarkerReached(Landroid/media/AudioRecord;)V') {
        _$impls[$p]!.onMarkerReached(
          $a![0]?.as(const $AudioRecord$Type(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onPeriodicNotification(Landroid/media/AudioRecord;)V') {
        _$impls[$p]!.onPeriodicNotification(
          $a![0]?.as(const $AudioRecord$Type(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $AudioRecord$OnRecordPositionUpdateListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.media.AudioRecord$OnRecordPositionUpdateListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onMarkerReached$async)
          r'onMarkerReached(Landroid/media/AudioRecord;)V',
        if ($impl.onPeriodicNotification$async)
          r'onPeriodicNotification(Landroid/media/AudioRecord;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory AudioRecord$OnRecordPositionUpdateListener.implement(
    $AudioRecord$OnRecordPositionUpdateListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return AudioRecord$OnRecordPositionUpdateListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $AudioRecord$OnRecordPositionUpdateListener {
  factory $AudioRecord$OnRecordPositionUpdateListener({
    required void Function(AudioRecord? audioRecord) onMarkerReached,
    bool onMarkerReached$async,
    required void Function(AudioRecord? audioRecord) onPeriodicNotification,
    bool onPeriodicNotification$async,
  }) = _$AudioRecord$OnRecordPositionUpdateListener;

  void onMarkerReached(AudioRecord? audioRecord);
  bool get onMarkerReached$async => false;
  void onPeriodicNotification(AudioRecord? audioRecord);
  bool get onPeriodicNotification$async => false;
}

final class _$AudioRecord$OnRecordPositionUpdateListener
    with $AudioRecord$OnRecordPositionUpdateListener {
  _$AudioRecord$OnRecordPositionUpdateListener({
    required void Function(AudioRecord? audioRecord) onMarkerReached,
    this.onMarkerReached$async = false,
    required void Function(AudioRecord? audioRecord) onPeriodicNotification,
    this.onPeriodicNotification$async = false,
  }) : _onMarkerReached = onMarkerReached,
       _onPeriodicNotification = onPeriodicNotification;

  final void Function(AudioRecord? audioRecord) _onMarkerReached;
  final bool onMarkerReached$async;
  final void Function(AudioRecord? audioRecord) _onPeriodicNotification;
  final bool onPeriodicNotification$async;

  void onMarkerReached(AudioRecord? audioRecord) {
    return _onMarkerReached(audioRecord);
  }

  void onPeriodicNotification(AudioRecord? audioRecord) {
    return _onPeriodicNotification(audioRecord);
  }
}

final class $AudioRecord$OnRecordPositionUpdateListener$NullableType
    extends jni$_.JObjType<AudioRecord$OnRecordPositionUpdateListener?> {
  @jni$_.internal
  const $AudioRecord$OnRecordPositionUpdateListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/media/AudioRecord$OnRecordPositionUpdateListener;';

  @jni$_.internal
  @core$_.override
  AudioRecord$OnRecordPositionUpdateListener? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : AudioRecord$OnRecordPositionUpdateListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioRecord$OnRecordPositionUpdateListener?>
  get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($AudioRecord$OnRecordPositionUpdateListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AudioRecord$OnRecordPositionUpdateListener$NullableType) &&
        other is $AudioRecord$OnRecordPositionUpdateListener$NullableType;
  }
}

final class $AudioRecord$OnRecordPositionUpdateListener$Type
    extends jni$_.JObjType<AudioRecord$OnRecordPositionUpdateListener> {
  @jni$_.internal
  const $AudioRecord$OnRecordPositionUpdateListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/media/AudioRecord$OnRecordPositionUpdateListener;';

  @jni$_.internal
  @core$_.override
  AudioRecord$OnRecordPositionUpdateListener fromReference(
    jni$_.JReference reference,
  ) => AudioRecord$OnRecordPositionUpdateListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioRecord$OnRecordPositionUpdateListener?>
  get nullableType =>
      const $AudioRecord$OnRecordPositionUpdateListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($AudioRecord$OnRecordPositionUpdateListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AudioRecord$OnRecordPositionUpdateListener$Type) &&
        other is $AudioRecord$OnRecordPositionUpdateListener$Type;
  }
}

/// from: `android.media.AudioRecord$OnRoutingChangedListener`
class AudioRecord$OnRoutingChangedListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AudioRecord$OnRoutingChangedListener> $type;

  @jni$_.internal
  AudioRecord$OnRoutingChangedListener.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/media/AudioRecord$OnRoutingChangedListener',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $AudioRecord$OnRoutingChangedListener$NullableType();
  static const type = $AudioRecord$OnRoutingChangedListener$Type();
  static final _id_onRoutingChanged = _class.instanceMethodId(
    r'onRoutingChanged',
    r'(Landroid/media/AudioRecord;)V',
  );

  static final _onRoutingChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void onRoutingChanged(android.media.AudioRecord audioRecord)`
  void onRoutingChanged(AudioRecord? audioRecord) {
    final _$audioRecord = audioRecord?.reference ?? jni$_.jNullReference;
    _onRoutingChanged(
      reference.pointer,
      _id_onRoutingChanged as jni$_.JMethodIDPtr,
      _$audioRecord.pointer,
    ).check();
  }

  static final _id_onRoutingChanged$1 = _class.instanceMethodId(
    r'onRoutingChanged',
    r'(Landroid/media/AudioRouting;)V',
  );

  static final _onRoutingChanged$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onRoutingChanged(android.media.AudioRouting audioRouting)`
  void onRoutingChanged$1(jni$_.JObject? audioRouting) {
    final _$audioRouting = audioRouting?.reference ?? jni$_.jNullReference;
    _onRoutingChanged$1(
      reference.pointer,
      _id_onRoutingChanged$1 as jni$_.JMethodIDPtr,
      _$audioRouting.pointer,
    ).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $AudioRecord$OnRoutingChangedListener> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onRoutingChanged(Landroid/media/AudioRecord;)V') {
        _$impls[$p]!.onRoutingChanged(
          $a![0]?.as(const $AudioRecord$Type(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onRoutingChanged(Landroid/media/AudioRouting;)V') {
        _$impls[$p]!.onRoutingChanged$1(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $AudioRecord$OnRoutingChangedListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.media.AudioRecord$OnRoutingChangedListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onRoutingChanged$async)
          r'onRoutingChanged(Landroid/media/AudioRecord;)V',
        if ($impl.onRoutingChanged$1$async)
          r'onRoutingChanged(Landroid/media/AudioRouting;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory AudioRecord$OnRoutingChangedListener.implement(
    $AudioRecord$OnRoutingChangedListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return AudioRecord$OnRoutingChangedListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $AudioRecord$OnRoutingChangedListener {
  factory $AudioRecord$OnRoutingChangedListener({
    required void Function(AudioRecord? audioRecord) onRoutingChanged,
    bool onRoutingChanged$async,
    required void Function(jni$_.JObject? audioRouting) onRoutingChanged$1,
    bool onRoutingChanged$1$async,
  }) = _$AudioRecord$OnRoutingChangedListener;

  void onRoutingChanged(AudioRecord? audioRecord);
  bool get onRoutingChanged$async => false;
  void onRoutingChanged$1(jni$_.JObject? audioRouting);
  bool get onRoutingChanged$1$async => false;
}

final class _$AudioRecord$OnRoutingChangedListener
    with $AudioRecord$OnRoutingChangedListener {
  _$AudioRecord$OnRoutingChangedListener({
    required void Function(AudioRecord? audioRecord) onRoutingChanged,
    this.onRoutingChanged$async = false,
    required void Function(jni$_.JObject? audioRouting) onRoutingChanged$1,
    this.onRoutingChanged$1$async = false,
  }) : _onRoutingChanged = onRoutingChanged,
       _onRoutingChanged$1 = onRoutingChanged$1;

  final void Function(AudioRecord? audioRecord) _onRoutingChanged;
  final bool onRoutingChanged$async;
  final void Function(jni$_.JObject? audioRouting) _onRoutingChanged$1;
  final bool onRoutingChanged$1$async;

  void onRoutingChanged(AudioRecord? audioRecord) {
    return _onRoutingChanged(audioRecord);
  }

  void onRoutingChanged$1(jni$_.JObject? audioRouting) {
    return _onRoutingChanged$1(audioRouting);
  }
}

final class $AudioRecord$OnRoutingChangedListener$NullableType
    extends jni$_.JObjType<AudioRecord$OnRoutingChangedListener?> {
  @jni$_.internal
  const $AudioRecord$OnRoutingChangedListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/media/AudioRecord$OnRoutingChangedListener;';

  @jni$_.internal
  @core$_.override
  AudioRecord$OnRoutingChangedListener? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : AudioRecord$OnRoutingChangedListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioRecord$OnRoutingChangedListener?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($AudioRecord$OnRoutingChangedListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AudioRecord$OnRoutingChangedListener$NullableType) &&
        other is $AudioRecord$OnRoutingChangedListener$NullableType;
  }
}

final class $AudioRecord$OnRoutingChangedListener$Type
    extends jni$_.JObjType<AudioRecord$OnRoutingChangedListener> {
  @jni$_.internal
  const $AudioRecord$OnRoutingChangedListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/media/AudioRecord$OnRoutingChangedListener;';

  @jni$_.internal
  @core$_.override
  AudioRecord$OnRoutingChangedListener fromReference(
    jni$_.JReference reference,
  ) => AudioRecord$OnRoutingChangedListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioRecord$OnRoutingChangedListener?> get nullableType =>
      const $AudioRecord$OnRoutingChangedListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioRecord$OnRoutingChangedListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioRecord$OnRoutingChangedListener$Type) &&
        other is $AudioRecord$OnRoutingChangedListener$Type;
  }
}

/// from: `android.media.AudioRecord`
class AudioRecord extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AudioRecord> $type;

  @jni$_.internal
  AudioRecord.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/media/AudioRecord');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AudioRecord$NullableType();
  static const type = $AudioRecord$Type();

  /// from: `static public final int ERROR`
  static const ERROR = -1;

  /// from: `static public final int ERROR_BAD_VALUE`
  static const ERROR_BAD_VALUE = -2;

  /// from: `static public final int ERROR_DEAD_OBJECT`
  static const ERROR_DEAD_OBJECT = -6;

  /// from: `static public final int ERROR_INVALID_OPERATION`
  static const ERROR_INVALID_OPERATION = -3;

  /// from: `static public final int READ_BLOCKING`
  static const READ_BLOCKING = 0;

  /// from: `static public final int READ_NON_BLOCKING`
  static const READ_NON_BLOCKING = 1;

  /// from: `static public final int RECORDSTATE_RECORDING`
  static const RECORDSTATE_RECORDING = 3;

  /// from: `static public final int RECORDSTATE_STOPPED`
  static const RECORDSTATE_STOPPED = 1;

  /// from: `static public final int STATE_INITIALIZED`
  static const STATE_INITIALIZED = 1;

  /// from: `static public final int STATE_UNINITIALIZED`
  static const STATE_UNINITIALIZED = 0;

  /// from: `static public final int SUCCESS`
  static const SUCCESS = 0;
  static final _id_new$ = _class.constructorId(r'(IIIII)V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
              int,
              int,
            )
          >();

  /// from: `public void <init>(int i, int i1, int i2, int i3, int i4)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AudioRecord(int i, int i1, int i2, int i3, int i4) {
    return AudioRecord.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        i,
        i1,
        i2,
        i3,
        i4,
      ).reference,
    );
  }

  static final _id_release$1 = _class.instanceMethodId(r'release', r'()V');

  static final _release$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void release()`
  void release$1() {
    _release$1(reference.pointer, _id_release$1 as jni$_.JMethodIDPtr).check();
  }

  static final _id_getSampleRate = _class.instanceMethodId(
    r'getSampleRate',
    r'()I',
  );

  static final _getSampleRate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getSampleRate()`
  int getSampleRate() {
    return _getSampleRate(
      reference.pointer,
      _id_getSampleRate as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getAudioSource = _class.instanceMethodId(
    r'getAudioSource',
    r'()I',
  );

  static final _getAudioSource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getAudioSource()`
  int getAudioSource() {
    return _getAudioSource(
      reference.pointer,
      _id_getAudioSource as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getAudioFormat = _class.instanceMethodId(
    r'getAudioFormat',
    r'()I',
  );

  static final _getAudioFormat =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getAudioFormat()`
  int getAudioFormat() {
    return _getAudioFormat(
      reference.pointer,
      _id_getAudioFormat as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getChannelConfiguration = _class.instanceMethodId(
    r'getChannelConfiguration',
    r'()I',
  );

  static final _getChannelConfiguration =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getChannelConfiguration()`
  int getChannelConfiguration() {
    return _getChannelConfiguration(
      reference.pointer,
      _id_getChannelConfiguration as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getFormat = _class.instanceMethodId(
    r'getFormat',
    r'()Landroid/media/AudioFormat;',
  );

  static final _getFormat =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.media.AudioFormat getFormat()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFormat() {
    return _getFormat(
      reference.pointer,
      _id_getFormat as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getChannelCount = _class.instanceMethodId(
    r'getChannelCount',
    r'()I',
  );

  static final _getChannelCount =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getChannelCount()`
  int getChannelCount() {
    return _getChannelCount(
      reference.pointer,
      _id_getChannelCount as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getState = _class.instanceMethodId(r'getState', r'()I');

  static final _getState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getState()`
  int getState() {
    return _getState(
      reference.pointer,
      _id_getState as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getRecordingState = _class.instanceMethodId(
    r'getRecordingState',
    r'()I',
  );

  static final _getRecordingState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getRecordingState()`
  int getRecordingState() {
    return _getRecordingState(
      reference.pointer,
      _id_getRecordingState as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getBufferSizeInFrames = _class.instanceMethodId(
    r'getBufferSizeInFrames',
    r'()I',
  );

  static final _getBufferSizeInFrames =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getBufferSizeInFrames()`
  int getBufferSizeInFrames() {
    return _getBufferSizeInFrames(
      reference.pointer,
      _id_getBufferSizeInFrames as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getNotificationMarkerPosition = _class.instanceMethodId(
    r'getNotificationMarkerPosition',
    r'()I',
  );

  static final _getNotificationMarkerPosition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getNotificationMarkerPosition()`
  int getNotificationMarkerPosition() {
    return _getNotificationMarkerPosition(
      reference.pointer,
      _id_getNotificationMarkerPosition as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getPositionNotificationPeriod = _class.instanceMethodId(
    r'getPositionNotificationPeriod',
    r'()I',
  );

  static final _getPositionNotificationPeriod =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getPositionNotificationPeriod()`
  int getPositionNotificationPeriod() {
    return _getPositionNotificationPeriod(
      reference.pointer,
      _id_getPositionNotificationPeriod as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getTimestamp = _class.instanceMethodId(
    r'getTimestamp',
    r'(Landroid/media/AudioTimestamp;I)I',
  );

  static final _getTimestamp =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public int getTimestamp(android.media.AudioTimestamp audioTimestamp, int i)`
  int getTimestamp(jni$_.JObject? audioTimestamp, int i) {
    final _$audioTimestamp = audioTimestamp?.reference ?? jni$_.jNullReference;
    return _getTimestamp(
      reference.pointer,
      _id_getTimestamp as jni$_.JMethodIDPtr,
      _$audioTimestamp.pointer,
      i,
    ).integer;
  }

  static final _id_getMinBufferSize = _class.staticMethodId(
    r'getMinBufferSize',
    r'(III)I',
  );

  static final _getMinBufferSize =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
            )
          >();

  /// from: `static public int getMinBufferSize(int i, int i1, int i2)`
  static int getMinBufferSize(int i, int i1, int i2) {
    return _getMinBufferSize(
      _class.reference.pointer,
      _id_getMinBufferSize as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_getAudioSessionId = _class.instanceMethodId(
    r'getAudioSessionId',
    r'()I',
  );

  static final _getAudioSessionId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getAudioSessionId()`
  int getAudioSessionId() {
    return _getAudioSessionId(
      reference.pointer,
      _id_getAudioSessionId as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_isPrivacySensitive = _class.instanceMethodId(
    r'isPrivacySensitive',
    r'()Z',
  );

  static final _isPrivacySensitive =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isPrivacySensitive()`
  bool isPrivacySensitive() {
    return _isPrivacySensitive(
      reference.pointer,
      _id_isPrivacySensitive as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_startRecording = _class.instanceMethodId(
    r'startRecording',
    r'()V',
  );

  static final _startRecording =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void startRecording()`
  void startRecording() {
    _startRecording(
      reference.pointer,
      _id_startRecording as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_startRecording$1 = _class.instanceMethodId(
    r'startRecording',
    r'(Landroid/media/MediaSyncEvent;)V',
  );

  static final _startRecording$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startRecording(android.media.MediaSyncEvent mediaSyncEvent)`
  void startRecording$1(jni$_.JObject? mediaSyncEvent) {
    final _$mediaSyncEvent = mediaSyncEvent?.reference ?? jni$_.jNullReference;
    _startRecording$1(
      reference.pointer,
      _id_startRecording$1 as jni$_.JMethodIDPtr,
      _$mediaSyncEvent.pointer,
    ).check();
  }

  static final _id_stop = _class.instanceMethodId(r'stop', r'()V');

  static final _stop =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void stop()`
  void stop() {
    _stop(reference.pointer, _id_stop as jni$_.JMethodIDPtr).check();
  }

  static final _id_read = _class.instanceMethodId(r'read', r'([BII)I');

  static final _read =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public int read(byte[] bs, int i, int i1)`
  int read(jni$_.JByteArray? bs, int i, int i1) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _read(
      reference.pointer,
      _id_read as jni$_.JMethodIDPtr,
      _$bs.pointer,
      i,
      i1,
    ).integer;
  }

  static final _id_read$1 = _class.instanceMethodId(r'read', r'([BIII)I');

  static final _read$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public int read(byte[] bs, int i, int i1, int i2)`
  int read$1(jni$_.JByteArray? bs, int i, int i1, int i2) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _read$1(
      reference.pointer,
      _id_read$1 as jni$_.JMethodIDPtr,
      _$bs.pointer,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_read$2 = _class.instanceMethodId(r'read', r'([SII)I');

  static final _read$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public int read(short[] ss, int i, int i1)`
  int read$2(jni$_.JShortArray? ss, int i, int i1) {
    final _$ss = ss?.reference ?? jni$_.jNullReference;
    return _read$2(
      reference.pointer,
      _id_read$2 as jni$_.JMethodIDPtr,
      _$ss.pointer,
      i,
      i1,
    ).integer;
  }

  static final _id_read$3 = _class.instanceMethodId(r'read', r'([SIII)I');

  static final _read$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public int read(short[] ss, int i, int i1, int i2)`
  int read$3(jni$_.JShortArray? ss, int i, int i1, int i2) {
    final _$ss = ss?.reference ?? jni$_.jNullReference;
    return _read$3(
      reference.pointer,
      _id_read$3 as jni$_.JMethodIDPtr,
      _$ss.pointer,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_read$4 = _class.instanceMethodId(r'read', r'([FIII)I');

  static final _read$4 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public int read(float[] fs, int i, int i1, int i2)`
  int read$4(jni$_.JFloatArray? fs, int i, int i1, int i2) {
    final _$fs = fs?.reference ?? jni$_.jNullReference;
    return _read$4(
      reference.pointer,
      _id_read$4 as jni$_.JMethodIDPtr,
      _$fs.pointer,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_read$5 = _class.instanceMethodId(
    r'read',
    r'(Ljava/nio/ByteBuffer;I)I',
  );

  static final _read$5 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public int read(java.nio.ByteBuffer byteBuffer, int i)`
  int read$5(jni$_.JByteBuffer? byteBuffer, int i) {
    final _$byteBuffer = byteBuffer?.reference ?? jni$_.jNullReference;
    return _read$5(
      reference.pointer,
      _id_read$5 as jni$_.JMethodIDPtr,
      _$byteBuffer.pointer,
      i,
    ).integer;
  }

  static final _id_read$6 = _class.instanceMethodId(
    r'read',
    r'(Ljava/nio/ByteBuffer;II)I',
  );

  static final _read$6 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public int read(java.nio.ByteBuffer byteBuffer, int i, int i1)`
  int read$6(jni$_.JByteBuffer? byteBuffer, int i, int i1) {
    final _$byteBuffer = byteBuffer?.reference ?? jni$_.jNullReference;
    return _read$6(
      reference.pointer,
      _id_read$6 as jni$_.JMethodIDPtr,
      _$byteBuffer.pointer,
      i,
      i1,
    ).integer;
  }

  static final _id_getMetrics = _class.instanceMethodId(
    r'getMetrics',
    r'()Landroid/os/PersistableBundle;',
  );

  static final _getMetrics =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.PersistableBundle getMetrics()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMetrics() {
    return _getMetrics(
      reference.pointer,
      _id_getMetrics as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setRecordPositionUpdateListener = _class.instanceMethodId(
    r'setRecordPositionUpdateListener',
    r'(Landroid/media/AudioRecord$OnRecordPositionUpdateListener;)V',
  );

  static final _setRecordPositionUpdateListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener onRecordPositionUpdateListener)`
  void setRecordPositionUpdateListener(
    AudioRecord$OnRecordPositionUpdateListener? onRecordPositionUpdateListener,
  ) {
    final _$onRecordPositionUpdateListener =
        onRecordPositionUpdateListener?.reference ?? jni$_.jNullReference;
    _setRecordPositionUpdateListener(
      reference.pointer,
      _id_setRecordPositionUpdateListener as jni$_.JMethodIDPtr,
      _$onRecordPositionUpdateListener.pointer,
    ).check();
  }

  static final _id_setRecordPositionUpdateListener$1 = _class.instanceMethodId(
    r'setRecordPositionUpdateListener',
    r'(Landroid/media/AudioRecord$OnRecordPositionUpdateListener;Landroid/os/Handler;)V',
  );

  static final _setRecordPositionUpdateListener$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener onRecordPositionUpdateListener, android.os.Handler handler)`
  void setRecordPositionUpdateListener$1(
    AudioRecord$OnRecordPositionUpdateListener? onRecordPositionUpdateListener,
    jni$_.JObject? handler,
  ) {
    final _$onRecordPositionUpdateListener =
        onRecordPositionUpdateListener?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    _setRecordPositionUpdateListener$1(
      reference.pointer,
      _id_setRecordPositionUpdateListener$1 as jni$_.JMethodIDPtr,
      _$onRecordPositionUpdateListener.pointer,
      _$handler.pointer,
    ).check();
  }

  static final _id_setNotificationMarkerPosition = _class.instanceMethodId(
    r'setNotificationMarkerPosition',
    r'(I)I',
  );

  static final _setNotificationMarkerPosition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public int setNotificationMarkerPosition(int i)`
  int setNotificationMarkerPosition(int i) {
    return _setNotificationMarkerPosition(
      reference.pointer,
      _id_setNotificationMarkerPosition as jni$_.JMethodIDPtr,
      i,
    ).integer;
  }

  static final _id_getRoutedDevice = _class.instanceMethodId(
    r'getRoutedDevice',
    r'()Landroid/media/AudioDeviceInfo;',
  );

  static final _getRoutedDevice =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.media.AudioDeviceInfo getRoutedDevice()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getRoutedDevice() {
    return _getRoutedDevice(
      reference.pointer,
      _id_getRoutedDevice as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_addOnRoutingChangedListener = _class.instanceMethodId(
    r'addOnRoutingChangedListener',
    r'(Landroid/media/AudioRouting$OnRoutingChangedListener;Landroid/os/Handler;)V',
  );

  static final _addOnRoutingChangedListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener onRoutingChangedListener, android.os.Handler handler)`
  void addOnRoutingChangedListener(
    jni$_.JObject? onRoutingChangedListener,
    jni$_.JObject? handler,
  ) {
    final _$onRoutingChangedListener =
        onRoutingChangedListener?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    _addOnRoutingChangedListener(
      reference.pointer,
      _id_addOnRoutingChangedListener as jni$_.JMethodIDPtr,
      _$onRoutingChangedListener.pointer,
      _$handler.pointer,
    ).check();
  }

  static final _id_removeOnRoutingChangedListener = _class.instanceMethodId(
    r'removeOnRoutingChangedListener',
    r'(Landroid/media/AudioRouting$OnRoutingChangedListener;)V',
  );

  static final _removeOnRoutingChangedListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener onRoutingChangedListener)`
  void removeOnRoutingChangedListener(jni$_.JObject? onRoutingChangedListener) {
    final _$onRoutingChangedListener =
        onRoutingChangedListener?.reference ?? jni$_.jNullReference;
    _removeOnRoutingChangedListener(
      reference.pointer,
      _id_removeOnRoutingChangedListener as jni$_.JMethodIDPtr,
      _$onRoutingChangedListener.pointer,
    ).check();
  }

  static final _id_addOnRoutingChangedListener$1 = _class.instanceMethodId(
    r'addOnRoutingChangedListener',
    r'(Landroid/media/AudioRecord$OnRoutingChangedListener;Landroid/os/Handler;)V',
  );

  static final _addOnRoutingChangedListener$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addOnRoutingChangedListener(android.media.AudioRecord$OnRoutingChangedListener onRoutingChangedListener, android.os.Handler handler)`
  void addOnRoutingChangedListener$1(
    AudioRecord$OnRoutingChangedListener? onRoutingChangedListener,
    jni$_.JObject? handler,
  ) {
    final _$onRoutingChangedListener =
        onRoutingChangedListener?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    _addOnRoutingChangedListener$1(
      reference.pointer,
      _id_addOnRoutingChangedListener$1 as jni$_.JMethodIDPtr,
      _$onRoutingChangedListener.pointer,
      _$handler.pointer,
    ).check();
  }

  static final _id_removeOnRoutingChangedListener$1 = _class.instanceMethodId(
    r'removeOnRoutingChangedListener',
    r'(Landroid/media/AudioRecord$OnRoutingChangedListener;)V',
  );

  static final _removeOnRoutingChangedListener$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void removeOnRoutingChangedListener(android.media.AudioRecord$OnRoutingChangedListener onRoutingChangedListener)`
  void removeOnRoutingChangedListener$1(
    AudioRecord$OnRoutingChangedListener? onRoutingChangedListener,
  ) {
    final _$onRoutingChangedListener =
        onRoutingChangedListener?.reference ?? jni$_.jNullReference;
    _removeOnRoutingChangedListener$1(
      reference.pointer,
      _id_removeOnRoutingChangedListener$1 as jni$_.JMethodIDPtr,
      _$onRoutingChangedListener.pointer,
    ).check();
  }

  static final _id_setPositionNotificationPeriod = _class.instanceMethodId(
    r'setPositionNotificationPeriod',
    r'(I)I',
  );

  static final _setPositionNotificationPeriod =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public int setPositionNotificationPeriod(int i)`
  int setPositionNotificationPeriod(int i) {
    return _setPositionNotificationPeriod(
      reference.pointer,
      _id_setPositionNotificationPeriod as jni$_.JMethodIDPtr,
      i,
    ).integer;
  }

  static final _id_setPreferredDevice = _class.instanceMethodId(
    r'setPreferredDevice',
    r'(Landroid/media/AudioDeviceInfo;)Z',
  );

  static final _setPreferredDevice =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean setPreferredDevice(android.media.AudioDeviceInfo audioDeviceInfo)`
  bool setPreferredDevice(jni$_.JObject? audioDeviceInfo) {
    final _$audioDeviceInfo =
        audioDeviceInfo?.reference ?? jni$_.jNullReference;
    return _setPreferredDevice(
      reference.pointer,
      _id_setPreferredDevice as jni$_.JMethodIDPtr,
      _$audioDeviceInfo.pointer,
    ).boolean;
  }

  static final _id_getPreferredDevice = _class.instanceMethodId(
    r'getPreferredDevice',
    r'()Landroid/media/AudioDeviceInfo;',
  );

  static final _getPreferredDevice =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.media.AudioDeviceInfo getPreferredDevice()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getPreferredDevice() {
    return _getPreferredDevice(
      reference.pointer,
      _id_getPreferredDevice as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getActiveMicrophones = _class.instanceMethodId(
    r'getActiveMicrophones',
    r'()Ljava/util/List;',
  );

  static final _getActiveMicrophones =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.List<android.media.MicrophoneInfo> getActiveMicrophones()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<jni$_.JObject?>? getActiveMicrophones() {
    return _getActiveMicrophones(
      reference.pointer,
      _id_getActiveMicrophones as jni$_.JMethodIDPtr,
    ).object<jni$_.JList<jni$_.JObject?>?>(
      const jni$_.JListNullableType<jni$_.JObject?>(
        jni$_.JObjectNullableType(),
      ),
    );
  }

  static final _id_registerAudioRecordingCallback = _class.instanceMethodId(
    r'registerAudioRecordingCallback',
    r'(Ljava/util/concurrent/Executor;Landroid/media/AudioManager$AudioRecordingCallback;)V',
  );

  static final _registerAudioRecordingCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void registerAudioRecordingCallback(java.util.concurrent.Executor executor, android.media.AudioManager$AudioRecordingCallback audioRecordingCallback)`
  void registerAudioRecordingCallback(
    jni$_.JObject? executor,
    jni$_.JObject? audioRecordingCallback,
  ) {
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$audioRecordingCallback =
        audioRecordingCallback?.reference ?? jni$_.jNullReference;
    _registerAudioRecordingCallback(
      reference.pointer,
      _id_registerAudioRecordingCallback as jni$_.JMethodIDPtr,
      _$executor.pointer,
      _$audioRecordingCallback.pointer,
    ).check();
  }

  static final _id_unregisterAudioRecordingCallback = _class.instanceMethodId(
    r'unregisterAudioRecordingCallback',
    r'(Landroid/media/AudioManager$AudioRecordingCallback;)V',
  );

  static final _unregisterAudioRecordingCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback audioRecordingCallback)`
  void unregisterAudioRecordingCallback(jni$_.JObject? audioRecordingCallback) {
    final _$audioRecordingCallback =
        audioRecordingCallback?.reference ?? jni$_.jNullReference;
    _unregisterAudioRecordingCallback(
      reference.pointer,
      _id_unregisterAudioRecordingCallback as jni$_.JMethodIDPtr,
      _$audioRecordingCallback.pointer,
    ).check();
  }

  static final _id_getActiveRecordingConfiguration = _class.instanceMethodId(
    r'getActiveRecordingConfiguration',
    r'()Landroid/media/AudioRecordingConfiguration;',
  );

  static final _getActiveRecordingConfiguration =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getActiveRecordingConfiguration() {
    return _getActiveRecordingConfiguration(
      reference.pointer,
      _id_getActiveRecordingConfiguration as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setPreferredMicrophoneDirection = _class.instanceMethodId(
    r'setPreferredMicrophoneDirection',
    r'(I)Z',
  );

  static final _setPreferredMicrophoneDirection =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public boolean setPreferredMicrophoneDirection(int i)`
  bool setPreferredMicrophoneDirection(int i) {
    return _setPreferredMicrophoneDirection(
      reference.pointer,
      _id_setPreferredMicrophoneDirection as jni$_.JMethodIDPtr,
      i,
    ).boolean;
  }

  static final _id_setPreferredMicrophoneFieldDimension = _class
      .instanceMethodId(r'setPreferredMicrophoneFieldDimension', r'(F)Z');

  static final _setPreferredMicrophoneFieldDimension =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
            )
          >();

  /// from: `public boolean setPreferredMicrophoneFieldDimension(float f)`
  bool setPreferredMicrophoneFieldDimension(double f) {
    return _setPreferredMicrophoneFieldDimension(
      reference.pointer,
      _id_setPreferredMicrophoneFieldDimension as jni$_.JMethodIDPtr,
      f,
    ).boolean;
  }

  static final _id_setLogSessionId = _class.instanceMethodId(
    r'setLogSessionId',
    r'(Landroid/media/metrics/LogSessionId;)V',
  );

  static final _setLogSessionId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setLogSessionId(android.media.metrics.LogSessionId logSessionId)`
  void setLogSessionId(jni$_.JObject? logSessionId) {
    final _$logSessionId = logSessionId?.reference ?? jni$_.jNullReference;
    _setLogSessionId(
      reference.pointer,
      _id_setLogSessionId as jni$_.JMethodIDPtr,
      _$logSessionId.pointer,
    ).check();
  }

  static final _id_getLogSessionId = _class.instanceMethodId(
    r'getLogSessionId',
    r'()Landroid/media/metrics/LogSessionId;',
  );

  static final _getLogSessionId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.media.metrics.LogSessionId getLogSessionId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLogSessionId() {
    return _getLogSessionId(
      reference.pointer,
      _id_getLogSessionId as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $AudioRecord$NullableType extends jni$_.JObjType<AudioRecord?> {
  @jni$_.internal
  const $AudioRecord$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/media/AudioRecord;';

  @jni$_.internal
  @core$_.override
  AudioRecord? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : AudioRecord.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioRecord?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioRecord$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioRecord$NullableType) &&
        other is $AudioRecord$NullableType;
  }
}

final class $AudioRecord$Type extends jni$_.JObjType<AudioRecord> {
  @jni$_.internal
  const $AudioRecord$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/media/AudioRecord;';

  @jni$_.internal
  @core$_.override
  AudioRecord fromReference(jni$_.JReference reference) =>
      AudioRecord.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioRecord?> get nullableType =>
      const $AudioRecord$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioRecord$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioRecord$Type) &&
        other is $AudioRecord$Type;
  }
}
