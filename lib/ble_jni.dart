// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `android.bluetooth.BluetoothManager`
class BluetoothManager extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothManager> $type;

  @jni$_.internal
  BluetoothManager.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/BluetoothManager',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothManager$NullableType();
  static const type = $BluetoothManager$Type();
  static final _id_getAdapter = _class.instanceMethodId(
    r'getAdapter',
    r'()Landroid/bluetooth/BluetoothAdapter;',
  );

  static final _getAdapter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.bluetooth.BluetoothAdapter getAdapter()`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothAdapter? getAdapter() {
    return _getAdapter(
      reference.pointer,
      _id_getAdapter as jni$_.JMethodIDPtr,
    ).object<BluetoothAdapter?>(const $BluetoothAdapter$NullableType());
  }

  static final _id_getConnectionState = _class.instanceMethodId(
    r'getConnectionState',
    r'(Landroid/bluetooth/BluetoothDevice;I)I',
  );

  static final _getConnectionState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public int getConnectionState(android.bluetooth.BluetoothDevice bluetoothDevice, int i)`
  int getConnectionState(BluetoothDevice? bluetoothDevice, int i) {
    final _$bluetoothDevice =
        bluetoothDevice?.reference ?? jni$_.jNullReference;
    return _getConnectionState(
      reference.pointer,
      _id_getConnectionState as jni$_.JMethodIDPtr,
      _$bluetoothDevice.pointer,
      i,
    ).integer;
  }

  static final _id_getConnectedDevices = _class.instanceMethodId(
    r'getConnectedDevices',
    r'(I)Ljava/util/List;',
  );

  static final _getConnectedDevices =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<BluetoothDevice?>? getConnectedDevices(int i) {
    return _getConnectedDevices(
      reference.pointer,
      _id_getConnectedDevices as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JList<BluetoothDevice?>?>(
      const jni$_.JListNullableType<BluetoothDevice?>(
        $BluetoothDevice$NullableType(),
      ),
    );
  }

  static final _id_getDevicesMatchingConnectionStates = _class.instanceMethodId(
    r'getDevicesMatchingConnectionStates',
    r'(I[I)Ljava/util/List;',
  );

  static final _getDevicesMatchingConnectionStates =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int i, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<BluetoothDevice?>? getDevicesMatchingConnectionStates(
    int i,
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _getDevicesMatchingConnectionStates(
      reference.pointer,
      _id_getDevicesMatchingConnectionStates as jni$_.JMethodIDPtr,
      i,
      _$is$.pointer,
    ).object<jni$_.JList<BluetoothDevice?>?>(
      const jni$_.JListNullableType<BluetoothDevice?>(
        $BluetoothDevice$NullableType(),
      ),
    );
  }

  static final _id_openGattServer = _class.instanceMethodId(
    r'openGattServer',
    r'(Landroid/content/Context;Landroid/bluetooth/BluetoothGattServerCallback;)Landroid/bluetooth/BluetoothGattServer;',
  );

  static final _openGattServer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.BluetoothGattServer openGattServer(android.content.Context context, android.bluetooth.BluetoothGattServerCallback bluetoothGattServerCallback)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openGattServer(
    Context? context,
    jni$_.JObject? bluetoothGattServerCallback,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattServerCallback =
        bluetoothGattServerCallback?.reference ?? jni$_.jNullReference;
    return _openGattServer(
      reference.pointer,
      _id_openGattServer as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$bluetoothGattServerCallback.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $BluetoothManager$NullableType
    extends jni$_.JObjType<BluetoothManager?> {
  @jni$_.internal
  const $BluetoothManager$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothManager;';

  @jni$_.internal
  @core$_.override
  BluetoothManager? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : BluetoothManager.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothManager?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothManager$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothManager$NullableType) &&
        other is $BluetoothManager$NullableType;
  }
}

final class $BluetoothManager$Type extends jni$_.JObjType<BluetoothManager> {
  @jni$_.internal
  const $BluetoothManager$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothManager;';

  @jni$_.internal
  @core$_.override
  BluetoothManager fromReference(jni$_.JReference reference) =>
      BluetoothManager.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothManager?> get nullableType =>
      const $BluetoothManager$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothManager$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothManager$Type) &&
        other is $BluetoothManager$Type;
  }
}

/// from: `android.bluetooth.BluetoothAdapter$LeScanCallback`
class BluetoothAdapter$LeScanCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothAdapter$LeScanCallback> $type;

  @jni$_.internal
  BluetoothAdapter$LeScanCallback.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/BluetoothAdapter$LeScanCallback',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothAdapter$LeScanCallback$NullableType();
  static const type = $BluetoothAdapter$LeScanCallback$Type();
  static final _id_onLeScan = _class.instanceMethodId(
    r'onLeScan',
    r'(Landroid/bluetooth/BluetoothDevice;I[B)V',
  );

  static final _onLeScan =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void onLeScan(android.bluetooth.BluetoothDevice bluetoothDevice, int i, byte[] bs)`
  void onLeScan(BluetoothDevice? bluetoothDevice, int i, jni$_.JByteArray? bs) {
    final _$bluetoothDevice =
        bluetoothDevice?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    _onLeScan(
      reference.pointer,
      _id_onLeScan as jni$_.JMethodIDPtr,
      _$bluetoothDevice.pointer,
      i,
      _$bs.pointer,
    ).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $BluetoothAdapter$LeScanCallback> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onLeScan(Landroid/bluetooth/BluetoothDevice;I[B)V') {
        _$impls[$p]!.onLeScan(
          $a![0]?.as(const $BluetoothDevice$Type(), releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![2]?.as(const jni$_.JByteArrayType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $BluetoothAdapter$LeScanCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.bluetooth.BluetoothAdapter$LeScanCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onLeScan$async)
          r'onLeScan(Landroid/bluetooth/BluetoothDevice;I[B)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory BluetoothAdapter$LeScanCallback.implement(
    $BluetoothAdapter$LeScanCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return BluetoothAdapter$LeScanCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $BluetoothAdapter$LeScanCallback {
  factory $BluetoothAdapter$LeScanCallback({
    required void Function(
      BluetoothDevice? bluetoothDevice,
      int i,
      jni$_.JByteArray? bs,
    )
    onLeScan,
    bool onLeScan$async,
  }) = _$BluetoothAdapter$LeScanCallback;

  void onLeScan(BluetoothDevice? bluetoothDevice, int i, jni$_.JByteArray? bs);
  bool get onLeScan$async => false;
}

final class _$BluetoothAdapter$LeScanCallback
    with $BluetoothAdapter$LeScanCallback {
  _$BluetoothAdapter$LeScanCallback({
    required void Function(
      BluetoothDevice? bluetoothDevice,
      int i,
      jni$_.JByteArray? bs,
    )
    onLeScan,
    this.onLeScan$async = false,
  }) : _onLeScan = onLeScan;

  final void Function(
    BluetoothDevice? bluetoothDevice,
    int i,
    jni$_.JByteArray? bs,
  )
  _onLeScan;
  final bool onLeScan$async;

  void onLeScan(BluetoothDevice? bluetoothDevice, int i, jni$_.JByteArray? bs) {
    return _onLeScan(bluetoothDevice, i, bs);
  }
}

final class $BluetoothAdapter$LeScanCallback$NullableType
    extends jni$_.JObjType<BluetoothAdapter$LeScanCallback?> {
  @jni$_.internal
  const $BluetoothAdapter$LeScanCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/bluetooth/BluetoothAdapter$LeScanCallback;';

  @jni$_.internal
  @core$_.override
  BluetoothAdapter$LeScanCallback? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BluetoothAdapter$LeScanCallback.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothAdapter$LeScanCallback?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothAdapter$LeScanCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($BluetoothAdapter$LeScanCallback$NullableType) &&
        other is $BluetoothAdapter$LeScanCallback$NullableType;
  }
}

final class $BluetoothAdapter$LeScanCallback$Type
    extends jni$_.JObjType<BluetoothAdapter$LeScanCallback> {
  @jni$_.internal
  const $BluetoothAdapter$LeScanCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/bluetooth/BluetoothAdapter$LeScanCallback;';

  @jni$_.internal
  @core$_.override
  BluetoothAdapter$LeScanCallback fromReference(jni$_.JReference reference) =>
      BluetoothAdapter$LeScanCallback.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothAdapter$LeScanCallback?> get nullableType =>
      const $BluetoothAdapter$LeScanCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothAdapter$LeScanCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothAdapter$LeScanCallback$Type) &&
        other is $BluetoothAdapter$LeScanCallback$Type;
  }
}

/// from: `android.bluetooth.BluetoothAdapter`
class BluetoothAdapter extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothAdapter> $type;

  @jni$_.internal
  BluetoothAdapter.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/BluetoothAdapter',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothAdapter$NullableType();
  static const type = $BluetoothAdapter$Type();
  static final _id_ACTION_CONNECTION_STATE_CHANGED = _class.staticFieldId(
    r'ACTION_CONNECTION_STATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CONNECTION_STATE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CONNECTION_STATE_CHANGED =>
      _id_ACTION_CONNECTION_STATE_CHANGED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACTION_DISCOVERY_FINISHED = _class.staticFieldId(
    r'ACTION_DISCOVERY_FINISHED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DISCOVERY_FINISHED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DISCOVERY_FINISHED =>
      _id_ACTION_DISCOVERY_FINISHED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACTION_DISCOVERY_STARTED = _class.staticFieldId(
    r'ACTION_DISCOVERY_STARTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DISCOVERY_STARTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DISCOVERY_STARTED =>
      _id_ACTION_DISCOVERY_STARTED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACTION_LOCAL_NAME_CHANGED = _class.staticFieldId(
    r'ACTION_LOCAL_NAME_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_LOCAL_NAME_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_LOCAL_NAME_CHANGED =>
      _id_ACTION_LOCAL_NAME_CHANGED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACTION_REQUEST_DISCOVERABLE = _class.staticFieldId(
    r'ACTION_REQUEST_DISCOVERABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_REQUEST_DISCOVERABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_REQUEST_DISCOVERABLE =>
      _id_ACTION_REQUEST_DISCOVERABLE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACTION_REQUEST_ENABLE = _class.staticFieldId(
    r'ACTION_REQUEST_ENABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_REQUEST_ENABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_REQUEST_ENABLE =>
      _id_ACTION_REQUEST_ENABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SCAN_MODE_CHANGED = _class.staticFieldId(
    r'ACTION_SCAN_MODE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SCAN_MODE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SCAN_MODE_CHANGED =>
      _id_ACTION_SCAN_MODE_CHANGED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACTION_STATE_CHANGED = _class.staticFieldId(
    r'ACTION_STATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_STATE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_STATE_CHANGED =>
      _id_ACTION_STATE_CHANGED.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int ERROR`
  static const ERROR = -2147483648;
  static final _id_EXTRA_CONNECTION_STATE = _class.staticFieldId(
    r'EXTRA_CONNECTION_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CONNECTION_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CONNECTION_STATE =>
      _id_EXTRA_CONNECTION_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DISCOVERABLE_DURATION = _class.staticFieldId(
    r'EXTRA_DISCOVERABLE_DURATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DISCOVERABLE_DURATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DISCOVERABLE_DURATION =>
      _id_EXTRA_DISCOVERABLE_DURATION.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_EXTRA_LOCAL_NAME = _class.staticFieldId(
    r'EXTRA_LOCAL_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_LOCAL_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_LOCAL_NAME =>
      _id_EXTRA_LOCAL_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PREVIOUS_CONNECTION_STATE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_CONNECTION_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PREVIOUS_CONNECTION_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PREVIOUS_CONNECTION_STATE =>
      _id_EXTRA_PREVIOUS_CONNECTION_STATE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_EXTRA_PREVIOUS_SCAN_MODE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_SCAN_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PREVIOUS_SCAN_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PREVIOUS_SCAN_MODE =>
      _id_EXTRA_PREVIOUS_SCAN_MODE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_EXTRA_PREVIOUS_STATE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PREVIOUS_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PREVIOUS_STATE =>
      _id_EXTRA_PREVIOUS_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SCAN_MODE = _class.staticFieldId(
    r'EXTRA_SCAN_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SCAN_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SCAN_MODE =>
      _id_EXTRA_SCAN_MODE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_STATE = _class.staticFieldId(
    r'EXTRA_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_STATE =>
      _id_EXTRA_STATE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int SCAN_MODE_CONNECTABLE`
  static const SCAN_MODE_CONNECTABLE = 21;

  /// from: `static public final int SCAN_MODE_CONNECTABLE_DISCOVERABLE`
  static const SCAN_MODE_CONNECTABLE_DISCOVERABLE = 23;

  /// from: `static public final int SCAN_MODE_NONE`
  static const SCAN_MODE_NONE = 20;

  /// from: `static public final int STATE_CONNECTED`
  static const STATE_CONNECTED = 2;

  /// from: `static public final int STATE_CONNECTING`
  static const STATE_CONNECTING = 1;

  /// from: `static public final int STATE_DISCONNECTED`
  static const STATE_DISCONNECTED = 0;

  /// from: `static public final int STATE_DISCONNECTING`
  static const STATE_DISCONNECTING = 3;

  /// from: `static public final int STATE_OFF`
  static const STATE_OFF = 10;

  /// from: `static public final int STATE_ON`
  static const STATE_ON = 12;

  /// from: `static public final int STATE_TURNING_OFF`
  static const STATE_TURNING_OFF = 13;

  /// from: `static public final int STATE_TURNING_ON`
  static const STATE_TURNING_ON = 11;
  static final _id_getDefaultAdapter = _class.staticMethodId(
    r'getDefaultAdapter',
    r'()Landroid/bluetooth/BluetoothAdapter;',
  );

  static final _getDefaultAdapter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `static public android.bluetooth.BluetoothAdapter getDefaultAdapter()`
  /// The returned object must be released after use, by calling the [release] method.
  static BluetoothAdapter? getDefaultAdapter() {
    return _getDefaultAdapter(
      _class.reference.pointer,
      _id_getDefaultAdapter as jni$_.JMethodIDPtr,
    ).object<BluetoothAdapter?>(const $BluetoothAdapter$NullableType());
  }

  static final _id_getRemoteDevice = _class.instanceMethodId(
    r'getRemoteDevice',
    r'(Ljava/lang/String;)Landroid/bluetooth/BluetoothDevice;',
  );

  static final _getRemoteDevice =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothDevice? getRemoteDevice(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getRemoteDevice(
      reference.pointer,
      _id_getRemoteDevice as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<BluetoothDevice?>(const $BluetoothDevice$NullableType());
  }

  static final _id_getRemoteLeDevice = _class.instanceMethodId(
    r'getRemoteLeDevice',
    r'(Ljava/lang/String;I)Landroid/bluetooth/BluetoothDevice;',
  );

  static final _getRemoteLeDevice =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public android.bluetooth.BluetoothDevice getRemoteLeDevice(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothDevice? getRemoteLeDevice(jni$_.JString? string, int i) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getRemoteLeDevice(
      reference.pointer,
      _id_getRemoteLeDevice as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<BluetoothDevice?>(const $BluetoothDevice$NullableType());
  }

  static final _id_getRemoteDevice$1 = _class.instanceMethodId(
    r'getRemoteDevice',
    r'([B)Landroid/bluetooth/BluetoothDevice;',
  );

  static final _getRemoteDevice$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.BluetoothDevice getRemoteDevice(byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothDevice? getRemoteDevice$1(jni$_.JByteArray? bs) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _getRemoteDevice$1(
      reference.pointer,
      _id_getRemoteDevice$1 as jni$_.JMethodIDPtr,
      _$bs.pointer,
    ).object<BluetoothDevice?>(const $BluetoothDevice$NullableType());
  }

  static final _id_getBluetoothLeAdvertiser = _class.instanceMethodId(
    r'getBluetoothLeAdvertiser',
    r'()Landroid/bluetooth/le/BluetoothLeAdvertiser;',
  );

  static final _getBluetoothLeAdvertiser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getBluetoothLeAdvertiser() {
    return _getBluetoothLeAdvertiser(
      reference.pointer,
      _id_getBluetoothLeAdvertiser as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getBluetoothLeScanner = _class.instanceMethodId(
    r'getBluetoothLeScanner',
    r'()Landroid/bluetooth/le/BluetoothLeScanner;',
  );

  static final _getBluetoothLeScanner =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.bluetooth.le.BluetoothLeScanner getBluetoothLeScanner()`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothLeScanner? getBluetoothLeScanner() {
    return _getBluetoothLeScanner(
      reference.pointer,
      _id_getBluetoothLeScanner as jni$_.JMethodIDPtr,
    ).object<BluetoothLeScanner?>(const $BluetoothLeScanner$NullableType());
  }

  static final _id_isEnabled = _class.instanceMethodId(r'isEnabled', r'()Z');

  static final _isEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isEnabled()`
  bool isEnabled() {
    return _isEnabled(
      reference.pointer,
      _id_isEnabled as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_getState = _class.instanceMethodId(r'getState', r'()I');

  static final _getState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getState()`
  int getState() {
    return _getState(
      reference.pointer,
      _id_getState as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_enable = _class.instanceMethodId(r'enable', r'()Z');

  static final _enable =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean enable()`
  bool enable() {
    return _enable(reference.pointer, _id_enable as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_disable = _class.instanceMethodId(r'disable', r'()Z');

  static final _disable =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean disable()`
  bool disable() {
    return _disable(
      reference.pointer,
      _id_disable as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_getAddress = _class.instanceMethodId(
    r'getAddress',
    r'()Ljava/lang/String;',
  );

  static final _getAddress =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getAddress()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAddress() {
    return _getAddress(
      reference.pointer,
      _id_getAddress as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getName = _class.instanceMethodId(
    r'getName',
    r'()Ljava/lang/String;',
  );

  static final _getName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getName() {
    return _getName(
      reference.pointer,
      _id_getName as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setName = _class.instanceMethodId(
    r'setName',
    r'(Ljava/lang/String;)Z',
  );

  static final _setName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean setName(java.lang.String string)`
  bool setName(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setName(
      reference.pointer,
      _id_setName as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).boolean;
  }

  static final _id_getScanMode = _class.instanceMethodId(
    r'getScanMode',
    r'()I',
  );

  static final _getScanMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getScanMode()`
  int getScanMode() {
    return _getScanMode(
      reference.pointer,
      _id_getScanMode as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getDiscoverableTimeout = _class.instanceMethodId(
    r'getDiscoverableTimeout',
    r'()Ljava/time/Duration;',
  );

  static final _getDiscoverableTimeout =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.time.Duration getDiscoverableTimeout()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDiscoverableTimeout() {
    return _getDiscoverableTimeout(
      reference.pointer,
      _id_getDiscoverableTimeout as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startDiscovery = _class.instanceMethodId(
    r'startDiscovery',
    r'()Z',
  );

  static final _startDiscovery =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean startDiscovery()`
  bool startDiscovery() {
    return _startDiscovery(
      reference.pointer,
      _id_startDiscovery as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_cancelDiscovery = _class.instanceMethodId(
    r'cancelDiscovery',
    r'()Z',
  );

  static final _cancelDiscovery =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean cancelDiscovery()`
  bool cancelDiscovery() {
    return _cancelDiscovery(
      reference.pointer,
      _id_cancelDiscovery as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isDiscovering = _class.instanceMethodId(
    r'isDiscovering',
    r'()Z',
  );

  static final _isDiscovering =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isDiscovering()`
  bool isDiscovering() {
    return _isDiscovering(
      reference.pointer,
      _id_isDiscovering as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isMultipleAdvertisementSupported = _class.instanceMethodId(
    r'isMultipleAdvertisementSupported',
    r'()Z',
  );

  static final _isMultipleAdvertisementSupported =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isMultipleAdvertisementSupported()`
  bool isMultipleAdvertisementSupported() {
    return _isMultipleAdvertisementSupported(
      reference.pointer,
      _id_isMultipleAdvertisementSupported as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isOffloadedFilteringSupported = _class.instanceMethodId(
    r'isOffloadedFilteringSupported',
    r'()Z',
  );

  static final _isOffloadedFilteringSupported =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isOffloadedFilteringSupported()`
  bool isOffloadedFilteringSupported() {
    return _isOffloadedFilteringSupported(
      reference.pointer,
      _id_isOffloadedFilteringSupported as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isOffloadedScanBatchingSupported = _class.instanceMethodId(
    r'isOffloadedScanBatchingSupported',
    r'()Z',
  );

  static final _isOffloadedScanBatchingSupported =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isOffloadedScanBatchingSupported()`
  bool isOffloadedScanBatchingSupported() {
    return _isOffloadedScanBatchingSupported(
      reference.pointer,
      _id_isOffloadedScanBatchingSupported as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isLe2MPhySupported = _class.instanceMethodId(
    r'isLe2MPhySupported',
    r'()Z',
  );

  static final _isLe2MPhySupported =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isLe2MPhySupported()`
  bool isLe2MPhySupported() {
    return _isLe2MPhySupported(
      reference.pointer,
      _id_isLe2MPhySupported as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isLeCodedPhySupported = _class.instanceMethodId(
    r'isLeCodedPhySupported',
    r'()Z',
  );

  static final _isLeCodedPhySupported =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isLeCodedPhySupported()`
  bool isLeCodedPhySupported() {
    return _isLeCodedPhySupported(
      reference.pointer,
      _id_isLeCodedPhySupported as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isLeExtendedAdvertisingSupported = _class.instanceMethodId(
    r'isLeExtendedAdvertisingSupported',
    r'()Z',
  );

  static final _isLeExtendedAdvertisingSupported =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isLeExtendedAdvertisingSupported()`
  bool isLeExtendedAdvertisingSupported() {
    return _isLeExtendedAdvertisingSupported(
      reference.pointer,
      _id_isLeExtendedAdvertisingSupported as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isLePeriodicAdvertisingSupported = _class.instanceMethodId(
    r'isLePeriodicAdvertisingSupported',
    r'()Z',
  );

  static final _isLePeriodicAdvertisingSupported =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isLePeriodicAdvertisingSupported()`
  bool isLePeriodicAdvertisingSupported() {
    return _isLePeriodicAdvertisingSupported(
      reference.pointer,
      _id_isLePeriodicAdvertisingSupported as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isLeAudioSupported = _class.instanceMethodId(
    r'isLeAudioSupported',
    r'()I',
  );

  static final _isLeAudioSupported =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int isLeAudioSupported()`
  int isLeAudioSupported() {
    return _isLeAudioSupported(
      reference.pointer,
      _id_isLeAudioSupported as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_isLeAudioBroadcastSourceSupported = _class.instanceMethodId(
    r'isLeAudioBroadcastSourceSupported',
    r'()I',
  );

  static final _isLeAudioBroadcastSourceSupported =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int isLeAudioBroadcastSourceSupported()`
  int isLeAudioBroadcastSourceSupported() {
    return _isLeAudioBroadcastSourceSupported(
      reference.pointer,
      _id_isLeAudioBroadcastSourceSupported as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_isLeAudioBroadcastAssistantSupported = _class
      .instanceMethodId(r'isLeAudioBroadcastAssistantSupported', r'()I');

  static final _isLeAudioBroadcastAssistantSupported =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int isLeAudioBroadcastAssistantSupported()`
  int isLeAudioBroadcastAssistantSupported() {
    return _isLeAudioBroadcastAssistantSupported(
      reference.pointer,
      _id_isLeAudioBroadcastAssistantSupported as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getLeMaximumAdvertisingDataLength = _class.instanceMethodId(
    r'getLeMaximumAdvertisingDataLength',
    r'()I',
  );

  static final _getLeMaximumAdvertisingDataLength =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getLeMaximumAdvertisingDataLength()`
  int getLeMaximumAdvertisingDataLength() {
    return _getLeMaximumAdvertisingDataLength(
      reference.pointer,
      _id_getLeMaximumAdvertisingDataLength as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getMaxConnectedAudioDevices = _class.instanceMethodId(
    r'getMaxConnectedAudioDevices',
    r'()I',
  );

  static final _getMaxConnectedAudioDevices =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getMaxConnectedAudioDevices()`
  int getMaxConnectedAudioDevices() {
    return _getMaxConnectedAudioDevices(
      reference.pointer,
      _id_getMaxConnectedAudioDevices as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getBondedDevices = _class.instanceMethodId(
    r'getBondedDevices',
    r'()Ljava/util/Set;',
  );

  static final _getBondedDevices =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.Set<android.bluetooth.BluetoothDevice> getBondedDevices()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JSet<BluetoothDevice?>? getBondedDevices() {
    return _getBondedDevices(
      reference.pointer,
      _id_getBondedDevices as jni$_.JMethodIDPtr,
    ).object<jni$_.JSet<BluetoothDevice?>?>(
      const jni$_.JSetNullableType<BluetoothDevice?>(
        $BluetoothDevice$NullableType(),
      ),
    );
  }

  static final _id_getProfileConnectionState = _class.instanceMethodId(
    r'getProfileConnectionState',
    r'(I)I',
  );

  static final _getProfileConnectionState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public int getProfileConnectionState(int i)`
  int getProfileConnectionState(int i) {
    return _getProfileConnectionState(
      reference.pointer,
      _id_getProfileConnectionState as jni$_.JMethodIDPtr,
      i,
    ).integer;
  }

  static final _id_listenUsingRfcommWithServiceRecord = _class.instanceMethodId(
    r'listenUsingRfcommWithServiceRecord',
    r'(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;',
  );

  static final _listenUsingRfcommWithServiceRecord =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String string, java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? listenUsingRfcommWithServiceRecord(
    jni$_.JString? string,
    UUID? uUID,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _listenUsingRfcommWithServiceRecord(
      reference.pointer,
      _id_listenUsingRfcommWithServiceRecord as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$uUID.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_listenUsingInsecureRfcommWithServiceRecord = _class
      .instanceMethodId(
        r'listenUsingInsecureRfcommWithServiceRecord',
        r'(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;',
      );

  static final _listenUsingInsecureRfcommWithServiceRecord =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String string, java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? listenUsingInsecureRfcommWithServiceRecord(
    jni$_.JString? string,
    UUID? uUID,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _listenUsingInsecureRfcommWithServiceRecord(
      reference.pointer,
      _id_listenUsingInsecureRfcommWithServiceRecord as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$uUID.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getProfileProxy = _class.instanceMethodId(
    r'getProfileProxy',
    r'(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;I)Z',
  );

  static final _getProfileProxy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public boolean getProfileProxy(android.content.Context context, android.bluetooth.BluetoothProfile$ServiceListener serviceListener, int i)`
  bool getProfileProxy(
    Context? context,
    BluetoothProfile$ServiceListener? serviceListener,
    int i,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$serviceListener =
        serviceListener?.reference ?? jni$_.jNullReference;
    return _getProfileProxy(
      reference.pointer,
      _id_getProfileProxy as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$serviceListener.pointer,
      i,
    ).boolean;
  }

  static final _id_closeProfileProxy = _class.instanceMethodId(
    r'closeProfileProxy',
    r'(ILandroid/bluetooth/BluetoothProfile;)V',
  );

  static final _closeProfileProxy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void closeProfileProxy(int i, android.bluetooth.BluetoothProfile bluetoothProfile)`
  void closeProfileProxy(int i, BluetoothProfile? bluetoothProfile) {
    final _$bluetoothProfile =
        bluetoothProfile?.reference ?? jni$_.jNullReference;
    _closeProfileProxy(
      reference.pointer,
      _id_closeProfileProxy as jni$_.JMethodIDPtr,
      i,
      _$bluetoothProfile.pointer,
    ).check();
  }

  static final _id_checkBluetoothAddress = _class.staticMethodId(
    r'checkBluetoothAddress',
    r'(Ljava/lang/String;)Z',
  );

  static final _checkBluetoothAddress =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public boolean checkBluetoothAddress(java.lang.String string)`
  static bool checkBluetoothAddress(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkBluetoothAddress(
      _class.reference.pointer,
      _id_checkBluetoothAddress as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).boolean;
  }

  static final _id_startLeScan = _class.instanceMethodId(
    r'startLeScan',
    r'(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z',
  );

  static final _startLeScan =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback leScanCallback)`
  bool startLeScan(BluetoothAdapter$LeScanCallback? leScanCallback) {
    final _$leScanCallback = leScanCallback?.reference ?? jni$_.jNullReference;
    return _startLeScan(
      reference.pointer,
      _id_startLeScan as jni$_.JMethodIDPtr,
      _$leScanCallback.pointer,
    ).boolean;
  }

  static final _id_startLeScan$1 = _class.instanceMethodId(
    r'startLeScan',
    r'([Ljava/util/UUID;Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z',
  );

  static final _startLeScan$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean startLeScan(java.util.UUID[] uUIDs, android.bluetooth.BluetoothAdapter$LeScanCallback leScanCallback)`
  bool startLeScan$1(
    jni$_.JArray<UUID?>? uUIDs,
    BluetoothAdapter$LeScanCallback? leScanCallback,
  ) {
    final _$uUIDs = uUIDs?.reference ?? jni$_.jNullReference;
    final _$leScanCallback = leScanCallback?.reference ?? jni$_.jNullReference;
    return _startLeScan$1(
      reference.pointer,
      _id_startLeScan$1 as jni$_.JMethodIDPtr,
      _$uUIDs.pointer,
      _$leScanCallback.pointer,
    ).boolean;
  }

  static final _id_stopLeScan = _class.instanceMethodId(
    r'stopLeScan',
    r'(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)V',
  );

  static final _stopLeScan =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback leScanCallback)`
  void stopLeScan(BluetoothAdapter$LeScanCallback? leScanCallback) {
    final _$leScanCallback = leScanCallback?.reference ?? jni$_.jNullReference;
    _stopLeScan(
      reference.pointer,
      _id_stopLeScan as jni$_.JMethodIDPtr,
      _$leScanCallback.pointer,
    ).check();
  }

  static final _id_listenUsingL2capChannel = _class.instanceMethodId(
    r'listenUsingL2capChannel',
    r'()Landroid/bluetooth/BluetoothServerSocket;',
  );

  static final _listenUsingL2capChannel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.bluetooth.BluetoothServerSocket listenUsingL2capChannel()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? listenUsingL2capChannel() {
    return _listenUsingL2capChannel(
      reference.pointer,
      _id_listenUsingL2capChannel as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_listenUsingInsecureL2capChannel = _class.instanceMethodId(
    r'listenUsingInsecureL2capChannel',
    r'()Landroid/bluetooth/BluetoothServerSocket;',
  );

  static final _listenUsingInsecureL2capChannel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.bluetooth.BluetoothServerSocket listenUsingInsecureL2capChannel()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? listenUsingInsecureL2capChannel() {
    return _listenUsingInsecureL2capChannel(
      reference.pointer,
      _id_listenUsingInsecureL2capChannel as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $BluetoothAdapter$NullableType
    extends jni$_.JObjType<BluetoothAdapter?> {
  @jni$_.internal
  const $BluetoothAdapter$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothAdapter;';

  @jni$_.internal
  @core$_.override
  BluetoothAdapter? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : BluetoothAdapter.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothAdapter?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothAdapter$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothAdapter$NullableType) &&
        other is $BluetoothAdapter$NullableType;
  }
}

final class $BluetoothAdapter$Type extends jni$_.JObjType<BluetoothAdapter> {
  @jni$_.internal
  const $BluetoothAdapter$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothAdapter;';

  @jni$_.internal
  @core$_.override
  BluetoothAdapter fromReference(jni$_.JReference reference) =>
      BluetoothAdapter.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothAdapter?> get nullableType =>
      const $BluetoothAdapter$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothAdapter$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothAdapter$Type) &&
        other is $BluetoothAdapter$Type;
  }
}

/// from: `android.bluetooth.BluetoothDevice`
class BluetoothDevice extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothDevice> $type;

  @jni$_.internal
  BluetoothDevice.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/BluetoothDevice',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothDevice$NullableType();
  static const type = $BluetoothDevice$Type();
  static final _id_ACTION_ACL_CONNECTED = _class.staticFieldId(
    r'ACTION_ACL_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ACL_CONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ACL_CONNECTED =>
      _id_ACTION_ACL_CONNECTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_ACL_DISCONNECTED = _class.staticFieldId(
    r'ACTION_ACL_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ACL_DISCONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ACL_DISCONNECTED =>
      _id_ACTION_ACL_DISCONNECTED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACTION_ACL_DISCONNECT_REQUESTED = _class.staticFieldId(
    r'ACTION_ACL_DISCONNECT_REQUESTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ACL_DISCONNECT_REQUESTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ACL_DISCONNECT_REQUESTED =>
      _id_ACTION_ACL_DISCONNECT_REQUESTED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACTION_ALIAS_CHANGED = _class.staticFieldId(
    r'ACTION_ALIAS_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ALIAS_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ALIAS_CHANGED =>
      _id_ACTION_ALIAS_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BOND_STATE_CHANGED = _class.staticFieldId(
    r'ACTION_BOND_STATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BOND_STATE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BOND_STATE_CHANGED =>
      _id_ACTION_BOND_STATE_CHANGED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACTION_CLASS_CHANGED = _class.staticFieldId(
    r'ACTION_CLASS_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CLASS_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CLASS_CHANGED =>
      _id_ACTION_CLASS_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_FOUND = _class.staticFieldId(
    r'ACTION_FOUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_FOUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_FOUND =>
      _id_ACTION_FOUND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_NAME_CHANGED = _class.staticFieldId(
    r'ACTION_NAME_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_NAME_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_NAME_CHANGED =>
      _id_ACTION_NAME_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PAIRING_REQUEST = _class.staticFieldId(
    r'ACTION_PAIRING_REQUEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PAIRING_REQUEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PAIRING_REQUEST =>
      _id_ACTION_PAIRING_REQUEST.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_UUID = _class.staticFieldId(
    r'ACTION_UUID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UUID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UUID =>
      _id_ACTION_UUID.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int ADDRESS_TYPE_ANONYMOUS`
  static const ADDRESS_TYPE_ANONYMOUS = 255;

  /// from: `static public final int ADDRESS_TYPE_PUBLIC`
  static const ADDRESS_TYPE_PUBLIC = 0;

  /// from: `static public final int ADDRESS_TYPE_RANDOM`
  static const ADDRESS_TYPE_RANDOM = 1;

  /// from: `static public final int ADDRESS_TYPE_UNKNOWN`
  static const ADDRESS_TYPE_UNKNOWN = 65535;

  /// from: `static public final int BOND_BONDED`
  static const BOND_BONDED = 12;

  /// from: `static public final int BOND_BONDING`
  static const BOND_BONDING = 11;

  /// from: `static public final int BOND_NONE`
  static const BOND_NONE = 10;
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator<android.bluetooth.BluetoothDevice> CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  /// from: `static public final int DEVICE_TYPE_CLASSIC`
  static const DEVICE_TYPE_CLASSIC = 1;

  /// from: `static public final int DEVICE_TYPE_DUAL`
  static const DEVICE_TYPE_DUAL = 3;

  /// from: `static public final int DEVICE_TYPE_LE`
  static const DEVICE_TYPE_LE = 2;

  /// from: `static public final int DEVICE_TYPE_UNKNOWN`
  static const DEVICE_TYPE_UNKNOWN = 0;

  /// from: `static public final int ERROR`
  static const ERROR = -2147483648;
  static final _id_EXTRA_BOND_STATE = _class.staticFieldId(
    r'EXTRA_BOND_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_BOND_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_BOND_STATE =>
      _id_EXTRA_BOND_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CLASS = _class.staticFieldId(
    r'EXTRA_CLASS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CLASS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CLASS =>
      _id_EXTRA_CLASS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DEVICE = _class.staticFieldId(
    r'EXTRA_DEVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DEVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DEVICE =>
      _id_EXTRA_DEVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_IS_COORDINATED_SET_MEMBER = _class.staticFieldId(
    r'EXTRA_IS_COORDINATED_SET_MEMBER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_IS_COORDINATED_SET_MEMBER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_IS_COORDINATED_SET_MEMBER =>
      _id_EXTRA_IS_COORDINATED_SET_MEMBER.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_EXTRA_NAME = _class.staticFieldId(
    r'EXTRA_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_NAME =>
      _id_EXTRA_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PAIRING_KEY = _class.staticFieldId(
    r'EXTRA_PAIRING_KEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PAIRING_KEY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PAIRING_KEY =>
      _id_EXTRA_PAIRING_KEY.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PAIRING_VARIANT = _class.staticFieldId(
    r'EXTRA_PAIRING_VARIANT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PAIRING_VARIANT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PAIRING_VARIANT =>
      _id_EXTRA_PAIRING_VARIANT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PREVIOUS_BOND_STATE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_BOND_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PREVIOUS_BOND_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PREVIOUS_BOND_STATE =>
      _id_EXTRA_PREVIOUS_BOND_STATE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_EXTRA_RSSI = _class.staticFieldId(
    r'EXTRA_RSSI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RSSI`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RSSI =>
      _id_EXTRA_RSSI.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TRANSPORT = _class.staticFieldId(
    r'EXTRA_TRANSPORT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TRANSPORT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TRANSPORT =>
      _id_EXTRA_TRANSPORT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_UUID = _class.staticFieldId(
    r'EXTRA_UUID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_UUID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_UUID =>
      _id_EXTRA_UUID.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int PAIRING_VARIANT_PASSKEY_CONFIRMATION`
  static const PAIRING_VARIANT_PASSKEY_CONFIRMATION = 2;

  /// from: `static public final int PAIRING_VARIANT_PIN`
  static const PAIRING_VARIANT_PIN = 0;

  /// from: `static public final int PHY_LE_1M`
  static const PHY_LE_1M = 1;

  /// from: `static public final int PHY_LE_1M_MASK`
  static const PHY_LE_1M_MASK = 1;

  /// from: `static public final int PHY_LE_2M`
  static const PHY_LE_2M = 2;

  /// from: `static public final int PHY_LE_2M_MASK`
  static const PHY_LE_2M_MASK = 2;

  /// from: `static public final int PHY_LE_CODED`
  static const PHY_LE_CODED = 3;

  /// from: `static public final int PHY_LE_CODED_MASK`
  static const PHY_LE_CODED_MASK = 4;

  /// from: `static public final int PHY_OPTION_NO_PREFERRED`
  static const PHY_OPTION_NO_PREFERRED = 0;

  /// from: `static public final int PHY_OPTION_S2`
  static const PHY_OPTION_S2 = 1;

  /// from: `static public final int PHY_OPTION_S8`
  static const PHY_OPTION_S8 = 2;

  /// from: `static public final int TRANSPORT_AUTO`
  static const TRANSPORT_AUTO = 0;

  /// from: `static public final int TRANSPORT_BREDR`
  static const TRANSPORT_BREDR = 1;

  /// from: `static public final int TRANSPORT_LE`
  static const TRANSPORT_LE = 2;
  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(jni$_.JObject? object) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(
      reference.pointer,
      _id_equals as jni$_.JMethodIDPtr,
      _$object.pointer,
    ).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(r'hashCode', r'()I');

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(
      reference.pointer,
      _id_hashCode$1 as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
      reference.pointer,
      _id_describeContents as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(jni$_.JObject? parcel, int i) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(
      reference.pointer,
      _id_writeToParcel as jni$_.JMethodIDPtr,
      _$parcel.pointer,
      i,
    ).check();
  }

  static final _id_getAddress = _class.instanceMethodId(
    r'getAddress',
    r'()Ljava/lang/String;',
  );

  static final _getAddress =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getAddress()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAddress() {
    return _getAddress(
      reference.pointer,
      _id_getAddress as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAddressType = _class.instanceMethodId(
    r'getAddressType',
    r'()I',
  );

  static final _getAddressType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getAddressType()`
  int getAddressType() {
    return _getAddressType(
      reference.pointer,
      _id_getAddressType as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getName = _class.instanceMethodId(
    r'getName',
    r'()Ljava/lang/String;',
  );

  static final _getName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getName() {
    return _getName(
      reference.pointer,
      _id_getName as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getType = _class.instanceMethodId(r'getType', r'()I');

  static final _getType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getType()`
  int getType() {
    return _getType(
      reference.pointer,
      _id_getType as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getAlias = _class.instanceMethodId(
    r'getAlias',
    r'()Ljava/lang/String;',
  );

  static final _getAlias =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getAlias()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAlias() {
    return _getAlias(
      reference.pointer,
      _id_getAlias as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setAlias = _class.instanceMethodId(
    r'setAlias',
    r'(Ljava/lang/String;)I',
  );

  static final _setAlias =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public int setAlias(java.lang.String string)`
  int setAlias(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setAlias(
      reference.pointer,
      _id_setAlias as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).integer;
  }

  static final _id_createBond = _class.instanceMethodId(r'createBond', r'()Z');

  static final _createBond =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean createBond()`
  bool createBond() {
    return _createBond(
      reference.pointer,
      _id_createBond as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_getBondState = _class.instanceMethodId(
    r'getBondState',
    r'()I',
  );

  static final _getBondState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getBondState()`
  int getBondState() {
    return _getBondState(
      reference.pointer,
      _id_getBondState as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getBluetoothClass = _class.instanceMethodId(
    r'getBluetoothClass',
    r'()Landroid/bluetooth/BluetoothClass;',
  );

  static final _getBluetoothClass =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.bluetooth.BluetoothClass getBluetoothClass()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getBluetoothClass() {
    return _getBluetoothClass(
      reference.pointer,
      _id_getBluetoothClass as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getUuids = _class.instanceMethodId(
    r'getUuids',
    r'()[Landroid/os/ParcelUuid;',
  );

  static final _getUuids =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.ParcelUuid[] getUuids()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getUuids() {
    return _getUuids(
      reference.pointer,
      _id_getUuids as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(
        jni$_.JObjectNullableType(),
      ),
    );
  }

  static final _id_fetchUuidsWithSdp = _class.instanceMethodId(
    r'fetchUuidsWithSdp',
    r'()Z',
  );

  static final _fetchUuidsWithSdp =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean fetchUuidsWithSdp()`
  bool fetchUuidsWithSdp() {
    return _fetchUuidsWithSdp(
      reference.pointer,
      _id_fetchUuidsWithSdp as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_setPin = _class.instanceMethodId(r'setPin', r'([B)Z');

  static final _setPin =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean setPin(byte[] bs)`
  bool setPin(jni$_.JByteArray? bs) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _setPin(
      reference.pointer,
      _id_setPin as jni$_.JMethodIDPtr,
      _$bs.pointer,
    ).boolean;
  }

  static final _id_setPairingConfirmation = _class.instanceMethodId(
    r'setPairingConfirmation',
    r'(Z)Z',
  );

  static final _setPairingConfirmation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public boolean setPairingConfirmation(boolean z)`
  bool setPairingConfirmation(bool z) {
    return _setPairingConfirmation(
      reference.pointer,
      _id_setPairingConfirmation as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).boolean;
  }

  static final _id_createRfcommSocketToServiceRecord = _class.instanceMethodId(
    r'createRfcommSocketToServiceRecord',
    r'(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;',
  );

  static final _createRfcommSocketToServiceRecord =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? createRfcommSocketToServiceRecord(UUID? uUID) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _createRfcommSocketToServiceRecord(
      reference.pointer,
      _id_createRfcommSocketToServiceRecord as jni$_.JMethodIDPtr,
      _$uUID.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_createInsecureRfcommSocketToServiceRecord = _class
      .instanceMethodId(
        r'createInsecureRfcommSocketToServiceRecord',
        r'(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;',
      );

  static final _createInsecureRfcommSocketToServiceRecord =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? createInsecureRfcommSocketToServiceRecord(UUID? uUID) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _createInsecureRfcommSocketToServiceRecord(
      reference.pointer,
      _id_createInsecureRfcommSocketToServiceRecord as jni$_.JMethodIDPtr,
      _$uUID.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_connectGatt = _class.instanceMethodId(
    r'connectGatt',
    r'(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;)Landroid/bluetooth/BluetoothGatt;',
  );

  static final _connectGatt =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.BluetoothGatt connectGatt(android.content.Context context, boolean z, android.bluetooth.BluetoothGattCallback bluetoothGattCallback)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothGatt? connectGatt(
    Context? context,
    bool z,
    jni$_.JObject? bluetoothGattCallback,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattCallback =
        bluetoothGattCallback?.reference ?? jni$_.jNullReference;
    return _connectGatt(
      reference.pointer,
      _id_connectGatt as jni$_.JMethodIDPtr,
      _$context.pointer,
      z ? 1 : 0,
      _$bluetoothGattCallback.pointer,
    ).object<BluetoothGatt?>(const $BluetoothGatt$NullableType());
  }

  static final _id_connectGatt$1 = _class.instanceMethodId(
    r'connectGatt',
    r'(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;I)Landroid/bluetooth/BluetoothGatt;',
  );

  static final _connectGatt$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public android.bluetooth.BluetoothGatt connectGatt(android.content.Context context, boolean z, android.bluetooth.BluetoothGattCallback bluetoothGattCallback, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothGatt? connectGatt$1(
    Context? context,
    bool z,
    jni$_.JObject? bluetoothGattCallback,
    int i,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattCallback =
        bluetoothGattCallback?.reference ?? jni$_.jNullReference;
    return _connectGatt$1(
      reference.pointer,
      _id_connectGatt$1 as jni$_.JMethodIDPtr,
      _$context.pointer,
      z ? 1 : 0,
      _$bluetoothGattCallback.pointer,
      i,
    ).object<BluetoothGatt?>(const $BluetoothGatt$NullableType());
  }

  static final _id_connectGatt$2 = _class.instanceMethodId(
    r'connectGatt',
    r'(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;II)Landroid/bluetooth/BluetoothGatt;',
  );

  static final _connectGatt$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public android.bluetooth.BluetoothGatt connectGatt(android.content.Context context, boolean z, android.bluetooth.BluetoothGattCallback bluetoothGattCallback, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothGatt? connectGatt$2(
    Context? context,
    bool z,
    jni$_.JObject? bluetoothGattCallback,
    int i,
    int i1,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattCallback =
        bluetoothGattCallback?.reference ?? jni$_.jNullReference;
    return _connectGatt$2(
      reference.pointer,
      _id_connectGatt$2 as jni$_.JMethodIDPtr,
      _$context.pointer,
      z ? 1 : 0,
      _$bluetoothGattCallback.pointer,
      i,
      i1,
    ).object<BluetoothGatt?>(const $BluetoothGatt$NullableType());
  }

  static final _id_connectGatt$3 = _class.instanceMethodId(
    r'connectGatt',
    r'(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;IILandroid/os/Handler;)Landroid/bluetooth/BluetoothGatt;',
  );

  static final _connectGatt$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.BluetoothGatt connectGatt(android.content.Context context, boolean z, android.bluetooth.BluetoothGattCallback bluetoothGattCallback, int i, int i1, android.os.Handler handler)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothGatt? connectGatt$3(
    Context? context,
    bool z,
    jni$_.JObject? bluetoothGattCallback,
    int i,
    int i1,
    jni$_.JObject? handler,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattCallback =
        bluetoothGattCallback?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _connectGatt$3(
      reference.pointer,
      _id_connectGatt$3 as jni$_.JMethodIDPtr,
      _$context.pointer,
      z ? 1 : 0,
      _$bluetoothGattCallback.pointer,
      i,
      i1,
      _$handler.pointer,
    ).object<BluetoothGatt?>(const $BluetoothGatt$NullableType());
  }

  static final _id_createL2capChannel = _class.instanceMethodId(
    r'createL2capChannel',
    r'(I)Landroid/bluetooth/BluetoothSocket;',
  );

  static final _createL2capChannel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.bluetooth.BluetoothSocket createL2capChannel(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? createL2capChannel(int i) {
    return _createL2capChannel(
      reference.pointer,
      _id_createL2capChannel as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_createInsecureL2capChannel = _class.instanceMethodId(
    r'createInsecureL2capChannel',
    r'(I)Landroid/bluetooth/BluetoothSocket;',
  );

  static final _createInsecureL2capChannel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.bluetooth.BluetoothSocket createInsecureL2capChannel(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? createInsecureL2capChannel(int i) {
    return _createInsecureL2capChannel(
      reference.pointer,
      _id_createInsecureL2capChannel as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $BluetoothDevice$NullableType
    extends jni$_.JObjType<BluetoothDevice?> {
  @jni$_.internal
  const $BluetoothDevice$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothDevice;';

  @jni$_.internal
  @core$_.override
  BluetoothDevice? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : BluetoothDevice.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothDevice?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothDevice$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothDevice$NullableType) &&
        other is $BluetoothDevice$NullableType;
  }
}

final class $BluetoothDevice$Type extends jni$_.JObjType<BluetoothDevice> {
  @jni$_.internal
  const $BluetoothDevice$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothDevice;';

  @jni$_.internal
  @core$_.override
  BluetoothDevice fromReference(jni$_.JReference reference) =>
      BluetoothDevice.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothDevice?> get nullableType =>
      const $BluetoothDevice$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothDevice$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothDevice$Type) &&
        other is $BluetoothDevice$Type;
  }
}

/// from: `android.bluetooth.BluetoothGatt`
class BluetoothGatt extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothGatt> $type;

  @jni$_.internal
  BluetoothGatt.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/BluetoothGatt',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothGatt$NullableType();
  static const type = $BluetoothGatt$Type();

  /// from: `static public final int CONNECTION_PRIORITY_BALANCED`
  static const CONNECTION_PRIORITY_BALANCED = 0;

  /// from: `static public final int CONNECTION_PRIORITY_DCK`
  static const CONNECTION_PRIORITY_DCK = 3;

  /// from: `static public final int CONNECTION_PRIORITY_HIGH`
  static const CONNECTION_PRIORITY_HIGH = 1;

  /// from: `static public final int CONNECTION_PRIORITY_LOW_POWER`
  static const CONNECTION_PRIORITY_LOW_POWER = 2;

  /// from: `static public final int GATT_CONNECTION_CONGESTED`
  static const GATT_CONNECTION_CONGESTED = 143;

  /// from: `static public final int GATT_CONNECTION_TIMEOUT`
  static const GATT_CONNECTION_TIMEOUT = 147;

  /// from: `static public final int GATT_FAILURE`
  static const GATT_FAILURE = 257;

  /// from: `static public final int GATT_INSUFFICIENT_AUTHENTICATION`
  static const GATT_INSUFFICIENT_AUTHENTICATION = 5;

  /// from: `static public final int GATT_INSUFFICIENT_AUTHORIZATION`
  static const GATT_INSUFFICIENT_AUTHORIZATION = 8;

  /// from: `static public final int GATT_INSUFFICIENT_ENCRYPTION`
  static const GATT_INSUFFICIENT_ENCRYPTION = 15;

  /// from: `static public final int GATT_INVALID_ATTRIBUTE_LENGTH`
  static const GATT_INVALID_ATTRIBUTE_LENGTH = 13;

  /// from: `static public final int GATT_INVALID_OFFSET`
  static const GATT_INVALID_OFFSET = 7;

  /// from: `static public final int GATT_READ_NOT_PERMITTED`
  static const GATT_READ_NOT_PERMITTED = 2;

  /// from: `static public final int GATT_REQUEST_NOT_SUPPORTED`
  static const GATT_REQUEST_NOT_SUPPORTED = 6;

  /// from: `static public final int GATT_SUCCESS`
  static const GATT_SUCCESS = 0;

  /// from: `static public final int GATT_WRITE_NOT_PERMITTED`
  static const GATT_WRITE_NOT_PERMITTED = 3;
  static final _id_close = _class.instanceMethodId(r'close', r'()V');

  static final _close =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void close()`
  void close() {
    _close(reference.pointer, _id_close as jni$_.JMethodIDPtr).check();
  }

  static final _id_disconnect = _class.instanceMethodId(r'disconnect', r'()V');

  static final _disconnect =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void disconnect()`
  void disconnect() {
    _disconnect(
      reference.pointer,
      _id_disconnect as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_connect = _class.instanceMethodId(r'connect', r'()Z');

  static final _connect =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean connect()`
  bool connect() {
    return _connect(
      reference.pointer,
      _id_connect as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_setPreferredPhy = _class.instanceMethodId(
    r'setPreferredPhy',
    r'(III)V',
  );

  static final _setPreferredPhy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
            )
          >();

  /// from: `public void setPreferredPhy(int i, int i1, int i2)`
  void setPreferredPhy(int i, int i1, int i2) {
    _setPreferredPhy(
      reference.pointer,
      _id_setPreferredPhy as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_readPhy = _class.instanceMethodId(r'readPhy', r'()V');

  static final _readPhy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void readPhy()`
  void readPhy() {
    _readPhy(reference.pointer, _id_readPhy as jni$_.JMethodIDPtr).check();
  }

  static final _id_getDevice = _class.instanceMethodId(
    r'getDevice',
    r'()Landroid/bluetooth/BluetoothDevice;',
  );

  static final _getDevice =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.bluetooth.BluetoothDevice getDevice()`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothDevice? getDevice() {
    return _getDevice(
      reference.pointer,
      _id_getDevice as jni$_.JMethodIDPtr,
    ).object<BluetoothDevice?>(const $BluetoothDevice$NullableType());
  }

  static final _id_discoverServices = _class.instanceMethodId(
    r'discoverServices',
    r'()Z',
  );

  static final _discoverServices =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean discoverServices()`
  bool discoverServices() {
    return _discoverServices(
      reference.pointer,
      _id_discoverServices as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_getServices = _class.instanceMethodId(
    r'getServices',
    r'()Ljava/util/List;',
  );

  static final _getServices =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.List<android.bluetooth.BluetoothGattService> getServices()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<BluetoothGattService?>? getServices() {
    return _getServices(
      reference.pointer,
      _id_getServices as jni$_.JMethodIDPtr,
    ).object<jni$_.JList<BluetoothGattService?>?>(
      const jni$_.JListNullableType<BluetoothGattService?>(
        $BluetoothGattService$NullableType(),
      ),
    );
  }

  static final _id_getService = _class.instanceMethodId(
    r'getService',
    r'(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattService;',
  );

  static final _getService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.BluetoothGattService getService(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothGattService? getService(UUID? uUID) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _getService(
      reference.pointer,
      _id_getService as jni$_.JMethodIDPtr,
      _$uUID.pointer,
    ).object<BluetoothGattService?>(const $BluetoothGattService$NullableType());
  }

  static final _id_readCharacteristic = _class.instanceMethodId(
    r'readCharacteristic',
    r'(Landroid/bluetooth/BluetoothGattCharacteristic;)Z',
  );

  static final _readCharacteristic =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic)`
  bool readCharacteristic(
    BluetoothGattCharacteristic? bluetoothGattCharacteristic,
  ) {
    final _$bluetoothGattCharacteristic =
        bluetoothGattCharacteristic?.reference ?? jni$_.jNullReference;
    return _readCharacteristic(
      reference.pointer,
      _id_readCharacteristic as jni$_.JMethodIDPtr,
      _$bluetoothGattCharacteristic.pointer,
    ).boolean;
  }

  static final _id_writeCharacteristic = _class.instanceMethodId(
    r'writeCharacteristic',
    r'(Landroid/bluetooth/BluetoothGattCharacteristic;)Z',
  );

  static final _writeCharacteristic =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic)`
  bool writeCharacteristic(
    BluetoothGattCharacteristic? bluetoothGattCharacteristic,
  ) {
    final _$bluetoothGattCharacteristic =
        bluetoothGattCharacteristic?.reference ?? jni$_.jNullReference;
    return _writeCharacteristic(
      reference.pointer,
      _id_writeCharacteristic as jni$_.JMethodIDPtr,
      _$bluetoothGattCharacteristic.pointer,
    ).boolean;
  }

  static final _id_writeCharacteristic$1 = _class.instanceMethodId(
    r'writeCharacteristic',
    r'(Landroid/bluetooth/BluetoothGattCharacteristic;[BI)I',
  );

  static final _writeCharacteristic$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public int writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic, byte[] bs, int i)`
  int writeCharacteristic$1(
    BluetoothGattCharacteristic? bluetoothGattCharacteristic,
    jni$_.JByteArray? bs,
    int i,
  ) {
    final _$bluetoothGattCharacteristic =
        bluetoothGattCharacteristic?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _writeCharacteristic$1(
      reference.pointer,
      _id_writeCharacteristic$1 as jni$_.JMethodIDPtr,
      _$bluetoothGattCharacteristic.pointer,
      _$bs.pointer,
      i,
    ).integer;
  }

  static final _id_readDescriptor = _class.instanceMethodId(
    r'readDescriptor',
    r'(Landroid/bluetooth/BluetoothGattDescriptor;)Z',
  );

  static final _readDescriptor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor bluetoothGattDescriptor)`
  bool readDescriptor(BluetoothGattDescriptor? bluetoothGattDescriptor) {
    final _$bluetoothGattDescriptor =
        bluetoothGattDescriptor?.reference ?? jni$_.jNullReference;
    return _readDescriptor(
      reference.pointer,
      _id_readDescriptor as jni$_.JMethodIDPtr,
      _$bluetoothGattDescriptor.pointer,
    ).boolean;
  }

  static final _id_writeDescriptor = _class.instanceMethodId(
    r'writeDescriptor',
    r'(Landroid/bluetooth/BluetoothGattDescriptor;)Z',
  );

  static final _writeDescriptor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor bluetoothGattDescriptor)`
  bool writeDescriptor(BluetoothGattDescriptor? bluetoothGattDescriptor) {
    final _$bluetoothGattDescriptor =
        bluetoothGattDescriptor?.reference ?? jni$_.jNullReference;
    return _writeDescriptor(
      reference.pointer,
      _id_writeDescriptor as jni$_.JMethodIDPtr,
      _$bluetoothGattDescriptor.pointer,
    ).boolean;
  }

  static final _id_writeDescriptor$1 = _class.instanceMethodId(
    r'writeDescriptor',
    r'(Landroid/bluetooth/BluetoothGattDescriptor;[B)I',
  );

  static final _writeDescriptor$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public int writeDescriptor(android.bluetooth.BluetoothGattDescriptor bluetoothGattDescriptor, byte[] bs)`
  int writeDescriptor$1(
    BluetoothGattDescriptor? bluetoothGattDescriptor,
    jni$_.JByteArray? bs,
  ) {
    final _$bluetoothGattDescriptor =
        bluetoothGattDescriptor?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _writeDescriptor$1(
      reference.pointer,
      _id_writeDescriptor$1 as jni$_.JMethodIDPtr,
      _$bluetoothGattDescriptor.pointer,
      _$bs.pointer,
    ).integer;
  }

  static final _id_beginReliableWrite = _class.instanceMethodId(
    r'beginReliableWrite',
    r'()Z',
  );

  static final _beginReliableWrite =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean beginReliableWrite()`
  bool beginReliableWrite() {
    return _beginReliableWrite(
      reference.pointer,
      _id_beginReliableWrite as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_executeReliableWrite = _class.instanceMethodId(
    r'executeReliableWrite',
    r'()Z',
  );

  static final _executeReliableWrite =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean executeReliableWrite()`
  bool executeReliableWrite() {
    return _executeReliableWrite(
      reference.pointer,
      _id_executeReliableWrite as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_abortReliableWrite = _class.instanceMethodId(
    r'abortReliableWrite',
    r'()V',
  );

  static final _abortReliableWrite =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void abortReliableWrite()`
  void abortReliableWrite() {
    _abortReliableWrite(
      reference.pointer,
      _id_abortReliableWrite as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_abortReliableWrite$1 = _class.instanceMethodId(
    r'abortReliableWrite',
    r'(Landroid/bluetooth/BluetoothDevice;)V',
  );

  static final _abortReliableWrite$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void abortReliableWrite(android.bluetooth.BluetoothDevice bluetoothDevice)`
  void abortReliableWrite$1(BluetoothDevice? bluetoothDevice) {
    final _$bluetoothDevice =
        bluetoothDevice?.reference ?? jni$_.jNullReference;
    _abortReliableWrite$1(
      reference.pointer,
      _id_abortReliableWrite$1 as jni$_.JMethodIDPtr,
      _$bluetoothDevice.pointer,
    ).check();
  }

  static final _id_setCharacteristicNotification = _class.instanceMethodId(
    r'setCharacteristicNotification',
    r'(Landroid/bluetooth/BluetoothGattCharacteristic;Z)Z',
  );

  static final _setCharacteristicNotification =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic, boolean z)`
  bool setCharacteristicNotification(
    BluetoothGattCharacteristic? bluetoothGattCharacteristic,
    bool z,
  ) {
    final _$bluetoothGattCharacteristic =
        bluetoothGattCharacteristic?.reference ?? jni$_.jNullReference;
    return _setCharacteristicNotification(
      reference.pointer,
      _id_setCharacteristicNotification as jni$_.JMethodIDPtr,
      _$bluetoothGattCharacteristic.pointer,
      z ? 1 : 0,
    ).boolean;
  }

  static final _id_readRemoteRssi = _class.instanceMethodId(
    r'readRemoteRssi',
    r'()Z',
  );

  static final _readRemoteRssi =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean readRemoteRssi()`
  bool readRemoteRssi() {
    return _readRemoteRssi(
      reference.pointer,
      _id_readRemoteRssi as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_requestMtu = _class.instanceMethodId(r'requestMtu', r'(I)Z');

  static final _requestMtu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public boolean requestMtu(int i)`
  bool requestMtu(int i) {
    return _requestMtu(
      reference.pointer,
      _id_requestMtu as jni$_.JMethodIDPtr,
      i,
    ).boolean;
  }

  static final _id_requestConnectionPriority = _class.instanceMethodId(
    r'requestConnectionPriority',
    r'(I)Z',
  );

  static final _requestConnectionPriority =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public boolean requestConnectionPriority(int i)`
  bool requestConnectionPriority(int i) {
    return _requestConnectionPriority(
      reference.pointer,
      _id_requestConnectionPriority as jni$_.JMethodIDPtr,
      i,
    ).boolean;
  }

  static final _id_getConnectionState = _class.instanceMethodId(
    r'getConnectionState',
    r'(Landroid/bluetooth/BluetoothDevice;)I',
  );

  static final _getConnectionState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public int getConnectionState(android.bluetooth.BluetoothDevice bluetoothDevice)`
  int getConnectionState(BluetoothDevice? bluetoothDevice) {
    final _$bluetoothDevice =
        bluetoothDevice?.reference ?? jni$_.jNullReference;
    return _getConnectionState(
      reference.pointer,
      _id_getConnectionState as jni$_.JMethodIDPtr,
      _$bluetoothDevice.pointer,
    ).integer;
  }

  static final _id_getConnectedDevices = _class.instanceMethodId(
    r'getConnectedDevices',
    r'()Ljava/util/List;',
  );

  static final _getConnectedDevices =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<BluetoothDevice?>? getConnectedDevices() {
    return _getConnectedDevices(
      reference.pointer,
      _id_getConnectedDevices as jni$_.JMethodIDPtr,
    ).object<jni$_.JList<BluetoothDevice?>?>(
      const jni$_.JListNullableType<BluetoothDevice?>(
        $BluetoothDevice$NullableType(),
      ),
    );
  }

  static final _id_getDevicesMatchingConnectionStates = _class.instanceMethodId(
    r'getDevicesMatchingConnectionStates',
    r'([I)Ljava/util/List;',
  );

  static final _getDevicesMatchingConnectionStates =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<BluetoothDevice?>? getDevicesMatchingConnectionStates(
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _getDevicesMatchingConnectionStates(
      reference.pointer,
      _id_getDevicesMatchingConnectionStates as jni$_.JMethodIDPtr,
      _$is$.pointer,
    ).object<jni$_.JList<BluetoothDevice?>?>(
      const jni$_.JListNullableType<BluetoothDevice?>(
        $BluetoothDevice$NullableType(),
      ),
    );
  }
}

final class $BluetoothGatt$NullableType extends jni$_.JObjType<BluetoothGatt?> {
  @jni$_.internal
  const $BluetoothGatt$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothGatt;';

  @jni$_.internal
  @core$_.override
  BluetoothGatt? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : BluetoothGatt.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothGatt?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothGatt$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothGatt$NullableType) &&
        other is $BluetoothGatt$NullableType;
  }
}

final class $BluetoothGatt$Type extends jni$_.JObjType<BluetoothGatt> {
  @jni$_.internal
  const $BluetoothGatt$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothGatt;';

  @jni$_.internal
  @core$_.override
  BluetoothGatt fromReference(jni$_.JReference reference) =>
      BluetoothGatt.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothGatt?> get nullableType =>
      const $BluetoothGatt$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothGatt$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothGatt$Type) &&
        other is $BluetoothGatt$Type;
  }
}

/// from: `android.bluetooth.BluetoothGattService`
class BluetoothGattService extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothGattService> $type;

  @jni$_.internal
  BluetoothGattService.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/BluetoothGattService',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothGattService$NullableType();
  static const type = $BluetoothGattService$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator<android.bluetooth.BluetoothGattService> CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  /// from: `static public final int SERVICE_TYPE_PRIMARY`
  static const SERVICE_TYPE_PRIMARY = 0;

  /// from: `static public final int SERVICE_TYPE_SECONDARY`
  static const SERVICE_TYPE_SECONDARY = 1;
  static final _id_new$ = _class.constructorId(r'(Ljava/util/UUID;I)V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void <init>(java.util.UUID uUID, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory BluetoothGattService(UUID? uUID, int i) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return BluetoothGattService.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$uUID.pointer,
        i,
      ).reference,
    );
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
      reference.pointer,
      _id_describeContents as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(jni$_.JObject? parcel, int i) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(
      reference.pointer,
      _id_writeToParcel as jni$_.JMethodIDPtr,
      _$parcel.pointer,
      i,
    ).check();
  }

  static final _id_addService = _class.instanceMethodId(
    r'addService',
    r'(Landroid/bluetooth/BluetoothGattService;)Z',
  );

  static final _addService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean addService(android.bluetooth.BluetoothGattService bluetoothGattService)`
  bool addService(BluetoothGattService? bluetoothGattService) {
    final _$bluetoothGattService =
        bluetoothGattService?.reference ?? jni$_.jNullReference;
    return _addService(
      reference.pointer,
      _id_addService as jni$_.JMethodIDPtr,
      _$bluetoothGattService.pointer,
    ).boolean;
  }

  static final _id_addCharacteristic = _class.instanceMethodId(
    r'addCharacteristic',
    r'(Landroid/bluetooth/BluetoothGattCharacteristic;)Z',
  );

  static final _addCharacteristic =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean addCharacteristic(android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic)`
  bool addCharacteristic(
    BluetoothGattCharacteristic? bluetoothGattCharacteristic,
  ) {
    final _$bluetoothGattCharacteristic =
        bluetoothGattCharacteristic?.reference ?? jni$_.jNullReference;
    return _addCharacteristic(
      reference.pointer,
      _id_addCharacteristic as jni$_.JMethodIDPtr,
      _$bluetoothGattCharacteristic.pointer,
    ).boolean;
  }

  static final _id_getUuid = _class.instanceMethodId(
    r'getUuid',
    r'()Ljava/util/UUID;',
  );

  static final _getUuid =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.UUID getUuid()`
  /// The returned object must be released after use, by calling the [release] method.
  UUID? getUuid() {
    return _getUuid(
      reference.pointer,
      _id_getUuid as jni$_.JMethodIDPtr,
    ).object<UUID?>(const $UUID$NullableType());
  }

  static final _id_getInstanceId = _class.instanceMethodId(
    r'getInstanceId',
    r'()I',
  );

  static final _getInstanceId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getInstanceId()`
  int getInstanceId() {
    return _getInstanceId(
      reference.pointer,
      _id_getInstanceId as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getType = _class.instanceMethodId(r'getType', r'()I');

  static final _getType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getType()`
  int getType() {
    return _getType(
      reference.pointer,
      _id_getType as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getIncludedServices = _class.instanceMethodId(
    r'getIncludedServices',
    r'()Ljava/util/List;',
  );

  static final _getIncludedServices =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.List<android.bluetooth.BluetoothGattService> getIncludedServices()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<BluetoothGattService?>? getIncludedServices() {
    return _getIncludedServices(
      reference.pointer,
      _id_getIncludedServices as jni$_.JMethodIDPtr,
    ).object<jni$_.JList<BluetoothGattService?>?>(
      const jni$_.JListNullableType<BluetoothGattService?>(
        $BluetoothGattService$NullableType(),
      ),
    );
  }

  static final _id_getCharacteristics = _class.instanceMethodId(
    r'getCharacteristics',
    r'()Ljava/util/List;',
  );

  static final _getCharacteristics =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.List<android.bluetooth.BluetoothGattCharacteristic> getCharacteristics()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<BluetoothGattCharacteristic?>? getCharacteristics() {
    return _getCharacteristics(
      reference.pointer,
      _id_getCharacteristics as jni$_.JMethodIDPtr,
    ).object<jni$_.JList<BluetoothGattCharacteristic?>?>(
      const jni$_.JListNullableType<BluetoothGattCharacteristic?>(
        $BluetoothGattCharacteristic$NullableType(),
      ),
    );
  }

  static final _id_getCharacteristic = _class.instanceMethodId(
    r'getCharacteristic',
    r'(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattCharacteristic;',
  );

  static final _getCharacteristic =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.BluetoothGattCharacteristic getCharacteristic(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothGattCharacteristic? getCharacteristic(UUID? uUID) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _getCharacteristic(
      reference.pointer,
      _id_getCharacteristic as jni$_.JMethodIDPtr,
      _$uUID.pointer,
    ).object<BluetoothGattCharacteristic?>(
      const $BluetoothGattCharacteristic$NullableType(),
    );
  }
}

final class $BluetoothGattService$NullableType
    extends jni$_.JObjType<BluetoothGattService?> {
  @jni$_.internal
  const $BluetoothGattService$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothGattService;';

  @jni$_.internal
  @core$_.override
  BluetoothGattService? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : BluetoothGattService.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothGattService?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothGattService$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothGattService$NullableType) &&
        other is $BluetoothGattService$NullableType;
  }
}

final class $BluetoothGattService$Type
    extends jni$_.JObjType<BluetoothGattService> {
  @jni$_.internal
  const $BluetoothGattService$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothGattService;';

  @jni$_.internal
  @core$_.override
  BluetoothGattService fromReference(jni$_.JReference reference) =>
      BluetoothGattService.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothGattService?> get nullableType =>
      const $BluetoothGattService$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothGattService$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothGattService$Type) &&
        other is $BluetoothGattService$Type;
  }
}

/// from: `android.bluetooth.BluetoothGattDescriptor`
class BluetoothGattDescriptor extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothGattDescriptor> $type;

  @jni$_.internal
  BluetoothGattDescriptor.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/BluetoothGattDescriptor',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothGattDescriptor$NullableType();
  static const type = $BluetoothGattDescriptor$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator<android.bluetooth.BluetoothGattDescriptor> CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_DISABLE_NOTIFICATION_VALUE = _class.staticFieldId(
    r'DISABLE_NOTIFICATION_VALUE',
    r'[B',
  );

  /// from: `static public final byte[] DISABLE_NOTIFICATION_VALUE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JByteArray? get DISABLE_NOTIFICATION_VALUE =>
      _id_DISABLE_NOTIFICATION_VALUE.get(
        _class,
        const jni$_.JByteArrayNullableType(),
      );

  static final _id_ENABLE_INDICATION_VALUE = _class.staticFieldId(
    r'ENABLE_INDICATION_VALUE',
    r'[B',
  );

  /// from: `static public final byte[] ENABLE_INDICATION_VALUE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JByteArray? get ENABLE_INDICATION_VALUE =>
      _id_ENABLE_INDICATION_VALUE.get(
        _class,
        const jni$_.JByteArrayNullableType(),
      );

  static final _id_ENABLE_NOTIFICATION_VALUE = _class.staticFieldId(
    r'ENABLE_NOTIFICATION_VALUE',
    r'[B',
  );

  /// from: `static public final byte[] ENABLE_NOTIFICATION_VALUE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JByteArray? get ENABLE_NOTIFICATION_VALUE =>
      _id_ENABLE_NOTIFICATION_VALUE.get(
        _class,
        const jni$_.JByteArrayNullableType(),
      );

  /// from: `static public final int PERMISSION_READ`
  static const PERMISSION_READ = 1;

  /// from: `static public final int PERMISSION_READ_ENCRYPTED`
  static const PERMISSION_READ_ENCRYPTED = 2;

  /// from: `static public final int PERMISSION_READ_ENCRYPTED_MITM`
  static const PERMISSION_READ_ENCRYPTED_MITM = 4;

  /// from: `static public final int PERMISSION_WRITE`
  static const PERMISSION_WRITE = 16;

  /// from: `static public final int PERMISSION_WRITE_ENCRYPTED`
  static const PERMISSION_WRITE_ENCRYPTED = 32;

  /// from: `static public final int PERMISSION_WRITE_ENCRYPTED_MITM`
  static const PERMISSION_WRITE_ENCRYPTED_MITM = 64;

  /// from: `static public final int PERMISSION_WRITE_SIGNED`
  static const PERMISSION_WRITE_SIGNED = 128;

  /// from: `static public final int PERMISSION_WRITE_SIGNED_MITM`
  static const PERMISSION_WRITE_SIGNED_MITM = 256;
  static final _id_new$ = _class.constructorId(r'(Ljava/util/UUID;I)V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void <init>(java.util.UUID uUID, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory BluetoothGattDescriptor(UUID? uUID, int i) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return BluetoothGattDescriptor.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$uUID.pointer,
        i,
      ).reference,
    );
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
      reference.pointer,
      _id_describeContents as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(jni$_.JObject? parcel, int i) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(
      reference.pointer,
      _id_writeToParcel as jni$_.JMethodIDPtr,
      _$parcel.pointer,
      i,
    ).check();
  }

  static final _id_getCharacteristic = _class.instanceMethodId(
    r'getCharacteristic',
    r'()Landroid/bluetooth/BluetoothGattCharacteristic;',
  );

  static final _getCharacteristic =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.bluetooth.BluetoothGattCharacteristic getCharacteristic()`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothGattCharacteristic? getCharacteristic() {
    return _getCharacteristic(
      reference.pointer,
      _id_getCharacteristic as jni$_.JMethodIDPtr,
    ).object<BluetoothGattCharacteristic?>(
      const $BluetoothGattCharacteristic$NullableType(),
    );
  }

  static final _id_getUuid = _class.instanceMethodId(
    r'getUuid',
    r'()Ljava/util/UUID;',
  );

  static final _getUuid =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.UUID getUuid()`
  /// The returned object must be released after use, by calling the [release] method.
  UUID? getUuid() {
    return _getUuid(
      reference.pointer,
      _id_getUuid as jni$_.JMethodIDPtr,
    ).object<UUID?>(const $UUID$NullableType());
  }

  static final _id_getPermissions = _class.instanceMethodId(
    r'getPermissions',
    r'()I',
  );

  static final _getPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getPermissions()`
  int getPermissions() {
    return _getPermissions(
      reference.pointer,
      _id_getPermissions as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getValue = _class.instanceMethodId(r'getValue', r'()[B');

  static final _getValue =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public byte[] getValue()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getValue() {
    return _getValue(
      reference.pointer,
      _id_getValue as jni$_.JMethodIDPtr,
    ).object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_setValue = _class.instanceMethodId(r'setValue', r'([B)Z');

  static final _setValue =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean setValue(byte[] bs)`
  bool setValue(jni$_.JByteArray? bs) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _setValue(
      reference.pointer,
      _id_setValue as jni$_.JMethodIDPtr,
      _$bs.pointer,
    ).boolean;
  }
}

final class $BluetoothGattDescriptor$NullableType
    extends jni$_.JObjType<BluetoothGattDescriptor?> {
  @jni$_.internal
  const $BluetoothGattDescriptor$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothGattDescriptor;';

  @jni$_.internal
  @core$_.override
  BluetoothGattDescriptor? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BluetoothGattDescriptor.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothGattDescriptor?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothGattDescriptor$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothGattDescriptor$NullableType) &&
        other is $BluetoothGattDescriptor$NullableType;
  }
}

final class $BluetoothGattDescriptor$Type
    extends jni$_.JObjType<BluetoothGattDescriptor> {
  @jni$_.internal
  const $BluetoothGattDescriptor$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothGattDescriptor;';

  @jni$_.internal
  @core$_.override
  BluetoothGattDescriptor fromReference(jni$_.JReference reference) =>
      BluetoothGattDescriptor.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothGattDescriptor?> get nullableType =>
      const $BluetoothGattDescriptor$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothGattDescriptor$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothGattDescriptor$Type) &&
        other is $BluetoothGattDescriptor$Type;
  }
}

/// from: `android.bluetooth.BluetoothGattCharacteristic`
class BluetoothGattCharacteristic extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothGattCharacteristic> $type;

  @jni$_.internal
  BluetoothGattCharacteristic.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/BluetoothGattCharacteristic',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothGattCharacteristic$NullableType();
  static const type = $BluetoothGattCharacteristic$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator<android.bluetooth.BluetoothGattCharacteristic> CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  /// from: `static public final int FORMAT_FLOAT`
  static const FORMAT_FLOAT = 52;

  /// from: `static public final int FORMAT_SFLOAT`
  static const FORMAT_SFLOAT = 50;

  /// from: `static public final int FORMAT_SINT16`
  static const FORMAT_SINT16 = 34;

  /// from: `static public final int FORMAT_SINT32`
  static const FORMAT_SINT32 = 36;

  /// from: `static public final int FORMAT_SINT8`
  static const FORMAT_SINT8 = 33;

  /// from: `static public final int FORMAT_UINT16`
  static const FORMAT_UINT16 = 18;

  /// from: `static public final int FORMAT_UINT32`
  static const FORMAT_UINT32 = 20;

  /// from: `static public final int FORMAT_UINT8`
  static const FORMAT_UINT8 = 17;

  /// from: `static public final int PERMISSION_READ`
  static const PERMISSION_READ = 1;

  /// from: `static public final int PERMISSION_READ_ENCRYPTED`
  static const PERMISSION_READ_ENCRYPTED = 2;

  /// from: `static public final int PERMISSION_READ_ENCRYPTED_MITM`
  static const PERMISSION_READ_ENCRYPTED_MITM = 4;

  /// from: `static public final int PERMISSION_WRITE`
  static const PERMISSION_WRITE = 16;

  /// from: `static public final int PERMISSION_WRITE_ENCRYPTED`
  static const PERMISSION_WRITE_ENCRYPTED = 32;

  /// from: `static public final int PERMISSION_WRITE_ENCRYPTED_MITM`
  static const PERMISSION_WRITE_ENCRYPTED_MITM = 64;

  /// from: `static public final int PERMISSION_WRITE_SIGNED`
  static const PERMISSION_WRITE_SIGNED = 128;

  /// from: `static public final int PERMISSION_WRITE_SIGNED_MITM`
  static const PERMISSION_WRITE_SIGNED_MITM = 256;

  /// from: `static public final int PROPERTY_BROADCAST`
  static const PROPERTY_BROADCAST = 1;

  /// from: `static public final int PROPERTY_EXTENDED_PROPS`
  static const PROPERTY_EXTENDED_PROPS = 128;

  /// from: `static public final int PROPERTY_INDICATE`
  static const PROPERTY_INDICATE = 32;

  /// from: `static public final int PROPERTY_NOTIFY`
  static const PROPERTY_NOTIFY = 16;

  /// from: `static public final int PROPERTY_READ`
  static const PROPERTY_READ = 2;

  /// from: `static public final int PROPERTY_SIGNED_WRITE`
  static const PROPERTY_SIGNED_WRITE = 64;

  /// from: `static public final int PROPERTY_WRITE`
  static const PROPERTY_WRITE = 8;

  /// from: `static public final int PROPERTY_WRITE_NO_RESPONSE`
  static const PROPERTY_WRITE_NO_RESPONSE = 4;

  /// from: `static public final int WRITE_TYPE_DEFAULT`
  static const WRITE_TYPE_DEFAULT = 2;

  /// from: `static public final int WRITE_TYPE_NO_RESPONSE`
  static const WRITE_TYPE_NO_RESPONSE = 1;

  /// from: `static public final int WRITE_TYPE_SIGNED`
  static const WRITE_TYPE_SIGNED = 4;
  static final _id_new$ = _class.constructorId(r'(Ljava/util/UUID;II)V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public void <init>(java.util.UUID uUID, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory BluetoothGattCharacteristic(UUID? uUID, int i, int i1) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return BluetoothGattCharacteristic.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$uUID.pointer,
        i,
        i1,
      ).reference,
    );
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
      reference.pointer,
      _id_describeContents as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(jni$_.JObject? parcel, int i) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(
      reference.pointer,
      _id_writeToParcel as jni$_.JMethodIDPtr,
      _$parcel.pointer,
      i,
    ).check();
  }

  static final _id_addDescriptor = _class.instanceMethodId(
    r'addDescriptor',
    r'(Landroid/bluetooth/BluetoothGattDescriptor;)Z',
  );

  static final _addDescriptor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean addDescriptor(android.bluetooth.BluetoothGattDescriptor bluetoothGattDescriptor)`
  bool addDescriptor(BluetoothGattDescriptor? bluetoothGattDescriptor) {
    final _$bluetoothGattDescriptor =
        bluetoothGattDescriptor?.reference ?? jni$_.jNullReference;
    return _addDescriptor(
      reference.pointer,
      _id_addDescriptor as jni$_.JMethodIDPtr,
      _$bluetoothGattDescriptor.pointer,
    ).boolean;
  }

  static final _id_getService = _class.instanceMethodId(
    r'getService',
    r'()Landroid/bluetooth/BluetoothGattService;',
  );

  static final _getService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.bluetooth.BluetoothGattService getService()`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothGattService? getService() {
    return _getService(
      reference.pointer,
      _id_getService as jni$_.JMethodIDPtr,
    ).object<BluetoothGattService?>(const $BluetoothGattService$NullableType());
  }

  static final _id_getUuid = _class.instanceMethodId(
    r'getUuid',
    r'()Ljava/util/UUID;',
  );

  static final _getUuid =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.UUID getUuid()`
  /// The returned object must be released after use, by calling the [release] method.
  UUID? getUuid() {
    return _getUuid(
      reference.pointer,
      _id_getUuid as jni$_.JMethodIDPtr,
    ).object<UUID?>(const $UUID$NullableType());
  }

  static final _id_getInstanceId = _class.instanceMethodId(
    r'getInstanceId',
    r'()I',
  );

  static final _getInstanceId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getInstanceId()`
  int getInstanceId() {
    return _getInstanceId(
      reference.pointer,
      _id_getInstanceId as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getProperties = _class.instanceMethodId(
    r'getProperties',
    r'()I',
  );

  static final _getProperties =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getProperties()`
  int getProperties() {
    return _getProperties(
      reference.pointer,
      _id_getProperties as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getPermissions = _class.instanceMethodId(
    r'getPermissions',
    r'()I',
  );

  static final _getPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getPermissions()`
  int getPermissions() {
    return _getPermissions(
      reference.pointer,
      _id_getPermissions as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getWriteType = _class.instanceMethodId(
    r'getWriteType',
    r'()I',
  );

  static final _getWriteType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getWriteType()`
  int getWriteType() {
    return _getWriteType(
      reference.pointer,
      _id_getWriteType as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_setWriteType = _class.instanceMethodId(
    r'setWriteType',
    r'(I)V',
  );

  static final _setWriteType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setWriteType(int i)`
  void setWriteType(int i) {
    _setWriteType(
      reference.pointer,
      _id_setWriteType as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_getDescriptors = _class.instanceMethodId(
    r'getDescriptors',
    r'()Ljava/util/List;',
  );

  static final _getDescriptors =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.List<android.bluetooth.BluetoothGattDescriptor> getDescriptors()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<BluetoothGattDescriptor?>? getDescriptors() {
    return _getDescriptors(
      reference.pointer,
      _id_getDescriptors as jni$_.JMethodIDPtr,
    ).object<jni$_.JList<BluetoothGattDescriptor?>?>(
      const jni$_.JListNullableType<BluetoothGattDescriptor?>(
        $BluetoothGattDescriptor$NullableType(),
      ),
    );
  }

  static final _id_getDescriptor = _class.instanceMethodId(
    r'getDescriptor',
    r'(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattDescriptor;',
  );

  static final _getDescriptor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.BluetoothGattDescriptor getDescriptor(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothGattDescriptor? getDescriptor(UUID? uUID) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _getDescriptor(
      reference.pointer,
      _id_getDescriptor as jni$_.JMethodIDPtr,
      _$uUID.pointer,
    ).object<BluetoothGattDescriptor?>(
      const $BluetoothGattDescriptor$NullableType(),
    );
  }

  static final _id_getValue = _class.instanceMethodId(r'getValue', r'()[B');

  static final _getValue =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public byte[] getValue()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getValue() {
    return _getValue(
      reference.pointer,
      _id_getValue as jni$_.JMethodIDPtr,
    ).object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_getIntValue = _class.instanceMethodId(
    r'getIntValue',
    r'(II)Ljava/lang/Integer;',
  );

  static final _getIntValue =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
            )
          >();

  /// from: `public java.lang.Integer getIntValue(int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? getIntValue(int i, int i1) {
    return _getIntValue(
      reference.pointer,
      _id_getIntValue as jni$_.JMethodIDPtr,
      i,
      i1,
    ).object<jni$_.JInteger?>(const jni$_.JIntegerNullableType());
  }

  static final _id_getFloatValue = _class.instanceMethodId(
    r'getFloatValue',
    r'(II)Ljava/lang/Float;',
  );

  static final _getFloatValue =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
            )
          >();

  /// from: `public java.lang.Float getFloatValue(int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JFloat? getFloatValue(int i, int i1) {
    return _getFloatValue(
      reference.pointer,
      _id_getFloatValue as jni$_.JMethodIDPtr,
      i,
      i1,
    ).object<jni$_.JFloat?>(const jni$_.JFloatNullableType());
  }

  static final _id_getStringValue = _class.instanceMethodId(
    r'getStringValue',
    r'(I)Ljava/lang/String;',
  );

  static final _getStringValue =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public java.lang.String getStringValue(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getStringValue(int i) {
    return _getStringValue(
      reference.pointer,
      _id_getStringValue as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setValue = _class.instanceMethodId(r'setValue', r'([B)Z');

  static final _setValue =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean setValue(byte[] bs)`
  bool setValue(jni$_.JByteArray? bs) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _setValue(
      reference.pointer,
      _id_setValue as jni$_.JMethodIDPtr,
      _$bs.pointer,
    ).boolean;
  }

  static final _id_setValue$1 = _class.instanceMethodId(r'setValue', r'(III)Z');

  static final _setValue$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
            )
          >();

  /// from: `public boolean setValue(int i, int i1, int i2)`
  bool setValue$1(int i, int i1, int i2) {
    return _setValue$1(
      reference.pointer,
      _id_setValue$1 as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
    ).boolean;
  }

  static final _id_setValue$2 = _class.instanceMethodId(
    r'setValue',
    r'(IIII)Z',
  );

  static final _setValue$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Int32, jni$_.Int32, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
              int,
            )
          >();

  /// from: `public boolean setValue(int i, int i1, int i2, int i3)`
  bool setValue$2(int i, int i1, int i2, int i3) {
    return _setValue$2(
      reference.pointer,
      _id_setValue$2 as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
      i3,
    ).boolean;
  }

  static final _id_setValue$3 = _class.instanceMethodId(
    r'setValue',
    r'(Ljava/lang/String;)Z',
  );

  static final _setValue$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean setValue(java.lang.String string)`
  bool setValue$3(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setValue$3(
      reference.pointer,
      _id_setValue$3 as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).boolean;
  }
}

final class $BluetoothGattCharacteristic$NullableType
    extends jni$_.JObjType<BluetoothGattCharacteristic?> {
  @jni$_.internal
  const $BluetoothGattCharacteristic$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothGattCharacteristic;';

  @jni$_.internal
  @core$_.override
  BluetoothGattCharacteristic? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BluetoothGattCharacteristic.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothGattCharacteristic?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothGattCharacteristic$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothGattCharacteristic$NullableType) &&
        other is $BluetoothGattCharacteristic$NullableType;
  }
}

final class $BluetoothGattCharacteristic$Type
    extends jni$_.JObjType<BluetoothGattCharacteristic> {
  @jni$_.internal
  const $BluetoothGattCharacteristic$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothGattCharacteristic;';

  @jni$_.internal
  @core$_.override
  BluetoothGattCharacteristic fromReference(jni$_.JReference reference) =>
      BluetoothGattCharacteristic.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothGattCharacteristic?> get nullableType =>
      const $BluetoothGattCharacteristic$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothGattCharacteristic$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothGattCharacteristic$Type) &&
        other is $BluetoothGattCharacteristic$Type;
  }
}

/// from: `android.bluetooth.BluetoothProfile$ServiceListener`
class BluetoothProfile$ServiceListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothProfile$ServiceListener> $type;

  @jni$_.internal
  BluetoothProfile$ServiceListener.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/BluetoothProfile$ServiceListener',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothProfile$ServiceListener$NullableType();
  static const type = $BluetoothProfile$ServiceListener$Type();
  static final _id_onServiceConnected = _class.instanceMethodId(
    r'onServiceConnected',
    r'(ILandroid/bluetooth/BluetoothProfile;)V',
  );

  static final _onServiceConnected =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void onServiceConnected(int i, android.bluetooth.BluetoothProfile bluetoothProfile)`
  void onServiceConnected(int i, BluetoothProfile? bluetoothProfile) {
    final _$bluetoothProfile =
        bluetoothProfile?.reference ?? jni$_.jNullReference;
    _onServiceConnected(
      reference.pointer,
      _id_onServiceConnected as jni$_.JMethodIDPtr,
      i,
      _$bluetoothProfile.pointer,
    ).check();
  }

  static final _id_onServiceDisconnected = _class.instanceMethodId(
    r'onServiceDisconnected',
    r'(I)V',
  );

  static final _onServiceDisconnected =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public abstract void onServiceDisconnected(int i)`
  void onServiceDisconnected(int i) {
    _onServiceDisconnected(
      reference.pointer,
      _id_onServiceDisconnected as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $BluetoothProfile$ServiceListener> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V') {
        _$impls[$p]!.onServiceConnected(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![1]?.as(const $BluetoothProfile$Type(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onServiceDisconnected(I)V') {
        _$impls[$p]!.onServiceDisconnected(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $BluetoothProfile$ServiceListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.bluetooth.BluetoothProfile$ServiceListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onServiceConnected$async)
          r'onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V',
        if ($impl.onServiceDisconnected$async) r'onServiceDisconnected(I)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory BluetoothProfile$ServiceListener.implement(
    $BluetoothProfile$ServiceListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return BluetoothProfile$ServiceListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $BluetoothProfile$ServiceListener {
  factory $BluetoothProfile$ServiceListener({
    required void Function(int i, BluetoothProfile? bluetoothProfile)
    onServiceConnected,
    bool onServiceConnected$async,
    required void Function(int i) onServiceDisconnected,
    bool onServiceDisconnected$async,
  }) = _$BluetoothProfile$ServiceListener;

  void onServiceConnected(int i, BluetoothProfile? bluetoothProfile);
  bool get onServiceConnected$async => false;
  void onServiceDisconnected(int i);
  bool get onServiceDisconnected$async => false;
}

final class _$BluetoothProfile$ServiceListener
    with $BluetoothProfile$ServiceListener {
  _$BluetoothProfile$ServiceListener({
    required void Function(int i, BluetoothProfile? bluetoothProfile)
    onServiceConnected,
    this.onServiceConnected$async = false,
    required void Function(int i) onServiceDisconnected,
    this.onServiceDisconnected$async = false,
  }) : _onServiceConnected = onServiceConnected,
       _onServiceDisconnected = onServiceDisconnected;

  final void Function(int i, BluetoothProfile? bluetoothProfile)
  _onServiceConnected;
  final bool onServiceConnected$async;
  final void Function(int i) _onServiceDisconnected;
  final bool onServiceDisconnected$async;

  void onServiceConnected(int i, BluetoothProfile? bluetoothProfile) {
    return _onServiceConnected(i, bluetoothProfile);
  }

  void onServiceDisconnected(int i) {
    return _onServiceDisconnected(i);
  }
}

final class $BluetoothProfile$ServiceListener$NullableType
    extends jni$_.JObjType<BluetoothProfile$ServiceListener?> {
  @jni$_.internal
  const $BluetoothProfile$ServiceListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/bluetooth/BluetoothProfile$ServiceListener;';

  @jni$_.internal
  @core$_.override
  BluetoothProfile$ServiceListener? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BluetoothProfile$ServiceListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothProfile$ServiceListener?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothProfile$ServiceListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($BluetoothProfile$ServiceListener$NullableType) &&
        other is $BluetoothProfile$ServiceListener$NullableType;
  }
}

final class $BluetoothProfile$ServiceListener$Type
    extends jni$_.JObjType<BluetoothProfile$ServiceListener> {
  @jni$_.internal
  const $BluetoothProfile$ServiceListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/bluetooth/BluetoothProfile$ServiceListener;';

  @jni$_.internal
  @core$_.override
  BluetoothProfile$ServiceListener fromReference(jni$_.JReference reference) =>
      BluetoothProfile$ServiceListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothProfile$ServiceListener?> get nullableType =>
      const $BluetoothProfile$ServiceListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothProfile$ServiceListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothProfile$ServiceListener$Type) &&
        other is $BluetoothProfile$ServiceListener$Type;
  }
}

/// from: `android.bluetooth.BluetoothProfile`
class BluetoothProfile extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothProfile> $type;

  @jni$_.internal
  BluetoothProfile.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/BluetoothProfile',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothProfile$NullableType();
  static const type = $BluetoothProfile$Type();

  /// from: `static public final int A2DP`
  static const A2DP = 2;

  /// from: `static public final int CSIP_SET_COORDINATOR`
  static const CSIP_SET_COORDINATOR = 25;
  static final _id_EXTRA_PREVIOUS_STATE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PREVIOUS_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PREVIOUS_STATE =>
      _id_EXTRA_PREVIOUS_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_STATE = _class.staticFieldId(
    r'EXTRA_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_STATE =>
      _id_EXTRA_STATE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int GATT`
  static const GATT = 7;

  /// from: `static public final int GATT_SERVER`
  static const GATT_SERVER = 8;

  /// from: `static public final int HAP_CLIENT`
  static const HAP_CLIENT = 28;

  /// from: `static public final int HEADSET`
  static const HEADSET = 1;

  /// from: `static public final int HEALTH`
  static const HEALTH = 3;

  /// from: `static public final int HEARING_AID`
  static const HEARING_AID = 21;

  /// from: `static public final int HID_DEVICE`
  static const HID_DEVICE = 19;

  /// from: `static public final int LE_AUDIO`
  static const LE_AUDIO = 22;

  /// from: `static public final int SAP`
  static const SAP = 10;

  /// from: `static public final int STATE_CONNECTED`
  static const STATE_CONNECTED = 2;

  /// from: `static public final int STATE_CONNECTING`
  static const STATE_CONNECTING = 1;

  /// from: `static public final int STATE_DISCONNECTED`
  static const STATE_DISCONNECTED = 0;

  /// from: `static public final int STATE_DISCONNECTING`
  static const STATE_DISCONNECTING = 3;
  static final _id_getConnectedDevices = _class.instanceMethodId(
    r'getConnectedDevices',
    r'()Ljava/util/List;',
  );

  static final _getConnectedDevices =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<BluetoothDevice?>? getConnectedDevices() {
    return _getConnectedDevices(
      reference.pointer,
      _id_getConnectedDevices as jni$_.JMethodIDPtr,
    ).object<jni$_.JList<BluetoothDevice?>?>(
      const jni$_.JListNullableType<BluetoothDevice?>(
        $BluetoothDevice$NullableType(),
      ),
    );
  }

  static final _id_getDevicesMatchingConnectionStates = _class.instanceMethodId(
    r'getDevicesMatchingConnectionStates',
    r'([I)Ljava/util/List;',
  );

  static final _getDevicesMatchingConnectionStates =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<BluetoothDevice?>? getDevicesMatchingConnectionStates(
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _getDevicesMatchingConnectionStates(
      reference.pointer,
      _id_getDevicesMatchingConnectionStates as jni$_.JMethodIDPtr,
      _$is$.pointer,
    ).object<jni$_.JList<BluetoothDevice?>?>(
      const jni$_.JListNullableType<BluetoothDevice?>(
        $BluetoothDevice$NullableType(),
      ),
    );
  }

  static final _id_getConnectionState = _class.instanceMethodId(
    r'getConnectionState',
    r'(Landroid/bluetooth/BluetoothDevice;)I',
  );

  static final _getConnectionState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract int getConnectionState(android.bluetooth.BluetoothDevice bluetoothDevice)`
  int getConnectionState(BluetoothDevice? bluetoothDevice) {
    final _$bluetoothDevice =
        bluetoothDevice?.reference ?? jni$_.jNullReference;
    return _getConnectionState(
      reference.pointer,
      _id_getConnectionState as jni$_.JMethodIDPtr,
      _$bluetoothDevice.pointer,
    ).integer;
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $BluetoothProfile> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getConnectedDevices()Ljava/util/List;') {
        final $r = _$impls[$p]!.getConnectedDevices();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'getDevicesMatchingConnectionStates([I)Ljava/util/List;') {
        final $r = _$impls[$p]!.getDevicesMatchingConnectionStates(
          $a![0]?.as(const jni$_.JIntArrayType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'getConnectionState(Landroid/bluetooth/BluetoothDevice;)I') {
        final $r = _$impls[$p]!.getConnectionState(
          $a![0]?.as(const $BluetoothDevice$Type(), releaseOriginal: true),
        );
        return jni$_.JInteger($r).reference.toPointer();
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $BluetoothProfile $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.bluetooth.BluetoothProfile',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory BluetoothProfile.implement($BluetoothProfile $impl) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return BluetoothProfile.fromReference($i.implementReference());
  }
}

abstract base mixin class $BluetoothProfile {
  factory $BluetoothProfile({
    required jni$_.JList<BluetoothDevice?>? Function() getConnectedDevices,
    required jni$_.JList<BluetoothDevice?>? Function(jni$_.JIntArray? is$)
    getDevicesMatchingConnectionStates,
    required int Function(BluetoothDevice? bluetoothDevice) getConnectionState,
  }) = _$BluetoothProfile;

  jni$_.JList<BluetoothDevice?>? getConnectedDevices();
  jni$_.JList<BluetoothDevice?>? getDevicesMatchingConnectionStates(
    jni$_.JIntArray? is$,
  );
  int getConnectionState(BluetoothDevice? bluetoothDevice);
}

final class _$BluetoothProfile with $BluetoothProfile {
  _$BluetoothProfile({
    required jni$_.JList<BluetoothDevice?>? Function() getConnectedDevices,
    required jni$_.JList<BluetoothDevice?>? Function(jni$_.JIntArray? is$)
    getDevicesMatchingConnectionStates,
    required int Function(BluetoothDevice? bluetoothDevice) getConnectionState,
  }) : _getConnectedDevices = getConnectedDevices,
       _getDevicesMatchingConnectionStates = getDevicesMatchingConnectionStates,
       _getConnectionState = getConnectionState;

  final jni$_.JList<BluetoothDevice?>? Function() _getConnectedDevices;
  final jni$_.JList<BluetoothDevice?>? Function(jni$_.JIntArray? is$)
  _getDevicesMatchingConnectionStates;
  final int Function(BluetoothDevice? bluetoothDevice) _getConnectionState;

  jni$_.JList<BluetoothDevice?>? getConnectedDevices() {
    return _getConnectedDevices();
  }

  jni$_.JList<BluetoothDevice?>? getDevicesMatchingConnectionStates(
    jni$_.JIntArray? is$,
  ) {
    return _getDevicesMatchingConnectionStates(is$);
  }

  int getConnectionState(BluetoothDevice? bluetoothDevice) {
    return _getConnectionState(bluetoothDevice);
  }
}

final class $BluetoothProfile$NullableType
    extends jni$_.JObjType<BluetoothProfile?> {
  @jni$_.internal
  const $BluetoothProfile$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothProfile;';

  @jni$_.internal
  @core$_.override
  BluetoothProfile? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : BluetoothProfile.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothProfile?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothProfile$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothProfile$NullableType) &&
        other is $BluetoothProfile$NullableType;
  }
}

final class $BluetoothProfile$Type extends jni$_.JObjType<BluetoothProfile> {
  @jni$_.internal
  const $BluetoothProfile$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothProfile;';

  @jni$_.internal
  @core$_.override
  BluetoothProfile fromReference(jni$_.JReference reference) =>
      BluetoothProfile.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothProfile?> get nullableType =>
      const $BluetoothProfile$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothProfile$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothProfile$Type) &&
        other is $BluetoothProfile$Type;
  }
}

/// from: `android.bluetooth.le.BluetoothLeScanner`
class BluetoothLeScanner extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothLeScanner> $type;

  @jni$_.internal
  BluetoothLeScanner.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/le/BluetoothLeScanner',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothLeScanner$NullableType();
  static const type = $BluetoothLeScanner$Type();
  static final _id_EXTRA_CALLBACK_TYPE = _class.staticFieldId(
    r'EXTRA_CALLBACK_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CALLBACK_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CALLBACK_TYPE =>
      _id_EXTRA_CALLBACK_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ERROR_CODE = _class.staticFieldId(
    r'EXTRA_ERROR_CODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ERROR_CODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ERROR_CODE =>
      _id_EXTRA_ERROR_CODE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_LIST_SCAN_RESULT = _class.staticFieldId(
    r'EXTRA_LIST_SCAN_RESULT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_LIST_SCAN_RESULT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_LIST_SCAN_RESULT =>
      _id_EXTRA_LIST_SCAN_RESULT.get(_class, const jni$_.JStringNullableType());

  static final _id_startScan = _class.instanceMethodId(
    r'startScan',
    r'(Landroid/bluetooth/le/ScanCallback;)V',
  );

  static final _startScan =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startScan(android.bluetooth.le.ScanCallback scanCallback)`
  void startScan(ScanCallback? scanCallback) {
    final _$scanCallback = scanCallback?.reference ?? jni$_.jNullReference;
    _startScan(
      reference.pointer,
      _id_startScan as jni$_.JMethodIDPtr,
      _$scanCallback.pointer,
    ).check();
  }

  static final _id_startScan$1 = _class.instanceMethodId(
    r'startScan',
    r'(Ljava/util/List;Landroid/bluetooth/le/ScanSettings;Landroid/bluetooth/le/ScanCallback;)V',
  );

  static final _startScan$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startScan(java.util.List<android.bluetooth.le.ScanFilter> list, android.bluetooth.le.ScanSettings scanSettings, android.bluetooth.le.ScanCallback scanCallback)`
  void startScan$1(
    jni$_.JList<ScanFilter?>? list,
    ScanSettings? scanSettings,
    ScanCallback? scanCallback,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    final _$scanSettings = scanSettings?.reference ?? jni$_.jNullReference;
    final _$scanCallback = scanCallback?.reference ?? jni$_.jNullReference;
    _startScan$1(
      reference.pointer,
      _id_startScan$1 as jni$_.JMethodIDPtr,
      _$list.pointer,
      _$scanSettings.pointer,
      _$scanCallback.pointer,
    ).check();
  }

  static final _id_startScan$2 = _class.instanceMethodId(
    r'startScan',
    r'(Ljava/util/List;Landroid/bluetooth/le/ScanSettings;Landroid/app/PendingIntent;)I',
  );

  static final _startScan$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public int startScan(java.util.List<android.bluetooth.le.ScanFilter> list, android.bluetooth.le.ScanSettings scanSettings, android.app.PendingIntent pendingIntent)`
  int startScan$2(
    jni$_.JList<ScanFilter?>? list,
    ScanSettings? scanSettings,
    jni$_.JObject? pendingIntent,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    final _$scanSettings = scanSettings?.reference ?? jni$_.jNullReference;
    final _$pendingIntent = pendingIntent?.reference ?? jni$_.jNullReference;
    return _startScan$2(
      reference.pointer,
      _id_startScan$2 as jni$_.JMethodIDPtr,
      _$list.pointer,
      _$scanSettings.pointer,
      _$pendingIntent.pointer,
    ).integer;
  }

  static final _id_stopScan = _class.instanceMethodId(
    r'stopScan',
    r'(Landroid/bluetooth/le/ScanCallback;)V',
  );

  static final _stopScan =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void stopScan(android.bluetooth.le.ScanCallback scanCallback)`
  void stopScan(ScanCallback? scanCallback) {
    final _$scanCallback = scanCallback?.reference ?? jni$_.jNullReference;
    _stopScan(
      reference.pointer,
      _id_stopScan as jni$_.JMethodIDPtr,
      _$scanCallback.pointer,
    ).check();
  }

  static final _id_stopScan$1 = _class.instanceMethodId(
    r'stopScan',
    r'(Landroid/app/PendingIntent;)V',
  );

  static final _stopScan$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void stopScan(android.app.PendingIntent pendingIntent)`
  void stopScan$1(jni$_.JObject? pendingIntent) {
    final _$pendingIntent = pendingIntent?.reference ?? jni$_.jNullReference;
    _stopScan$1(
      reference.pointer,
      _id_stopScan$1 as jni$_.JMethodIDPtr,
      _$pendingIntent.pointer,
    ).check();
  }

  static final _id_flushPendingScanResults = _class.instanceMethodId(
    r'flushPendingScanResults',
    r'(Landroid/bluetooth/le/ScanCallback;)V',
  );

  static final _flushPendingScanResults =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void flushPendingScanResults(android.bluetooth.le.ScanCallback scanCallback)`
  void flushPendingScanResults(ScanCallback? scanCallback) {
    final _$scanCallback = scanCallback?.reference ?? jni$_.jNullReference;
    _flushPendingScanResults(
      reference.pointer,
      _id_flushPendingScanResults as jni$_.JMethodIDPtr,
      _$scanCallback.pointer,
    ).check();
  }
}

final class $BluetoothLeScanner$NullableType
    extends jni$_.JObjType<BluetoothLeScanner?> {
  @jni$_.internal
  const $BluetoothLeScanner$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/BluetoothLeScanner;';

  @jni$_.internal
  @core$_.override
  BluetoothLeScanner? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : BluetoothLeScanner.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothLeScanner?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothLeScanner$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothLeScanner$NullableType) &&
        other is $BluetoothLeScanner$NullableType;
  }
}

final class $BluetoothLeScanner$Type
    extends jni$_.JObjType<BluetoothLeScanner> {
  @jni$_.internal
  const $BluetoothLeScanner$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/BluetoothLeScanner;';

  @jni$_.internal
  @core$_.override
  BluetoothLeScanner fromReference(jni$_.JReference reference) =>
      BluetoothLeScanner.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothLeScanner?> get nullableType =>
      const $BluetoothLeScanner$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothLeScanner$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothLeScanner$Type) &&
        other is $BluetoothLeScanner$Type;
  }
}

/// from: `android.bluetooth.le.ScanFilter$Builder`
class ScanFilter$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ScanFilter$Builder> $type;

  @jni$_.internal
  ScanFilter$Builder.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/le/ScanFilter$Builder',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ScanFilter$Builder$NullableType();
  static const type = $ScanFilter$Builder$Type();
  static final _id_new$ = _class.constructorId(r'()V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ScanFilter$Builder() {
    return ScanFilter$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_setDeviceName = _class.instanceMethodId(
    r'setDeviceName',
    r'(Ljava/lang/String;)Landroid/bluetooth/le/ScanFilter$Builder;',
  );

  static final _setDeviceName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.le.ScanFilter$Builder setDeviceName(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanFilter$Builder? setDeviceName(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setDeviceName(
      reference.pointer,
      _id_setDeviceName as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<ScanFilter$Builder?>(const $ScanFilter$Builder$NullableType());
  }

  static final _id_setDeviceAddress = _class.instanceMethodId(
    r'setDeviceAddress',
    r'(Ljava/lang/String;)Landroid/bluetooth/le/ScanFilter$Builder;',
  );

  static final _setDeviceAddress =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.le.ScanFilter$Builder setDeviceAddress(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanFilter$Builder? setDeviceAddress(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setDeviceAddress(
      reference.pointer,
      _id_setDeviceAddress as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<ScanFilter$Builder?>(const $ScanFilter$Builder$NullableType());
  }

  static final _id_setServiceUuid = _class.instanceMethodId(
    r'setServiceUuid',
    r'(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;',
  );

  static final _setServiceUuid =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.le.ScanFilter$Builder setServiceUuid(android.os.ParcelUuid parcelUuid)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanFilter$Builder? setServiceUuid(jni$_.JObject? parcelUuid) {
    final _$parcelUuid = parcelUuid?.reference ?? jni$_.jNullReference;
    return _setServiceUuid(
      reference.pointer,
      _id_setServiceUuid as jni$_.JMethodIDPtr,
      _$parcelUuid.pointer,
    ).object<ScanFilter$Builder?>(const $ScanFilter$Builder$NullableType());
  }

  static final _id_setServiceUuid$1 = _class.instanceMethodId(
    r'setServiceUuid',
    r'(Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;',
  );

  static final _setServiceUuid$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.le.ScanFilter$Builder setServiceUuid(android.os.ParcelUuid parcelUuid, android.os.ParcelUuid parcelUuid1)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanFilter$Builder? setServiceUuid$1(
    jni$_.JObject? parcelUuid,
    jni$_.JObject? parcelUuid1,
  ) {
    final _$parcelUuid = parcelUuid?.reference ?? jni$_.jNullReference;
    final _$parcelUuid1 = parcelUuid1?.reference ?? jni$_.jNullReference;
    return _setServiceUuid$1(
      reference.pointer,
      _id_setServiceUuid$1 as jni$_.JMethodIDPtr,
      _$parcelUuid.pointer,
      _$parcelUuid1.pointer,
    ).object<ScanFilter$Builder?>(const $ScanFilter$Builder$NullableType());
  }

  static final _id_setServiceSolicitationUuid = _class.instanceMethodId(
    r'setServiceSolicitationUuid',
    r'(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;',
  );

  static final _setServiceSolicitationUuid =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.le.ScanFilter$Builder setServiceSolicitationUuid(android.os.ParcelUuid parcelUuid)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanFilter$Builder? setServiceSolicitationUuid(jni$_.JObject? parcelUuid) {
    final _$parcelUuid = parcelUuid?.reference ?? jni$_.jNullReference;
    return _setServiceSolicitationUuid(
      reference.pointer,
      _id_setServiceSolicitationUuid as jni$_.JMethodIDPtr,
      _$parcelUuid.pointer,
    ).object<ScanFilter$Builder?>(const $ScanFilter$Builder$NullableType());
  }

  static final _id_setServiceSolicitationUuid$1 = _class.instanceMethodId(
    r'setServiceSolicitationUuid',
    r'(Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;',
  );

  static final _setServiceSolicitationUuid$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.le.ScanFilter$Builder setServiceSolicitationUuid(android.os.ParcelUuid parcelUuid, android.os.ParcelUuid parcelUuid1)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanFilter$Builder? setServiceSolicitationUuid$1(
    jni$_.JObject? parcelUuid,
    jni$_.JObject? parcelUuid1,
  ) {
    final _$parcelUuid = parcelUuid?.reference ?? jni$_.jNullReference;
    final _$parcelUuid1 = parcelUuid1?.reference ?? jni$_.jNullReference;
    return _setServiceSolicitationUuid$1(
      reference.pointer,
      _id_setServiceSolicitationUuid$1 as jni$_.JMethodIDPtr,
      _$parcelUuid.pointer,
      _$parcelUuid1.pointer,
    ).object<ScanFilter$Builder?>(const $ScanFilter$Builder$NullableType());
  }

  static final _id_setServiceData = _class.instanceMethodId(
    r'setServiceData',
    r'(Landroid/os/ParcelUuid;[B)Landroid/bluetooth/le/ScanFilter$Builder;',
  );

  static final _setServiceData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.le.ScanFilter$Builder setServiceData(android.os.ParcelUuid parcelUuid, byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanFilter$Builder? setServiceData(
    jni$_.JObject? parcelUuid,
    jni$_.JByteArray? bs,
  ) {
    final _$parcelUuid = parcelUuid?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _setServiceData(
      reference.pointer,
      _id_setServiceData as jni$_.JMethodIDPtr,
      _$parcelUuid.pointer,
      _$bs.pointer,
    ).object<ScanFilter$Builder?>(const $ScanFilter$Builder$NullableType());
  }

  static final _id_setServiceData$1 = _class.instanceMethodId(
    r'setServiceData',
    r'(Landroid/os/ParcelUuid;[B[B)Landroid/bluetooth/le/ScanFilter$Builder;',
  );

  static final _setServiceData$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.le.ScanFilter$Builder setServiceData(android.os.ParcelUuid parcelUuid, byte[] bs, byte[] bs1)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanFilter$Builder? setServiceData$1(
    jni$_.JObject? parcelUuid,
    jni$_.JByteArray? bs,
    jni$_.JByteArray? bs1,
  ) {
    final _$parcelUuid = parcelUuid?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    final _$bs1 = bs1?.reference ?? jni$_.jNullReference;
    return _setServiceData$1(
      reference.pointer,
      _id_setServiceData$1 as jni$_.JMethodIDPtr,
      _$parcelUuid.pointer,
      _$bs.pointer,
      _$bs1.pointer,
    ).object<ScanFilter$Builder?>(const $ScanFilter$Builder$NullableType());
  }

  static final _id_setManufacturerData = _class.instanceMethodId(
    r'setManufacturerData',
    r'(I[B)Landroid/bluetooth/le/ScanFilter$Builder;',
  );

  static final _setManufacturerData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.le.ScanFilter$Builder setManufacturerData(int i, byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanFilter$Builder? setManufacturerData(int i, jni$_.JByteArray? bs) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _setManufacturerData(
      reference.pointer,
      _id_setManufacturerData as jni$_.JMethodIDPtr,
      i,
      _$bs.pointer,
    ).object<ScanFilter$Builder?>(const $ScanFilter$Builder$NullableType());
  }

  static final _id_setManufacturerData$1 = _class.instanceMethodId(
    r'setManufacturerData',
    r'(I[B[B)Landroid/bluetooth/le/ScanFilter$Builder;',
  );

  static final _setManufacturerData$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.le.ScanFilter$Builder setManufacturerData(int i, byte[] bs, byte[] bs1)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanFilter$Builder? setManufacturerData$1(
    int i,
    jni$_.JByteArray? bs,
    jni$_.JByteArray? bs1,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    final _$bs1 = bs1?.reference ?? jni$_.jNullReference;
    return _setManufacturerData$1(
      reference.pointer,
      _id_setManufacturerData$1 as jni$_.JMethodIDPtr,
      i,
      _$bs.pointer,
      _$bs1.pointer,
    ).object<ScanFilter$Builder?>(const $ScanFilter$Builder$NullableType());
  }

  static final _id_setAdvertisingDataTypeWithData = _class.instanceMethodId(
    r'setAdvertisingDataTypeWithData',
    r'(I[B[B)Landroid/bluetooth/le/ScanFilter$Builder;',
  );

  static final _setAdvertisingDataTypeWithData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.bluetooth.le.ScanFilter$Builder setAdvertisingDataTypeWithData(int i, byte[] bs, byte[] bs1)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanFilter$Builder? setAdvertisingDataTypeWithData(
    int i,
    jni$_.JByteArray? bs,
    jni$_.JByteArray? bs1,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    final _$bs1 = bs1?.reference ?? jni$_.jNullReference;
    return _setAdvertisingDataTypeWithData(
      reference.pointer,
      _id_setAdvertisingDataTypeWithData as jni$_.JMethodIDPtr,
      i,
      _$bs.pointer,
      _$bs1.pointer,
    ).object<ScanFilter$Builder?>(const $ScanFilter$Builder$NullableType());
  }

  static final _id_setAdvertisingDataType = _class.instanceMethodId(
    r'setAdvertisingDataType',
    r'(I)Landroid/bluetooth/le/ScanFilter$Builder;',
  );

  static final _setAdvertisingDataType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.bluetooth.le.ScanFilter$Builder setAdvertisingDataType(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanFilter$Builder? setAdvertisingDataType(int i) {
    return _setAdvertisingDataType(
      reference.pointer,
      _id_setAdvertisingDataType as jni$_.JMethodIDPtr,
      i,
    ).object<ScanFilter$Builder?>(const $ScanFilter$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroid/bluetooth/le/ScanFilter;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.bluetooth.le.ScanFilter build()`
  /// The returned object must be released after use, by calling the [release] method.
  ScanFilter? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<ScanFilter?>(const $ScanFilter$NullableType());
  }
}

final class $ScanFilter$Builder$NullableType
    extends jni$_.JObjType<ScanFilter$Builder?> {
  @jni$_.internal
  const $ScanFilter$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/ScanFilter$Builder;';

  @jni$_.internal
  @core$_.override
  ScanFilter$Builder? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : ScanFilter$Builder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ScanFilter$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ScanFilter$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanFilter$Builder$NullableType) &&
        other is $ScanFilter$Builder$NullableType;
  }
}

final class $ScanFilter$Builder$Type
    extends jni$_.JObjType<ScanFilter$Builder> {
  @jni$_.internal
  const $ScanFilter$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/ScanFilter$Builder;';

  @jni$_.internal
  @core$_.override
  ScanFilter$Builder fromReference(jni$_.JReference reference) =>
      ScanFilter$Builder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ScanFilter$Builder?> get nullableType =>
      const $ScanFilter$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ScanFilter$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanFilter$Builder$Type) &&
        other is $ScanFilter$Builder$Type;
  }
}

/// from: `android.bluetooth.le.ScanFilter`
class ScanFilter extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ScanFilter> $type;

  @jni$_.internal
  ScanFilter.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/le/ScanFilter',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ScanFilter$NullableType();
  static const type = $ScanFilter$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator<android.bluetooth.le.ScanFilter> CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
      reference.pointer,
      _id_describeContents as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(jni$_.JObject? parcel, int i) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(
      reference.pointer,
      _id_writeToParcel as jni$_.JMethodIDPtr,
      _$parcel.pointer,
      i,
    ).check();
  }

  static final _id_getDeviceName = _class.instanceMethodId(
    r'getDeviceName',
    r'()Ljava/lang/String;',
  );

  static final _getDeviceName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getDeviceName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getDeviceName() {
    return _getDeviceName(
      reference.pointer,
      _id_getDeviceName as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getServiceUuid = _class.instanceMethodId(
    r'getServiceUuid',
    r'()Landroid/os/ParcelUuid;',
  );

  static final _getServiceUuid =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.ParcelUuid getServiceUuid()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getServiceUuid() {
    return _getServiceUuid(
      reference.pointer,
      _id_getServiceUuid as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getServiceUuidMask = _class.instanceMethodId(
    r'getServiceUuidMask',
    r'()Landroid/os/ParcelUuid;',
  );

  static final _getServiceUuidMask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.ParcelUuid getServiceUuidMask()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getServiceUuidMask() {
    return _getServiceUuidMask(
      reference.pointer,
      _id_getServiceUuidMask as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getServiceSolicitationUuid = _class.instanceMethodId(
    r'getServiceSolicitationUuid',
    r'()Landroid/os/ParcelUuid;',
  );

  static final _getServiceSolicitationUuid =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.ParcelUuid getServiceSolicitationUuid()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getServiceSolicitationUuid() {
    return _getServiceSolicitationUuid(
      reference.pointer,
      _id_getServiceSolicitationUuid as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getServiceSolicitationUuidMask = _class.instanceMethodId(
    r'getServiceSolicitationUuidMask',
    r'()Landroid/os/ParcelUuid;',
  );

  static final _getServiceSolicitationUuidMask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.ParcelUuid getServiceSolicitationUuidMask()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getServiceSolicitationUuidMask() {
    return _getServiceSolicitationUuidMask(
      reference.pointer,
      _id_getServiceSolicitationUuidMask as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDeviceAddress = _class.instanceMethodId(
    r'getDeviceAddress',
    r'()Ljava/lang/String;',
  );

  static final _getDeviceAddress =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getDeviceAddress()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getDeviceAddress() {
    return _getDeviceAddress(
      reference.pointer,
      _id_getDeviceAddress as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getServiceData = _class.instanceMethodId(
    r'getServiceData',
    r'()[B',
  );

  static final _getServiceData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public byte[] getServiceData()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getServiceData() {
    return _getServiceData(
      reference.pointer,
      _id_getServiceData as jni$_.JMethodIDPtr,
    ).object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_getServiceDataMask = _class.instanceMethodId(
    r'getServiceDataMask',
    r'()[B',
  );

  static final _getServiceDataMask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public byte[] getServiceDataMask()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getServiceDataMask() {
    return _getServiceDataMask(
      reference.pointer,
      _id_getServiceDataMask as jni$_.JMethodIDPtr,
    ).object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_getServiceDataUuid = _class.instanceMethodId(
    r'getServiceDataUuid',
    r'()Landroid/os/ParcelUuid;',
  );

  static final _getServiceDataUuid =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.ParcelUuid getServiceDataUuid()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getServiceDataUuid() {
    return _getServiceDataUuid(
      reference.pointer,
      _id_getServiceDataUuid as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getManufacturerId = _class.instanceMethodId(
    r'getManufacturerId',
    r'()I',
  );

  static final _getManufacturerId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getManufacturerId()`
  int getManufacturerId() {
    return _getManufacturerId(
      reference.pointer,
      _id_getManufacturerId as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getManufacturerData = _class.instanceMethodId(
    r'getManufacturerData',
    r'()[B',
  );

  static final _getManufacturerData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public byte[] getManufacturerData()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getManufacturerData() {
    return _getManufacturerData(
      reference.pointer,
      _id_getManufacturerData as jni$_.JMethodIDPtr,
    ).object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_getManufacturerDataMask = _class.instanceMethodId(
    r'getManufacturerDataMask',
    r'()[B',
  );

  static final _getManufacturerDataMask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public byte[] getManufacturerDataMask()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getManufacturerDataMask() {
    return _getManufacturerDataMask(
      reference.pointer,
      _id_getManufacturerDataMask as jni$_.JMethodIDPtr,
    ).object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_getAdvertisingDataType = _class.instanceMethodId(
    r'getAdvertisingDataType',
    r'()I',
  );

  static final _getAdvertisingDataType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getAdvertisingDataType()`
  int getAdvertisingDataType() {
    return _getAdvertisingDataType(
      reference.pointer,
      _id_getAdvertisingDataType as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getAdvertisingData = _class.instanceMethodId(
    r'getAdvertisingData',
    r'()[B',
  );

  static final _getAdvertisingData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public byte[] getAdvertisingData()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getAdvertisingData() {
    return _getAdvertisingData(
      reference.pointer,
      _id_getAdvertisingData as jni$_.JMethodIDPtr,
    ).object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_getAdvertisingDataMask = _class.instanceMethodId(
    r'getAdvertisingDataMask',
    r'()[B',
  );

  static final _getAdvertisingDataMask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public byte[] getAdvertisingDataMask()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getAdvertisingDataMask() {
    return _getAdvertisingDataMask(
      reference.pointer,
      _id_getAdvertisingDataMask as jni$_.JMethodIDPtr,
    ).object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_matches = _class.instanceMethodId(
    r'matches',
    r'(Landroid/bluetooth/le/ScanResult;)Z',
  );

  static final _matches =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean matches(android.bluetooth.le.ScanResult scanResult)`
  bool matches(ScanResult? scanResult) {
    final _$scanResult = scanResult?.reference ?? jni$_.jNullReference;
    return _matches(
      reference.pointer,
      _id_matches as jni$_.JMethodIDPtr,
      _$scanResult.pointer,
    ).boolean;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_hashCode$1 = _class.instanceMethodId(r'hashCode', r'()I');

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(
      reference.pointer,
      _id_hashCode$1 as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(jni$_.JObject? object) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(
      reference.pointer,
      _id_equals as jni$_.JMethodIDPtr,
      _$object.pointer,
    ).boolean;
  }
}

final class $ScanFilter$NullableType extends jni$_.JObjType<ScanFilter?> {
  @jni$_.internal
  const $ScanFilter$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/ScanFilter;';

  @jni$_.internal
  @core$_.override
  ScanFilter? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : ScanFilter.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ScanFilter?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ScanFilter$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanFilter$NullableType) &&
        other is $ScanFilter$NullableType;
  }
}

final class $ScanFilter$Type extends jni$_.JObjType<ScanFilter> {
  @jni$_.internal
  const $ScanFilter$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/ScanFilter;';

  @jni$_.internal
  @core$_.override
  ScanFilter fromReference(jni$_.JReference reference) =>
      ScanFilter.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ScanFilter?> get nullableType =>
      const $ScanFilter$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ScanFilter$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanFilter$Type) && other is $ScanFilter$Type;
  }
}

/// from: `android.bluetooth.le.ScanResult`
class ScanResult extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ScanResult> $type;

  @jni$_.internal
  ScanResult.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/le/ScanResult',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ScanResult$NullableType();
  static const type = $ScanResult$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator<android.bluetooth.le.ScanResult> CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  /// from: `static public final int DATA_COMPLETE`
  static const DATA_COMPLETE = 0;

  /// from: `static public final int DATA_TRUNCATED`
  static const DATA_TRUNCATED = 2;

  /// from: `static public final int PERIODIC_INTERVAL_NOT_PRESENT`
  static const PERIODIC_INTERVAL_NOT_PRESENT = 0;

  /// from: `static public final int PHY_UNUSED`
  static const PHY_UNUSED = 0;

  /// from: `static public final int SID_NOT_PRESENT`
  static const SID_NOT_PRESENT = 255;

  /// from: `static public final int TX_POWER_NOT_PRESENT`
  static const TX_POWER_NOT_PRESENT = 127;
  static final _id_new$ = _class.constructorId(
    r'(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/le/ScanRecord;IJ)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int64,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public void <init>(android.bluetooth.BluetoothDevice bluetoothDevice, android.bluetooth.le.ScanRecord scanRecord, int i, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ScanResult(
    BluetoothDevice? bluetoothDevice,
    jni$_.JObject? scanRecord,
    int i,
    int j,
  ) {
    final _$bluetoothDevice =
        bluetoothDevice?.reference ?? jni$_.jNullReference;
    final _$scanRecord = scanRecord?.reference ?? jni$_.jNullReference;
    return ScanResult.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$bluetoothDevice.pointer,
        _$scanRecord.pointer,
        i,
        j,
      ).reference,
    );
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/bluetooth/BluetoothDevice;IIIIIIILandroid/bluetooth/le/ScanRecord;J)V',
  );

  static final _new$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int64,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              int,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void <init>(android.bluetooth.BluetoothDevice bluetoothDevice, int i, int i1, int i2, int i3, int i4, int i5, int i6, android.bluetooth.le.ScanRecord scanRecord, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ScanResult.new$1(
    BluetoothDevice? bluetoothDevice,
    int i,
    int i1,
    int i2,
    int i3,
    int i4,
    int i5,
    int i6,
    jni$_.JObject? scanRecord,
    int j,
  ) {
    final _$bluetoothDevice =
        bluetoothDevice?.reference ?? jni$_.jNullReference;
    final _$scanRecord = scanRecord?.reference ?? jni$_.jNullReference;
    return ScanResult.fromReference(
      _new$1(
        _class.reference.pointer,
        _id_new$1 as jni$_.JMethodIDPtr,
        _$bluetoothDevice.pointer,
        i,
        i1,
        i2,
        i3,
        i4,
        i5,
        i6,
        _$scanRecord.pointer,
        j,
      ).reference,
    );
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(jni$_.JObject? parcel, int i) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(
      reference.pointer,
      _id_writeToParcel as jni$_.JMethodIDPtr,
      _$parcel.pointer,
      i,
    ).check();
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
      reference.pointer,
      _id_describeContents as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getDevice = _class.instanceMethodId(
    r'getDevice',
    r'()Landroid/bluetooth/BluetoothDevice;',
  );

  static final _getDevice =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.bluetooth.BluetoothDevice getDevice()`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothDevice? getDevice() {
    return _getDevice(
      reference.pointer,
      _id_getDevice as jni$_.JMethodIDPtr,
    ).object<BluetoothDevice?>(const $BluetoothDevice$NullableType());
  }

  static final _id_getScanRecord = _class.instanceMethodId(
    r'getScanRecord',
    r'()Landroid/bluetooth/le/ScanRecord;',
  );

  static final _getScanRecord =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.bluetooth.le.ScanRecord getScanRecord()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getScanRecord() {
    return _getScanRecord(
      reference.pointer,
      _id_getScanRecord as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getRssi = _class.instanceMethodId(r'getRssi', r'()I');

  static final _getRssi =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getRssi()`
  int getRssi() {
    return _getRssi(
      reference.pointer,
      _id_getRssi as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getTimestampNanos = _class.instanceMethodId(
    r'getTimestampNanos',
    r'()J',
  );

  static final _getTimestampNanos =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallLongMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public long getTimestampNanos()`
  int getTimestampNanos() {
    return _getTimestampNanos(
      reference.pointer,
      _id_getTimestampNanos as jni$_.JMethodIDPtr,
    ).long;
  }

  static final _id_isLegacy = _class.instanceMethodId(r'isLegacy', r'()Z');

  static final _isLegacy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isLegacy()`
  bool isLegacy() {
    return _isLegacy(
      reference.pointer,
      _id_isLegacy as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isConnectable = _class.instanceMethodId(
    r'isConnectable',
    r'()Z',
  );

  static final _isConnectable =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isConnectable()`
  bool isConnectable() {
    return _isConnectable(
      reference.pointer,
      _id_isConnectable as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_getDataStatus = _class.instanceMethodId(
    r'getDataStatus',
    r'()I',
  );

  static final _getDataStatus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getDataStatus()`
  int getDataStatus() {
    return _getDataStatus(
      reference.pointer,
      _id_getDataStatus as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getPrimaryPhy = _class.instanceMethodId(
    r'getPrimaryPhy',
    r'()I',
  );

  static final _getPrimaryPhy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getPrimaryPhy()`
  int getPrimaryPhy() {
    return _getPrimaryPhy(
      reference.pointer,
      _id_getPrimaryPhy as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getSecondaryPhy = _class.instanceMethodId(
    r'getSecondaryPhy',
    r'()I',
  );

  static final _getSecondaryPhy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getSecondaryPhy()`
  int getSecondaryPhy() {
    return _getSecondaryPhy(
      reference.pointer,
      _id_getSecondaryPhy as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getAdvertisingSid = _class.instanceMethodId(
    r'getAdvertisingSid',
    r'()I',
  );

  static final _getAdvertisingSid =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getAdvertisingSid()`
  int getAdvertisingSid() {
    return _getAdvertisingSid(
      reference.pointer,
      _id_getAdvertisingSid as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getTxPower = _class.instanceMethodId(r'getTxPower', r'()I');

  static final _getTxPower =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getTxPower()`
  int getTxPower() {
    return _getTxPower(
      reference.pointer,
      _id_getTxPower as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getPeriodicAdvertisingInterval = _class.instanceMethodId(
    r'getPeriodicAdvertisingInterval',
    r'()I',
  );

  static final _getPeriodicAdvertisingInterval =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getPeriodicAdvertisingInterval()`
  int getPeriodicAdvertisingInterval() {
    return _getPeriodicAdvertisingInterval(
      reference.pointer,
      _id_getPeriodicAdvertisingInterval as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(r'hashCode', r'()I');

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(
      reference.pointer,
      _id_hashCode$1 as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(jni$_.JObject? object) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(
      reference.pointer,
      _id_equals as jni$_.JMethodIDPtr,
      _$object.pointer,
    ).boolean;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }
}

final class $ScanResult$NullableType extends jni$_.JObjType<ScanResult?> {
  @jni$_.internal
  const $ScanResult$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/ScanResult;';

  @jni$_.internal
  @core$_.override
  ScanResult? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : ScanResult.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ScanResult?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ScanResult$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanResult$NullableType) &&
        other is $ScanResult$NullableType;
  }
}

final class $ScanResult$Type extends jni$_.JObjType<ScanResult> {
  @jni$_.internal
  const $ScanResult$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/ScanResult;';

  @jni$_.internal
  @core$_.override
  ScanResult fromReference(jni$_.JReference reference) =>
      ScanResult.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ScanResult?> get nullableType =>
      const $ScanResult$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ScanResult$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanResult$Type) && other is $ScanResult$Type;
  }
}

/// from: `android.bluetooth.le.ScanSettings$Builder`
class ScanSettings$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ScanSettings$Builder> $type;

  @jni$_.internal
  ScanSettings$Builder.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/le/ScanSettings$Builder',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ScanSettings$Builder$NullableType();
  static const type = $ScanSettings$Builder$Type();
  static final _id_new$ = _class.constructorId(r'()V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ScanSettings$Builder() {
    return ScanSettings$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_setScanMode = _class.instanceMethodId(
    r'setScanMode',
    r'(I)Landroid/bluetooth/le/ScanSettings$Builder;',
  );

  static final _setScanMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.bluetooth.le.ScanSettings$Builder setScanMode(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanSettings$Builder? setScanMode(int i) {
    return _setScanMode(
      reference.pointer,
      _id_setScanMode as jni$_.JMethodIDPtr,
      i,
    ).object<ScanSettings$Builder?>(const $ScanSettings$Builder$NullableType());
  }

  static final _id_setCallbackType = _class.instanceMethodId(
    r'setCallbackType',
    r'(I)Landroid/bluetooth/le/ScanSettings$Builder;',
  );

  static final _setCallbackType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.bluetooth.le.ScanSettings$Builder setCallbackType(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanSettings$Builder? setCallbackType(int i) {
    return _setCallbackType(
      reference.pointer,
      _id_setCallbackType as jni$_.JMethodIDPtr,
      i,
    ).object<ScanSettings$Builder?>(const $ScanSettings$Builder$NullableType());
  }

  static final _id_setReportDelay = _class.instanceMethodId(
    r'setReportDelay',
    r'(J)Landroid/bluetooth/le/ScanSettings$Builder;',
  );

  static final _setReportDelay =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int64,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.bluetooth.le.ScanSettings$Builder setReportDelay(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanSettings$Builder? setReportDelay(int j) {
    return _setReportDelay(
      reference.pointer,
      _id_setReportDelay as jni$_.JMethodIDPtr,
      j,
    ).object<ScanSettings$Builder?>(const $ScanSettings$Builder$NullableType());
  }

  static final _id_setNumOfMatches = _class.instanceMethodId(
    r'setNumOfMatches',
    r'(I)Landroid/bluetooth/le/ScanSettings$Builder;',
  );

  static final _setNumOfMatches =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.bluetooth.le.ScanSettings$Builder setNumOfMatches(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanSettings$Builder? setNumOfMatches(int i) {
    return _setNumOfMatches(
      reference.pointer,
      _id_setNumOfMatches as jni$_.JMethodIDPtr,
      i,
    ).object<ScanSettings$Builder?>(const $ScanSettings$Builder$NullableType());
  }

  static final _id_setMatchMode = _class.instanceMethodId(
    r'setMatchMode',
    r'(I)Landroid/bluetooth/le/ScanSettings$Builder;',
  );

  static final _setMatchMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.bluetooth.le.ScanSettings$Builder setMatchMode(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanSettings$Builder? setMatchMode(int i) {
    return _setMatchMode(
      reference.pointer,
      _id_setMatchMode as jni$_.JMethodIDPtr,
      i,
    ).object<ScanSettings$Builder?>(const $ScanSettings$Builder$NullableType());
  }

  static final _id_setLegacy = _class.instanceMethodId(
    r'setLegacy',
    r'(Z)Landroid/bluetooth/le/ScanSettings$Builder;',
  );

  static final _setLegacy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.bluetooth.le.ScanSettings$Builder setLegacy(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanSettings$Builder? setLegacy(bool z) {
    return _setLegacy(
      reference.pointer,
      _id_setLegacy as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<ScanSettings$Builder?>(const $ScanSettings$Builder$NullableType());
  }

  static final _id_setPhy = _class.instanceMethodId(
    r'setPhy',
    r'(I)Landroid/bluetooth/le/ScanSettings$Builder;',
  );

  static final _setPhy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.bluetooth.le.ScanSettings$Builder setPhy(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  ScanSettings$Builder? setPhy(int i) {
    return _setPhy(
      reference.pointer,
      _id_setPhy as jni$_.JMethodIDPtr,
      i,
    ).object<ScanSettings$Builder?>(const $ScanSettings$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroid/bluetooth/le/ScanSettings;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.bluetooth.le.ScanSettings build()`
  /// The returned object must be released after use, by calling the [release] method.
  ScanSettings? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<ScanSettings?>(const $ScanSettings$NullableType());
  }
}

final class $ScanSettings$Builder$NullableType
    extends jni$_.JObjType<ScanSettings$Builder?> {
  @jni$_.internal
  const $ScanSettings$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/ScanSettings$Builder;';

  @jni$_.internal
  @core$_.override
  ScanSettings$Builder? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : ScanSettings$Builder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ScanSettings$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ScanSettings$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanSettings$Builder$NullableType) &&
        other is $ScanSettings$Builder$NullableType;
  }
}

final class $ScanSettings$Builder$Type
    extends jni$_.JObjType<ScanSettings$Builder> {
  @jni$_.internal
  const $ScanSettings$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/ScanSettings$Builder;';

  @jni$_.internal
  @core$_.override
  ScanSettings$Builder fromReference(jni$_.JReference reference) =>
      ScanSettings$Builder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ScanSettings$Builder?> get nullableType =>
      const $ScanSettings$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ScanSettings$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanSettings$Builder$Type) &&
        other is $ScanSettings$Builder$Type;
  }
}

/// from: `android.bluetooth.le.ScanSettings`
class ScanSettings extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ScanSettings> $type;

  @jni$_.internal
  ScanSettings.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/le/ScanSettings',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ScanSettings$NullableType();
  static const type = $ScanSettings$Type();

  /// from: `static public final long AUTO_BATCH_MIN_REPORT_DELAY_MILLIS`
  static const AUTO_BATCH_MIN_REPORT_DELAY_MILLIS = 600000;

  /// from: `static public final int CALLBACK_TYPE_ALL_MATCHES`
  static const CALLBACK_TYPE_ALL_MATCHES = 1;

  /// from: `static public final int CALLBACK_TYPE_ALL_MATCHES_AUTO_BATCH`
  static const CALLBACK_TYPE_ALL_MATCHES_AUTO_BATCH = 8;

  /// from: `static public final int CALLBACK_TYPE_FIRST_MATCH`
  static const CALLBACK_TYPE_FIRST_MATCH = 2;

  /// from: `static public final int CALLBACK_TYPE_MATCH_LOST`
  static const CALLBACK_TYPE_MATCH_LOST = 4;
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator<android.bluetooth.le.ScanSettings> CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  /// from: `static public final int MATCH_MODE_AGGRESSIVE`
  static const MATCH_MODE_AGGRESSIVE = 1;

  /// from: `static public final int MATCH_MODE_STICKY`
  static const MATCH_MODE_STICKY = 2;

  /// from: `static public final int MATCH_NUM_FEW_ADVERTISEMENT`
  static const MATCH_NUM_FEW_ADVERTISEMENT = 2;

  /// from: `static public final int MATCH_NUM_MAX_ADVERTISEMENT`
  static const MATCH_NUM_MAX_ADVERTISEMENT = 3;

  /// from: `static public final int MATCH_NUM_ONE_ADVERTISEMENT`
  static const MATCH_NUM_ONE_ADVERTISEMENT = 1;

  /// from: `static public final int PHY_LE_ALL_SUPPORTED`
  static const PHY_LE_ALL_SUPPORTED = 255;

  /// from: `static public final int SCAN_MODE_BALANCED`
  static const SCAN_MODE_BALANCED = 1;

  /// from: `static public final int SCAN_MODE_LOW_LATENCY`
  static const SCAN_MODE_LOW_LATENCY = 2;

  /// from: `static public final int SCAN_MODE_LOW_POWER`
  static const SCAN_MODE_LOW_POWER = 0;

  /// from: `static public final int SCAN_MODE_OPPORTUNISTIC`
  static const SCAN_MODE_OPPORTUNISTIC = -1;
  static final _id_getScanMode = _class.instanceMethodId(
    r'getScanMode',
    r'()I',
  );

  static final _getScanMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getScanMode()`
  int getScanMode() {
    return _getScanMode(
      reference.pointer,
      _id_getScanMode as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getCallbackType = _class.instanceMethodId(
    r'getCallbackType',
    r'()I',
  );

  static final _getCallbackType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getCallbackType()`
  int getCallbackType() {
    return _getCallbackType(
      reference.pointer,
      _id_getCallbackType as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getScanResultType = _class.instanceMethodId(
    r'getScanResultType',
    r'()I',
  );

  static final _getScanResultType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getScanResultType()`
  int getScanResultType() {
    return _getScanResultType(
      reference.pointer,
      _id_getScanResultType as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getLegacy = _class.instanceMethodId(r'getLegacy', r'()Z');

  static final _getLegacy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean getLegacy()`
  bool getLegacy() {
    return _getLegacy(
      reference.pointer,
      _id_getLegacy as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_getPhy = _class.instanceMethodId(r'getPhy', r'()I');

  static final _getPhy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getPhy()`
  int getPhy() {
    return _getPhy(reference.pointer, _id_getPhy as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getReportDelayMillis = _class.instanceMethodId(
    r'getReportDelayMillis',
    r'()J',
  );

  static final _getReportDelayMillis =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallLongMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public long getReportDelayMillis()`
  int getReportDelayMillis() {
    return _getReportDelayMillis(
      reference.pointer,
      _id_getReportDelayMillis as jni$_.JMethodIDPtr,
    ).long;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(jni$_.JObject? parcel, int i) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(
      reference.pointer,
      _id_writeToParcel as jni$_.JMethodIDPtr,
      _$parcel.pointer,
      i,
    ).check();
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
      reference.pointer,
      _id_describeContents as jni$_.JMethodIDPtr,
    ).integer;
  }
}

final class $ScanSettings$NullableType extends jni$_.JObjType<ScanSettings?> {
  @jni$_.internal
  const $ScanSettings$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/ScanSettings;';

  @jni$_.internal
  @core$_.override
  ScanSettings? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : ScanSettings.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ScanSettings?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ScanSettings$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanSettings$NullableType) &&
        other is $ScanSettings$NullableType;
  }
}

final class $ScanSettings$Type extends jni$_.JObjType<ScanSettings> {
  @jni$_.internal
  const $ScanSettings$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/ScanSettings;';

  @jni$_.internal
  @core$_.override
  ScanSettings fromReference(jni$_.JReference reference) =>
      ScanSettings.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ScanSettings?> get nullableType =>
      const $ScanSettings$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ScanSettings$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanSettings$Type) &&
        other is $ScanSettings$Type;
  }
}

/// from: `android.bluetooth.le.ScanCallback`
class ScanCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ScanCallback> $type;

  @jni$_.internal
  ScanCallback.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/bluetooth/le/ScanCallback',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ScanCallback$NullableType();
  static const type = $ScanCallback$Type();

  /// from: `static public final int SCAN_FAILED_ALREADY_STARTED`
  static const SCAN_FAILED_ALREADY_STARTED = 1;

  /// from: `static public final int SCAN_FAILED_APPLICATION_REGISTRATION_FAILED`
  static const SCAN_FAILED_APPLICATION_REGISTRATION_FAILED = 2;

  /// from: `static public final int SCAN_FAILED_FEATURE_UNSUPPORTED`
  static const SCAN_FAILED_FEATURE_UNSUPPORTED = 4;

  /// from: `static public final int SCAN_FAILED_INTERNAL_ERROR`
  static const SCAN_FAILED_INTERNAL_ERROR = 3;

  /// from: `static public final int SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES`
  static const SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES = 5;

  /// from: `static public final int SCAN_FAILED_SCANNING_TOO_FREQUENTLY`
  static const SCAN_FAILED_SCANNING_TOO_FREQUENTLY = 6;
  static final _id_onScanResult = _class.instanceMethodId(
    r'onScanResult',
    r'(ILandroid/bluetooth/le/ScanResult;)V',
  );

  static final _onScanResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onScanResult(int i, android.bluetooth.le.ScanResult scanResult)`
  void onScanResult(int i, ScanResult? scanResult) {
    final _$scanResult = scanResult?.reference ?? jni$_.jNullReference;
    _onScanResult(
      reference.pointer,
      _id_onScanResult as jni$_.JMethodIDPtr,
      i,
      _$scanResult.pointer,
    ).check();
  }

  static final _id_onBatchScanResults = _class.instanceMethodId(
    r'onBatchScanResults',
    r'(Ljava/util/List;)V',
  );

  static final _onBatchScanResults =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onBatchScanResults(java.util.List<android.bluetooth.le.ScanResult> list)`
  void onBatchScanResults(jni$_.JList<ScanResult?>? list) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    _onBatchScanResults(
      reference.pointer,
      _id_onBatchScanResults as jni$_.JMethodIDPtr,
      _$list.pointer,
    ).check();
  }

  static final _id_onScanFailed = _class.instanceMethodId(
    r'onScanFailed',
    r'(I)V',
  );

  static final _onScanFailed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void onScanFailed(int i)`
  void onScanFailed(int i) {
    _onScanFailed(
      reference.pointer,
      _id_onScanFailed as jni$_.JMethodIDPtr,
      i,
    ).check();
  }
}

final class $ScanCallback$NullableType extends jni$_.JObjType<ScanCallback?> {
  @jni$_.internal
  const $ScanCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/ScanCallback;';

  @jni$_.internal
  @core$_.override
  ScanCallback? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : ScanCallback.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ScanCallback?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ScanCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanCallback$NullableType) &&
        other is $ScanCallback$NullableType;
  }
}

final class $ScanCallback$Type extends jni$_.JObjType<ScanCallback> {
  @jni$_.internal
  const $ScanCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/le/ScanCallback;';

  @jni$_.internal
  @core$_.override
  ScanCallback fromReference(jni$_.JReference reference) =>
      ScanCallback.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ScanCallback?> get nullableType =>
      const $ScanCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ScanCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanCallback$Type) &&
        other is $ScanCallback$Type;
  }
}

/// from: `android.content.Context$BindServiceFlags`
class Context$BindServiceFlags extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Context$BindServiceFlags> $type;

  @jni$_.internal
  Context$BindServiceFlags.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/content/Context$BindServiceFlags',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Context$BindServiceFlags$NullableType();
  static const type = $Context$BindServiceFlags$Type();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/Context$BindServiceFlags;',
  );

  static final _of =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int64,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `static public android.content.Context$BindServiceFlags of(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static Context$BindServiceFlags? of(int j) {
    return _of(
      _class.reference.pointer,
      _id_of as jni$_.JMethodIDPtr,
      j,
    ).object<Context$BindServiceFlags?>(
      const $Context$BindServiceFlags$NullableType(),
    );
  }
}

final class $Context$BindServiceFlags$NullableType
    extends jni$_.JObjType<Context$BindServiceFlags?> {
  @jni$_.internal
  const $Context$BindServiceFlags$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context$BindServiceFlags;';

  @jni$_.internal
  @core$_.override
  Context$BindServiceFlags? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : Context$BindServiceFlags.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context$BindServiceFlags?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$BindServiceFlags$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$BindServiceFlags$NullableType) &&
        other is $Context$BindServiceFlags$NullableType;
  }
}

final class $Context$BindServiceFlags$Type
    extends jni$_.JObjType<Context$BindServiceFlags> {
  @jni$_.internal
  const $Context$BindServiceFlags$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context$BindServiceFlags;';

  @jni$_.internal
  @core$_.override
  Context$BindServiceFlags fromReference(jni$_.JReference reference) =>
      Context$BindServiceFlags.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context$BindServiceFlags?> get nullableType =>
      const $Context$BindServiceFlags$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$BindServiceFlags$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$BindServiceFlags$Type) &&
        other is $Context$BindServiceFlags$Type;
  }
}

/// from: `android.content.Context`
class Context extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Context> $type;

  @jni$_.internal
  Context.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/Context');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Context$NullableType();
  static const type = $Context$Type();
  static final _id_ACCESSIBILITY_SERVICE = _class.staticFieldId(
    r'ACCESSIBILITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESSIBILITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESSIBILITY_SERVICE =>
      _id_ACCESSIBILITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCOUNT_SERVICE = _class.staticFieldId(
    r'ACCOUNT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCOUNT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCOUNT_SERVICE =>
      _id_ACCOUNT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTIVITY_SERVICE = _class.staticFieldId(
    r'ACTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTIVITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTIVITY_SERVICE =>
      _id_ACTIVITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ALARM_SERVICE = _class.staticFieldId(
    r'ALARM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ALARM_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ALARM_SERVICE =>
      _id_ALARM_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APPWIDGET_SERVICE = _class.staticFieldId(
    r'APPWIDGET_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPWIDGET_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPWIDGET_SERVICE =>
      _id_APPWIDGET_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APP_OPS_SERVICE = _class.staticFieldId(
    r'APP_OPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APP_OPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APP_OPS_SERVICE =>
      _id_APP_OPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APP_SEARCH_SERVICE = _class.staticFieldId(
    r'APP_SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APP_SEARCH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APP_SEARCH_SERVICE =>
      _id_APP_SEARCH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_SERVICE = _class.staticFieldId(
    r'AUDIO_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_SERVICE =>
      _id_AUDIO_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BATTERY_SERVICE = _class.staticFieldId(
    r'BATTERY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BATTERY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BATTERY_SERVICE =>
      _id_BATTERY_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int BIND_ABOVE_CLIENT`
  static const BIND_ABOVE_CLIENT = 8;

  /// from: `static public final int BIND_ADJUST_WITH_ACTIVITY`
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: `static public final int BIND_ALLOW_ACTIVITY_STARTS`
  static const BIND_ALLOW_ACTIVITY_STARTS = 512;

  /// from: `static public final int BIND_ALLOW_OOM_MANAGEMENT`
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: `static public final int BIND_AUTO_CREATE`
  static const BIND_AUTO_CREATE = 1;

  /// from: `static public final int BIND_DEBUG_UNBIND`
  static const BIND_DEBUG_UNBIND = 2;

  /// from: `static public final int BIND_EXTERNAL_SERVICE`
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: `static public final long BIND_EXTERNAL_SERVICE_LONG`
  static const BIND_EXTERNAL_SERVICE_LONG = 4611686018427387904;

  /// from: `static public final int BIND_IMPORTANT`
  static const BIND_IMPORTANT = 64;

  /// from: `static public final int BIND_INCLUDE_CAPABILITIES`
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: `static public final int BIND_NOT_FOREGROUND`
  static const BIND_NOT_FOREGROUND = 4;

  /// from: `static public final int BIND_NOT_PERCEPTIBLE`
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: `static public final int BIND_PACKAGE_ISOLATED_PROCESS`
  static const BIND_PACKAGE_ISOLATED_PROCESS = 16384;

  /// from: `static public final int BIND_SHARED_ISOLATED_PROCESS`
  static const BIND_SHARED_ISOLATED_PROCESS = 8192;

  /// from: `static public final int BIND_WAIVE_PRIORITY`
  static const BIND_WAIVE_PRIORITY = 32;
  static final _id_BIOMETRIC_SERVICE = _class.staticFieldId(
    r'BIOMETRIC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIOMETRIC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIOMETRIC_SERVICE =>
      _id_BIOMETRIC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BLOB_STORE_SERVICE = _class.staticFieldId(
    r'BLOB_STORE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLOB_STORE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLOB_STORE_SERVICE =>
      _id_BLOB_STORE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BLUETOOTH_SERVICE = _class.staticFieldId(
    r'BLUETOOTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLUETOOTH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLUETOOTH_SERVICE =>
      _id_BLUETOOTH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BUGREPORT_SERVICE = _class.staticFieldId(
    r'BUGREPORT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BUGREPORT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BUGREPORT_SERVICE =>
      _id_BUGREPORT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CAMERA_SERVICE = _class.staticFieldId(
    r'CAMERA_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAMERA_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAMERA_SERVICE =>
      _id_CAMERA_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CAPTIONING_SERVICE = _class.staticFieldId(
    r'CAPTIONING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAPTIONING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAPTIONING_SERVICE =>
      _id_CAPTIONING_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CARRIER_CONFIG_SERVICE = _class.staticFieldId(
    r'CARRIER_CONFIG_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CARRIER_CONFIG_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CARRIER_CONFIG_SERVICE =>
      _id_CARRIER_CONFIG_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CLIPBOARD_SERVICE = _class.staticFieldId(
    r'CLIPBOARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CLIPBOARD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CLIPBOARD_SERVICE =>
      _id_CLIPBOARD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_COMPANION_DEVICE_SERVICE = _class.staticFieldId(
    r'COMPANION_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String COMPANION_DEVICE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get COMPANION_DEVICE_SERVICE =>
      _id_COMPANION_DEVICE_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_CONNECTIVITY_DIAGNOSTICS_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_DIAGNOSTICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONNECTIVITY_DIAGNOSTICS_SERVICE =>
      _id_CONNECTIVITY_DIAGNOSTICS_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_CONNECTIVITY_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONNECTIVITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONNECTIVITY_SERVICE =>
      _id_CONNECTIVITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONSUMER_IR_SERVICE = _class.staticFieldId(
    r'CONSUMER_IR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONSUMER_IR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONSUMER_IR_SERVICE =>
      _id_CONSUMER_IR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTACT_KEYS_SERVICE = _class.staticFieldId(
    r'CONTACT_KEYS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTACT_KEYS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTACT_KEYS_SERVICE =>
      _id_CONTACT_KEYS_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int CONTEXT_IGNORE_SECURITY`
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: `static public final int CONTEXT_INCLUDE_CODE`
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: `static public final int CONTEXT_RESTRICTED`
  static const CONTEXT_RESTRICTED = 4;
  static final _id_CREDENTIAL_SERVICE = _class.staticFieldId(
    r'CREDENTIAL_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CREDENTIAL_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CREDENTIAL_SERVICE =>
      _id_CREDENTIAL_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CROSS_PROFILE_APPS_SERVICE = _class.staticFieldId(
    r'CROSS_PROFILE_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CROSS_PROFILE_APPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CROSS_PROFILE_APPS_SERVICE =>
      _id_CROSS_PROFILE_APPS_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  /// from: `static public final int DEVICE_ID_DEFAULT`
  static const DEVICE_ID_DEFAULT = 0;

  /// from: `static public final int DEVICE_ID_INVALID`
  static const DEVICE_ID_INVALID = -1;
  static final _id_DEVICE_LOCK_SERVICE = _class.staticFieldId(
    r'DEVICE_LOCK_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEVICE_LOCK_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEVICE_LOCK_SERVICE =>
      _id_DEVICE_LOCK_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DEVICE_POLICY_SERVICE = _class.staticFieldId(
    r'DEVICE_POLICY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEVICE_POLICY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEVICE_POLICY_SERVICE =>
      _id_DEVICE_POLICY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_HASH_SERVICE = _class.staticFieldId(
    r'DISPLAY_HASH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_HASH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_HASH_SERVICE =>
      _id_DISPLAY_HASH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_SERVICE = _class.staticFieldId(
    r'DISPLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_SERVICE =>
      _id_DISPLAY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DOMAIN_VERIFICATION_SERVICE = _class.staticFieldId(
    r'DOMAIN_VERIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DOMAIN_VERIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DOMAIN_VERIFICATION_SERVICE =>
      _id_DOMAIN_VERIFICATION_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_DOWNLOAD_SERVICE = _class.staticFieldId(
    r'DOWNLOAD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DOWNLOAD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DOWNLOAD_SERVICE =>
      _id_DOWNLOAD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DROPBOX_SERVICE = _class.staticFieldId(
    r'DROPBOX_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DROPBOX_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DROPBOX_SERVICE =>
      _id_DROPBOX_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_EUICC_SERVICE = _class.staticFieldId(
    r'EUICC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EUICC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EUICC_SERVICE =>
      _id_EUICC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_FILE_INTEGRITY_SERVICE = _class.staticFieldId(
    r'FILE_INTEGRITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FILE_INTEGRITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FILE_INTEGRITY_SERVICE =>
      _id_FILE_INTEGRITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_FINGERPRINT_SERVICE = _class.staticFieldId(
    r'FINGERPRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FINGERPRINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FINGERPRINT_SERVICE =>
      _id_FINGERPRINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_GAME_SERVICE = _class.staticFieldId(
    r'GAME_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GAME_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GAME_SERVICE =>
      _id_GAME_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_GRAMMATICAL_INFLECTION_SERVICE = _class.staticFieldId(
    r'GRAMMATICAL_INFLECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GRAMMATICAL_INFLECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GRAMMATICAL_INFLECTION_SERVICE =>
      _id_GRAMMATICAL_INFLECTION_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_HARDWARE_PROPERTIES_SERVICE = _class.staticFieldId(
    r'HARDWARE_PROPERTIES_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HARDWARE_PROPERTIES_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get HARDWARE_PROPERTIES_SERVICE =>
      _id_HARDWARE_PROPERTIES_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_HEALTHCONNECT_SERVICE = _class.staticFieldId(
    r'HEALTHCONNECT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HEALTHCONNECT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get HEALTHCONNECT_SERVICE =>
      _id_HEALTHCONNECT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_INPUT_METHOD_SERVICE = _class.staticFieldId(
    r'INPUT_METHOD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INPUT_METHOD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INPUT_METHOD_SERVICE =>
      _id_INPUT_METHOD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_INPUT_SERVICE = _class.staticFieldId(
    r'INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INPUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INPUT_SERVICE =>
      _id_INPUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_IPSEC_SERVICE = _class.staticFieldId(
    r'IPSEC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IPSEC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IPSEC_SERVICE =>
      _id_IPSEC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_JOB_SCHEDULER_SERVICE = _class.staticFieldId(
    r'JOB_SCHEDULER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String JOB_SCHEDULER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get JOB_SCHEDULER_SERVICE =>
      _id_JOB_SCHEDULER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_KEYGUARD_SERVICE = _class.staticFieldId(
    r'KEYGUARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String KEYGUARD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get KEYGUARD_SERVICE =>
      _id_KEYGUARD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LAUNCHER_APPS_SERVICE = _class.staticFieldId(
    r'LAUNCHER_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LAUNCHER_APPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAUNCHER_APPS_SERVICE =>
      _id_LAUNCHER_APPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LAYOUT_INFLATER_SERVICE = _class.staticFieldId(
    r'LAYOUT_INFLATER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LAYOUT_INFLATER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAYOUT_INFLATER_SERVICE =>
      _id_LAYOUT_INFLATER_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_LOCALE_SERVICE = _class.staticFieldId(
    r'LOCALE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCALE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCALE_SERVICE =>
      _id_LOCALE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LOCATION_SERVICE = _class.staticFieldId(
    r'LOCATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCATION_SERVICE =>
      _id_LOCATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_COMMUNICATION_SERVICE = _class.staticFieldId(
    r'MEDIA_COMMUNICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_COMMUNICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_COMMUNICATION_SERVICE =>
      _id_MEDIA_COMMUNICATION_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MEDIA_METRICS_SERVICE = _class.staticFieldId(
    r'MEDIA_METRICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_METRICS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_METRICS_SERVICE =>
      _id_MEDIA_METRICS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_PROJECTION_SERVICE = _class.staticFieldId(
    r'MEDIA_PROJECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_PROJECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_PROJECTION_SERVICE =>
      _id_MEDIA_PROJECTION_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MEDIA_ROUTER_SERVICE = _class.staticFieldId(
    r'MEDIA_ROUTER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_ROUTER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_ROUTER_SERVICE =>
      _id_MEDIA_ROUTER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_SESSION_SERVICE = _class.staticFieldId(
    r'MEDIA_SESSION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_SESSION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_SESSION_SERVICE =>
      _id_MEDIA_SESSION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MIDI_SERVICE = _class.staticFieldId(
    r'MIDI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MIDI_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MIDI_SERVICE =>
      _id_MIDI_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int MODE_APPEND`
  static const MODE_APPEND = 32768;

  /// from: `static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING`
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: `static public final int MODE_MULTI_PROCESS`
  static const MODE_MULTI_PROCESS = 4;

  /// from: `static public final int MODE_NO_LOCALIZED_COLLATORS`
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: `static public final int MODE_PRIVATE`
  static const MODE_PRIVATE = 0;

  /// from: `static public final int MODE_WORLD_READABLE`
  static const MODE_WORLD_READABLE = 1;

  /// from: `static public final int MODE_WORLD_WRITEABLE`
  static const MODE_WORLD_WRITEABLE = 2;
  static final _id_NETWORK_STATS_SERVICE = _class.staticFieldId(
    r'NETWORK_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NETWORK_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NETWORK_STATS_SERVICE =>
      _id_NETWORK_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NFC_SERVICE = _class.staticFieldId(
    r'NFC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NFC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NFC_SERVICE =>
      _id_NFC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NOTIFICATION_SERVICE = _class.staticFieldId(
    r'NOTIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NOTIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NOTIFICATION_SERVICE =>
      _id_NOTIFICATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NSD_SERVICE = _class.staticFieldId(
    r'NSD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NSD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NSD_SERVICE =>
      _id_NSD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_OVERLAY_SERVICE = _class.staticFieldId(
    r'OVERLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String OVERLAY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get OVERLAY_SERVICE =>
      _id_OVERLAY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PEOPLE_SERVICE = _class.staticFieldId(
    r'PEOPLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PEOPLE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PEOPLE_SERVICE =>
      _id_PEOPLE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PERFORMANCE_HINT_SERVICE = _class.staticFieldId(
    r'PERFORMANCE_HINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERFORMANCE_HINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PERFORMANCE_HINT_SERVICE =>
      _id_PERFORMANCE_HINT_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_PERSISTENT_DATA_BLOCK_SERVICE = _class.staticFieldId(
    r'PERSISTENT_DATA_BLOCK_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERSISTENT_DATA_BLOCK_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PERSISTENT_DATA_BLOCK_SERVICE =>
      _id_PERSISTENT_DATA_BLOCK_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_POWER_SERVICE = _class.staticFieldId(
    r'POWER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String POWER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get POWER_SERVICE =>
      _id_POWER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PRINT_SERVICE = _class.staticFieldId(
    r'PRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PRINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PRINT_SERVICE =>
      _id_PRINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PROFILING_SERVICE = _class.staticFieldId(
    r'PROFILING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROFILING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PROFILING_SERVICE =>
      _id_PROFILING_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int RECEIVER_EXPORTED`
  static const RECEIVER_EXPORTED = 2;

  /// from: `static public final int RECEIVER_NOT_EXPORTED`
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: `static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS`
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;
  static final _id_RESTRICTIONS_SERVICE = _class.staticFieldId(
    r'RESTRICTIONS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RESTRICTIONS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RESTRICTIONS_SERVICE =>
      _id_RESTRICTIONS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ROLE_SERVICE = _class.staticFieldId(
    r'ROLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ROLE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ROLE_SERVICE =>
      _id_ROLE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SEARCH_SERVICE = _class.staticFieldId(
    r'SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SEARCH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SEARCH_SERVICE =>
      _id_SEARCH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SECURITY_STATE_SERVICE = _class.staticFieldId(
    r'SECURITY_STATE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SECURITY_STATE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SECURITY_STATE_SERVICE =>
      _id_SECURITY_STATE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SENSOR_SERVICE = _class.staticFieldId(
    r'SENSOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SENSOR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SENSOR_SERVICE =>
      _id_SENSOR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SHORTCUT_SERVICE = _class.staticFieldId(
    r'SHORTCUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SHORTCUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SHORTCUT_SERVICE =>
      _id_SHORTCUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STATUS_BAR_SERVICE = _class.staticFieldId(
    r'STATUS_BAR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STATUS_BAR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STATUS_BAR_SERVICE =>
      _id_STATUS_BAR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STORAGE_SERVICE = _class.staticFieldId(
    r'STORAGE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STORAGE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STORAGE_SERVICE =>
      _id_STORAGE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STORAGE_STATS_SERVICE = _class.staticFieldId(
    r'STORAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STORAGE_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STORAGE_STATS_SERVICE =>
      _id_STORAGE_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SYSTEM_HEALTH_SERVICE = _class.staticFieldId(
    r'SYSTEM_HEALTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYSTEM_HEALTH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SYSTEM_HEALTH_SERVICE =>
      _id_SYSTEM_HEALTH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELECOM_SERVICE = _class.staticFieldId(
    r'TELECOM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELECOM_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELECOM_SERVICE =>
      _id_TELECOM_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_IMS_SERVICE = _class.staticFieldId(
    r'TELEPHONY_IMS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_IMS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_IMS_SERVICE =>
      _id_TELEPHONY_IMS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_SERVICE =>
      _id_TELEPHONY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_SUBSCRIPTION_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SUBSCRIPTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_SUBSCRIPTION_SERVICE =>
      _id_TELEPHONY_SUBSCRIPTION_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_TEXT_CLASSIFICATION_SERVICE = _class.staticFieldId(
    r'TEXT_CLASSIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_CLASSIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_CLASSIFICATION_SERVICE =>
      _id_TEXT_CLASSIFICATION_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_TEXT_SERVICES_MANAGER_SERVICE = _class.staticFieldId(
    r'TEXT_SERVICES_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_SERVICES_MANAGER_SERVICE =>
      _id_TEXT_SERVICES_MANAGER_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_TV_INPUT_SERVICE = _class.staticFieldId(
    r'TV_INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TV_INPUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TV_INPUT_SERVICE =>
      _id_TV_INPUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TV_INTERACTIVE_APP_SERVICE = _class.staticFieldId(
    r'TV_INTERACTIVE_APP_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TV_INTERACTIVE_APP_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TV_INTERACTIVE_APP_SERVICE =>
      _id_TV_INTERACTIVE_APP_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_UI_MODE_SERVICE = _class.staticFieldId(
    r'UI_MODE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String UI_MODE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get UI_MODE_SERVICE =>
      _id_UI_MODE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USAGE_STATS_SERVICE = _class.staticFieldId(
    r'USAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USAGE_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USAGE_STATS_SERVICE =>
      _id_USAGE_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USB_SERVICE = _class.staticFieldId(
    r'USB_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USB_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USB_SERVICE =>
      _id_USB_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USER_SERVICE = _class.staticFieldId(
    r'USER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USER_SERVICE =>
      _id_USER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VIBRATOR_MANAGER_SERVICE = _class.staticFieldId(
    r'VIBRATOR_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATOR_MANAGER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIBRATOR_MANAGER_SERVICE =>
      _id_VIBRATOR_MANAGER_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_VIBRATOR_SERVICE = _class.staticFieldId(
    r'VIBRATOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATOR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIBRATOR_SERVICE =>
      _id_VIBRATOR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VIRTUAL_DEVICE_SERVICE = _class.staticFieldId(
    r'VIRTUAL_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIRTUAL_DEVICE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIRTUAL_DEVICE_SERVICE =>
      _id_VIRTUAL_DEVICE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VPN_MANAGEMENT_SERVICE = _class.staticFieldId(
    r'VPN_MANAGEMENT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VPN_MANAGEMENT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VPN_MANAGEMENT_SERVICE =>
      _id_VPN_MANAGEMENT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WALLPAPER_SERVICE = _class.staticFieldId(
    r'WALLPAPER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WALLPAPER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WALLPAPER_SERVICE =>
      _id_WALLPAPER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_AWARE_SERVICE = _class.staticFieldId(
    r'WIFI_AWARE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_AWARE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_AWARE_SERVICE =>
      _id_WIFI_AWARE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_P2P_SERVICE = _class.staticFieldId(
    r'WIFI_P2P_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_P2P_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_P2P_SERVICE =>
      _id_WIFI_P2P_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_RTT_RANGING_SERVICE = _class.staticFieldId(
    r'WIFI_RTT_RANGING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_RTT_RANGING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_RTT_RANGING_SERVICE =>
      _id_WIFI_RTT_RANGING_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_WIFI_SERVICE = _class.staticFieldId(
    r'WIFI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_SERVICE =>
      _id_WIFI_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WINDOW_SERVICE = _class.staticFieldId(
    r'WINDOW_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WINDOW_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WINDOW_SERVICE =>
      _id_WINDOW_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_getAssets = _class.instanceMethodId(
    r'getAssets',
    r'()Landroid/content/res/AssetManager;',
  );

  static final _getAssets =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.res.AssetManager getAssets()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAssets() {
    return _getAssets(
      reference.pointer,
      _id_getAssets as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getResources = _class.instanceMethodId(
    r'getResources',
    r'()Landroid/content/res/Resources;',
  );

  static final _getResources =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.res.Resources getResources()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getResources() {
    return _getResources(
      reference.pointer,
      _id_getResources as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageManager = _class.instanceMethodId(
    r'getPackageManager',
    r'()Landroid/content/pm/PackageManager;',
  );

  static final _getPackageManager =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.pm.PackageManager getPackageManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getPackageManager() {
    return _getPackageManager(
      reference.pointer,
      _id_getPackageManager as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getContentResolver = _class.instanceMethodId(
    r'getContentResolver',
    r'()Landroid/content/ContentResolver;',
  );

  static final _getContentResolver =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.ContentResolver getContentResolver()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentResolver() {
    return _getContentResolver(
      reference.pointer,
      _id_getContentResolver as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMainLooper = _class.instanceMethodId(
    r'getMainLooper',
    r'()Landroid/os/Looper;',
  );

  static final _getMainLooper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.os.Looper getMainLooper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMainLooper() {
    return _getMainLooper(
      reference.pointer,
      _id_getMainLooper as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMainExecutor = _class.instanceMethodId(
    r'getMainExecutor',
    r'()Ljava/util/concurrent/Executor;',
  );

  static final _getMainExecutor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.concurrent.Executor getMainExecutor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMainExecutor() {
    return _getMainExecutor(
      reference.pointer,
      _id_getMainExecutor as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getApplicationContext = _class.instanceMethodId(
    r'getApplicationContext',
    r'()Landroid/content/Context;',
  );

  static final _getApplicationContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.Context getApplicationContext()`
  /// The returned object must be released after use, by calling the [release] method.
  Context? getApplicationContext() {
    return _getApplicationContext(
      reference.pointer,
      _id_getApplicationContext as jni$_.JMethodIDPtr,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r'registerComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _registerComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void registerComponentCallbacks(jni$_.JObject? componentCallbacks) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _registerComponentCallbacks(
      reference.pointer,
      _id_registerComponentCallbacks as jni$_.JMethodIDPtr,
      _$componentCallbacks.pointer,
    ).check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r'unregisterComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _unregisterComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void unregisterComponentCallbacks(jni$_.JObject? componentCallbacks) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterComponentCallbacks(
      reference.pointer,
      _id_unregisterComponentCallbacks as jni$_.JMethodIDPtr,
      _$componentCallbacks.pointer,
    ).check();
  }

  static final _id_getText = _class.instanceMethodId(
    r'getText',
    r'(I)Ljava/lang/CharSequence;',
  );

  static final _getText =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public final java.lang.CharSequence getText(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getText(int i) {
    return _getText(
      reference.pointer,
      _id_getText as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getString = _class.instanceMethodId(
    r'getString',
    r'(I)Ljava/lang/String;',
  );

  static final _getString =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public final java.lang.String getString(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString(int i) {
    return _getString(
      reference.pointer,
      _id_getString as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getString$1 = _class.instanceMethodId(
    r'getString',
    r'(I[Ljava/lang/Object;)Ljava/lang/String;',
  );

  static final _getString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final java.lang.String getString(int i, java.lang.Object[] objects)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString$1(int i, jni$_.JArray<jni$_.JObject?>? objects) {
    final _$objects = objects?.reference ?? jni$_.jNullReference;
    return _getString$1(
      reference.pointer,
      _id_getString$1 as jni$_.JMethodIDPtr,
      i,
      _$objects.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getColor = _class.instanceMethodId(r'getColor', r'(I)I');

  static final _getColor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public final int getColor(int i)`
  int getColor(int i) {
    return _getColor(
      reference.pointer,
      _id_getColor as jni$_.JMethodIDPtr,
      i,
    ).integer;
  }

  static final _id_getDrawable = _class.instanceMethodId(
    r'getDrawable',
    r'(I)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawable =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public final android.graphics.drawable.Drawable getDrawable(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDrawable(int i) {
    return _getDrawable(
      reference.pointer,
      _id_getDrawable as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getColorStateList = _class.instanceMethodId(
    r'getColorStateList',
    r'(I)Landroid/content/res/ColorStateList;',
  );

  static final _getColorStateList =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public final android.content.res.ColorStateList getColorStateList(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getColorStateList(int i) {
    return _getColorStateList(
      reference.pointer,
      _id_getColorStateList as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setTheme = _class.instanceMethodId(r'setTheme', r'(I)V');

  static final _setTheme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public abstract void setTheme(int i)`
  void setTheme(int i) {
    _setTheme(reference.pointer, _id_setTheme as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_getTheme = _class.instanceMethodId(
    r'getTheme',
    r'()Landroid/content/res/Resources$Theme;',
  );

  static final _getTheme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.res.Resources$Theme getTheme()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getTheme() {
    return _getTheme(
      reference.pointer,
      _id_getTheme as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'([I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes(jni$_.JIntArray? is$) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes(
      reference.pointer,
      _id_obtainStyledAttributes as jni$_.JMethodIDPtr,
      _$is$.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$1 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(I[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$1(int i, jni$_.JIntArray? is$) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$1(
      reference.pointer,
      _id_obtainStyledAttributes$1 as jni$_.JMethodIDPtr,
      i,
      _$is$.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$2 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$2(
    jni$_.JObject? attributeSet,
    jni$_.JIntArray? is$,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$2(
      reference.pointer,
      _id_obtainStyledAttributes$2 as jni$_.JMethodIDPtr,
      _$attributeSet.pointer,
      _$is$.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$3 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$3(
    jni$_.JObject? attributeSet,
    jni$_.JIntArray? is$,
    int i,
    int i1,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$3(
      reference.pointer,
      _id_obtainStyledAttributes$3 as jni$_.JMethodIDPtr,
      _$attributeSet.pointer,
      _$is$.pointer,
      i,
      i1,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getClassLoader = _class.instanceMethodId(
    r'getClassLoader',
    r'()Ljava/lang/ClassLoader;',
  );

  static final _getClassLoader =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.ClassLoader getClassLoader()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getClassLoader() {
    return _getClassLoader(
      reference.pointer,
      _id_getClassLoader as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageName = _class.instanceMethodId(
    r'getPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getPackageName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getPackageName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageName() {
    return _getPackageName(
      reference.pointer,
      _id_getPackageName as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getOpPackageName = _class.instanceMethodId(
    r'getOpPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getOpPackageName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getOpPackageName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getOpPackageName() {
    return _getOpPackageName(
      reference.pointer,
      _id_getOpPackageName as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAttributionTag = _class.instanceMethodId(
    r'getAttributionTag',
    r'()Ljava/lang/String;',
  );

  static final _getAttributionTag =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getAttributionTag()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAttributionTag() {
    return _getAttributionTag(
      reference.pointer,
      _id_getAttributionTag as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAttributionSource = _class.instanceMethodId(
    r'getAttributionSource',
    r'()Landroid/content/AttributionSource;',
  );

  static final _getAttributionSource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.AttributionSource getAttributionSource()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAttributionSource() {
    return _getAttributionSource(
      reference.pointer,
      _id_getAttributionSource as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getParams = _class.instanceMethodId(
    r'getParams',
    r'()Landroid/content/ContextParams;',
  );

  static final _getParams =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.ContextParams getParams()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParams() {
    return _getParams(
      reference.pointer,
      _id_getParams as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getApplicationInfo = _class.instanceMethodId(
    r'getApplicationInfo',
    r'()Landroid/content/pm/ApplicationInfo;',
  );

  static final _getApplicationInfo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.pm.ApplicationInfo getApplicationInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getApplicationInfo() {
    return _getApplicationInfo(
      reference.pointer,
      _id_getApplicationInfo as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageResourcePath = _class.instanceMethodId(
    r'getPackageResourcePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageResourcePath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getPackageResourcePath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageResourcePath() {
    return _getPackageResourcePath(
      reference.pointer,
      _id_getPackageResourcePath as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPackageCodePath = _class.instanceMethodId(
    r'getPackageCodePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageCodePath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getPackageCodePath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageCodePath() {
    return _getPackageCodePath(
      reference.pointer,
      _id_getPackageCodePath as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getSharedPreferences = _class.instanceMethodId(
    r'getSharedPreferences',
    r'(Ljava/lang/String;I)Landroid/content/SharedPreferences;',
  );

  static final _getSharedPreferences =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSharedPreferences(jni$_.JString? string, int i) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSharedPreferences(
      reference.pointer,
      _id_getSharedPreferences as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_moveSharedPreferencesFrom = _class.instanceMethodId(
    r'moveSharedPreferencesFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveSharedPreferencesFrom =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)`
  bool moveSharedPreferencesFrom(Context? context, jni$_.JString? string) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _moveSharedPreferencesFrom(
      reference.pointer,
      _id_moveSharedPreferencesFrom as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$string.pointer,
    ).boolean;
  }

  static final _id_deleteSharedPreferences = _class.instanceMethodId(
    r'deleteSharedPreferences',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteSharedPreferences =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean deleteSharedPreferences(java.lang.String string)`
  bool deleteSharedPreferences(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteSharedPreferences(
      reference.pointer,
      _id_deleteSharedPreferences as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).boolean;
  }

  static final _id_openFileInput = _class.instanceMethodId(
    r'openFileInput',
    r'(Ljava/lang/String;)Ljava/io/FileInputStream;',
  );

  static final _openFileInput =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract java.io.FileInputStream openFileInput(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openFileInput(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _openFileInput(
      reference.pointer,
      _id_openFileInput as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openFileOutput = _class.instanceMethodId(
    r'openFileOutput',
    r'(Ljava/lang/String;I)Ljava/io/FileOutputStream;',
  );

  static final _openFileOutput =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openFileOutput(jni$_.JString? string, int i) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _openFileOutput(
      reference.pointer,
      _id_openFileOutput as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_deleteFile = _class.instanceMethodId(
    r'deleteFile',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteFile =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean deleteFile(java.lang.String string)`
  bool deleteFile(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteFile(
      reference.pointer,
      _id_deleteFile as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).boolean;
  }

  static final _id_getFileStreamPath = _class.instanceMethodId(
    r'getFileStreamPath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getFileStreamPath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract java.io.File getFileStreamPath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFileStreamPath(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getFileStreamPath(
      reference.pointer,
      _id_getFileStreamPath as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDataDir = _class.instanceMethodId(
    r'getDataDir',
    r'()Ljava/io/File;',
  );

  static final _getDataDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getDataDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDataDir() {
    return _getDataDir(
      reference.pointer,
      _id_getDataDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getFilesDir = _class.instanceMethodId(
    r'getFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getFilesDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getFilesDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFilesDir() {
    return _getFilesDir(
      reference.pointer,
      _id_getFilesDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getNoBackupFilesDir = _class.instanceMethodId(
    r'getNoBackupFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getNoBackupFilesDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getNoBackupFilesDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getNoBackupFilesDir() {
    return _getNoBackupFilesDir(
      reference.pointer,
      _id_getNoBackupFilesDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalFilesDir = _class.instanceMethodId(
    r'getExternalFilesDir',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getExternalFilesDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract java.io.File getExternalFilesDir(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExternalFilesDir(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getExternalFilesDir(
      reference.pointer,
      _id_getExternalFilesDir as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalFilesDirs = _class.instanceMethodId(
    r'getExternalFilesDirs',
    r'(Ljava/lang/String;)[Ljava/io/File;',
  );

  static final _getExternalFilesDirs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalFilesDirs(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getExternalFilesDirs(
      reference.pointer,
      _id_getExternalFilesDirs as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(
        jni$_.JObjectNullableType(),
      ),
    );
  }

  static final _id_getObbDir = _class.instanceMethodId(
    r'getObbDir',
    r'()Ljava/io/File;',
  );

  static final _getObbDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getObbDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getObbDir() {
    return _getObbDir(
      reference.pointer,
      _id_getObbDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getObbDirs = _class.instanceMethodId(
    r'getObbDirs',
    r'()[Ljava/io/File;',
  );

  static final _getObbDirs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File[] getObbDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getObbDirs() {
    return _getObbDirs(
      reference.pointer,
      _id_getObbDirs as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(
        jni$_.JObjectNullableType(),
      ),
    );
  }

  static final _id_getCacheDir = _class.instanceMethodId(
    r'getCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCacheDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCacheDir() {
    return _getCacheDir(
      reference.pointer,
      _id_getCacheDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCodeCacheDir = _class.instanceMethodId(
    r'getCodeCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCodeCacheDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getCodeCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCodeCacheDir() {
    return _getCodeCacheDir(
      reference.pointer,
      _id_getCodeCacheDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalCacheDir = _class.instanceMethodId(
    r'getExternalCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getExternalCacheDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getExternalCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExternalCacheDir() {
    return _getExternalCacheDir(
      reference.pointer,
      _id_getExternalCacheDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalCacheDirs = _class.instanceMethodId(
    r'getExternalCacheDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalCacheDirs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File[] getExternalCacheDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalCacheDirs() {
    return _getExternalCacheDirs(
      reference.pointer,
      _id_getExternalCacheDirs as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(
        jni$_.JObjectNullableType(),
      ),
    );
  }

  static final _id_getExternalMediaDirs = _class.instanceMethodId(
    r'getExternalMediaDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalMediaDirs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File[] getExternalMediaDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalMediaDirs() {
    return _getExternalMediaDirs(
      reference.pointer,
      _id_getExternalMediaDirs as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(
        jni$_.JObjectNullableType(),
      ),
    );
  }

  static final _id_fileList = _class.instanceMethodId(
    r'fileList',
    r'()[Ljava/lang/String;',
  );

  static final _fileList =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String[] fileList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? fileList() {
    return _fileList(
      reference.pointer,
      _id_fileList as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<jni$_.JString?>?>(
      const jni$_.JArrayNullableType<jni$_.JString?>(
        jni$_.JStringNullableType(),
      ),
    );
  }

  static final _id_getDir = _class.instanceMethodId(
    r'getDir',
    r'(Ljava/lang/String;I)Ljava/io/File;',
  );

  static final _getDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract java.io.File getDir(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDir(jni$_.JString? string, int i) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDir(
      reference.pointer,
      _id_getDir as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openOrCreateDatabase = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openOrCreateDatabase(
    jni$_.JString? string,
    int i,
    jni$_.JObject? cursorFactory,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cursorFactory = cursorFactory?.reference ?? jni$_.jNullReference;
    return _openOrCreateDatabase(
      reference.pointer,
      _id_openOrCreateDatabase as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
      _$cursorFactory.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openOrCreateDatabase$1 = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openOrCreateDatabase$1(
    jni$_.JString? string,
    int i,
    jni$_.JObject? cursorFactory,
    jni$_.JObject? databaseErrorHandler,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cursorFactory = cursorFactory?.reference ?? jni$_.jNullReference;
    final _$databaseErrorHandler =
        databaseErrorHandler?.reference ?? jni$_.jNullReference;
    return _openOrCreateDatabase$1(
      reference.pointer,
      _id_openOrCreateDatabase$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
      _$cursorFactory.pointer,
      _$databaseErrorHandler.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_moveDatabaseFrom = _class.instanceMethodId(
    r'moveDatabaseFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveDatabaseFrom =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)`
  bool moveDatabaseFrom(Context? context, jni$_.JString? string) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _moveDatabaseFrom(
      reference.pointer,
      _id_moveDatabaseFrom as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$string.pointer,
    ).boolean;
  }

  static final _id_deleteDatabase = _class.instanceMethodId(
    r'deleteDatabase',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteDatabase =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean deleteDatabase(java.lang.String string)`
  bool deleteDatabase(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteDatabase(
      reference.pointer,
      _id_deleteDatabase as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).boolean;
  }

  static final _id_getDatabasePath = _class.instanceMethodId(
    r'getDatabasePath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getDatabasePath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract java.io.File getDatabasePath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDatabasePath(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDatabasePath(
      reference.pointer,
      _id_getDatabasePath as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_databaseList = _class.instanceMethodId(
    r'databaseList',
    r'()[Ljava/lang/String;',
  );

  static final _databaseList =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String[] databaseList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? databaseList() {
    return _databaseList(
      reference.pointer,
      _id_databaseList as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<jni$_.JString?>?>(
      const jni$_.JArrayNullableType<jni$_.JString?>(
        jni$_.JStringNullableType(),
      ),
    );
  }

  static final _id_getWallpaper = _class.instanceMethodId(
    r'getWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getWallpaper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.graphics.drawable.Drawable getWallpaper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWallpaper() {
    return _getWallpaper(
      reference.pointer,
      _id_getWallpaper as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_peekWallpaper = _class.instanceMethodId(
    r'peekWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _peekWallpaper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.graphics.drawable.Drawable peekWallpaper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? peekWallpaper() {
    return _peekWallpaper(
      reference.pointer,
      _id_peekWallpaper as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getWallpaperDesiredMinimumWidth = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumWidth',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumWidth =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract int getWallpaperDesiredMinimumWidth()`
  int getWallpaperDesiredMinimumWidth() {
    return _getWallpaperDesiredMinimumWidth(
      reference.pointer,
      _id_getWallpaperDesiredMinimumWidth as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getWallpaperDesiredMinimumHeight = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumHeight',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumHeight =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract int getWallpaperDesiredMinimumHeight()`
  int getWallpaperDesiredMinimumHeight() {
    return _getWallpaperDesiredMinimumHeight(
      reference.pointer,
      _id_getWallpaperDesiredMinimumHeight as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_setWallpaper = _class.instanceMethodId(
    r'setWallpaper',
    r'(Landroid/graphics/Bitmap;)V',
  );

  static final _setWallpaper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void setWallpaper(android.graphics.Bitmap bitmap)`
  void setWallpaper(jni$_.JObject? bitmap) {
    final _$bitmap = bitmap?.reference ?? jni$_.jNullReference;
    _setWallpaper(
      reference.pointer,
      _id_setWallpaper as jni$_.JMethodIDPtr,
      _$bitmap.pointer,
    ).check();
  }

  static final _id_setWallpaper$1 = _class.instanceMethodId(
    r'setWallpaper',
    r'(Ljava/io/InputStream;)V',
  );

  static final _setWallpaper$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void setWallpaper(java.io.InputStream inputStream)`
  void setWallpaper$1(jni$_.JObject? inputStream) {
    final _$inputStream = inputStream?.reference ?? jni$_.jNullReference;
    _setWallpaper$1(
      reference.pointer,
      _id_setWallpaper$1 as jni$_.JMethodIDPtr,
      _$inputStream.pointer,
    ).check();
  }

  static final _id_clearWallpaper = _class.instanceMethodId(
    r'clearWallpaper',
    r'()V',
  );

  static final _clearWallpaper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract void clearWallpaper()`
  void clearWallpaper() {
    _clearWallpaper(
      reference.pointer,
      _id_clearWallpaper as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;)V',
  );

  static final _startActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void startActivity(android.content.Intent intent)`
  void startActivity(jni$_.JObject? intent) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivity(
      reference.pointer,
      _id_startActivity as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).check();
  }

  static final _id_startActivity$1 = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivity$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)`
  void startActivity$1(jni$_.JObject? intent, jni$_.JObject? bundle) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivity$1(
      reference.pointer,
      _id_startActivity$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;)V',
  );

  static final _startActivities =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void startActivities(android.content.Intent[] intents)`
  void startActivities(jni$_.JArray<jni$_.JObject?>? intents) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    _startActivities(
      reference.pointer,
      _id_startActivities as jni$_.JMethodIDPtr,
      _$intents.pointer,
    ).check();
  }

  static final _id_startActivities$1 = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivities$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)`
  void startActivities$1(
    jni$_.JArray<jni$_.JObject?>? intents,
    jni$_.JObject? bundle,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivities$1(
      reference.pointer,
      _id_startActivities$1 as jni$_.JMethodIDPtr,
      _$intents.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;III)V',
  );

  static final _startIntentSender =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)`
  void startIntentSender(
    jni$_.JObject? intentSender,
    jni$_.JObject? intent,
    int i,
    int i1,
    int i2,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSender(
      reference.pointer,
      _id_startIntentSender as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      _$intent.pointer,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_startIntentSender$1 = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSender$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)`
  void startIntentSender$1(
    jni$_.JObject? intentSender,
    jni$_.JObject? intent,
    int i,
    int i1,
    int i2,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSender$1(
      reference.pointer,
      _id_startIntentSender$1 as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      _$intent.pointer,
      i,
      i1,
      i2,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendBroadcast = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendBroadcast(android.content.Intent intent)`
  void sendBroadcast(jni$_.JObject? intent) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _sendBroadcast(
      reference.pointer,
      _id_sendBroadcast as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).check();
  }

  static final _id_sendBroadcast$1 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendBroadcast$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)`
  void sendBroadcast$1(jni$_.JObject? intent, jni$_.JString? string) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendBroadcast$1(
      reference.pointer,
      _id_sendBroadcast$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
    ).check();
  }

  static final _id_sendBroadcastWithMultiplePermissions = _class
      .instanceMethodId(
        r'sendBroadcastWithMultiplePermissions',
        r'(Landroid/content/Intent;[Ljava/lang/String;)V',
      );

  static final _sendBroadcastWithMultiplePermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)`
  void sendBroadcastWithMultiplePermissions(
    jni$_.JObject? intent,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _sendBroadcastWithMultiplePermissions(
      reference.pointer,
      _id_sendBroadcastWithMultiplePermissions as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$strings.pointer,
    ).check();
  }

  static final _id_sendBroadcast$2 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendBroadcast$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)`
  void sendBroadcast$2(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendBroadcast$2(
      reference.pointer,
      _id_sendBroadcast$2 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendOrderedBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)`
  void sendOrderedBroadcast(jni$_.JObject? intent, jni$_.JString? string) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast(
      reference.pointer,
      _id_sendOrderedBroadcast as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast$1 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)`
  void sendOrderedBroadcast$1(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$1(
      reference.pointer,
      _id_sendOrderedBroadcast$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast$2 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)`
  void sendOrderedBroadcast$2(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$2(
      reference.pointer,
      _id_sendOrderedBroadcast$2 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string1.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast$3 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle1)`
  void sendOrderedBroadcast$3(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle1,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle1 = bundle1?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$3(
      reference.pointer,
      _id_sendOrderedBroadcast$3 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$bundle.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string1.pointer,
      _$bundle1.pointer,
    ).check();
  }

  static final _id_sendBroadcastAsUser = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void sendBroadcastAsUser(jni$_.JObject? intent, jni$_.JObject? userHandle) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _sendBroadcastAsUser(
      reference.pointer,
      _id_sendBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
    ).check();
  }

  static final _id_sendBroadcastAsUser$1 = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V',
  );

  static final _sendBroadcastAsUser$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)`
  void sendBroadcastAsUser$1(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendBroadcastAsUser$1(
      reference.pointer,
      _id_sendBroadcastAsUser$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
      _$string.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)`
  void sendOrderedBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
    jni$_.JString? string,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcastAsUser(
      reference.pointer,
      _id_sendOrderedBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
      _$string.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string1.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast$4 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$4 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)`
  void sendOrderedBroadcast$4(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string2,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$4(
      reference.pointer,
      _id_sendOrderedBroadcast$4 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$string1.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string2.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendStickyBroadcast = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendStickyBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendStickyBroadcast(android.content.Intent intent)`
  void sendStickyBroadcast(jni$_.JObject? intent) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcast(
      reference.pointer,
      _id_sendStickyBroadcast as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).check();
  }

  static final _id_sendStickyBroadcast$1 = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _sendStickyBroadcast$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)`
  void sendStickyBroadcast$1(jni$_.JObject? intent, jni$_.JObject? bundle) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcast$1(
      reference.pointer,
      _id_sendStickyBroadcast$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendStickyOrderedBroadcast = _class.instanceMethodId(
    r'sendStickyOrderedBroadcast',
    r'(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)`
  void sendStickyOrderedBroadcast(
    jni$_.JObject? intent,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyOrderedBroadcast(
      reference.pointer,
      _id_sendStickyOrderedBroadcast as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_removeStickyBroadcast = _class.instanceMethodId(
    r'removeStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _removeStickyBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void removeStickyBroadcast(android.content.Intent intent)`
  void removeStickyBroadcast(jni$_.JObject? intent) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _removeStickyBroadcast(
      reference.pointer,
      _id_removeStickyBroadcast as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).check();
  }

  static final _id_sendStickyBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendStickyBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void sendStickyBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcastAsUser(
      reference.pointer,
      _id_sendStickyBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
    ).check();
  }

  static final _id_sendStickyOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)`
  void sendStickyOrderedBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyOrderedBroadcastAsUser(
      reference.pointer,
      _id_sendStickyOrderedBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_removeStickyBroadcastAsUser = _class.instanceMethodId(
    r'removeStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _removeStickyBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void removeStickyBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _removeStickyBroadcastAsUser(
      reference.pointer,
      _id_removeStickyBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
    ).check();
  }

  static final _id_registerReceiver = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;',
  );

  static final _registerReceiver =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? registerReceiver(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    return _registerReceiver(
      reference.pointer,
      _id_registerReceiver as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
      _$intentFilter.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerReceiver$1 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;',
  );

  static final _registerReceiver$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? registerReceiver$1(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    int i,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    return _registerReceiver$1(
      reference.pointer,
      _id_registerReceiver$1 as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
      _$intentFilter.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerReceiver$2 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;',
  );

  static final _registerReceiver$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? registerReceiver$2(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    jni$_.JString? string,
    jni$_.JObject? handler,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _registerReceiver$2(
      reference.pointer,
      _id_registerReceiver$2 as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
      _$intentFilter.pointer,
      _$string.pointer,
      _$handler.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerReceiver$3 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;',
  );

  static final _registerReceiver$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? registerReceiver$3(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    jni$_.JString? string,
    jni$_.JObject? handler,
    int i,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _registerReceiver$3(
      reference.pointer,
      _id_registerReceiver$3 as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
      _$intentFilter.pointer,
      _$string.pointer,
      _$handler.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_unregisterReceiver = _class.instanceMethodId(
    r'unregisterReceiver',
    r'(Landroid/content/BroadcastReceiver;)V',
  );

  static final _unregisterReceiver =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)`
  void unregisterReceiver(jni$_.JObject? broadcastReceiver) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    _unregisterReceiver(
      reference.pointer,
      _id_unregisterReceiver as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
    ).check();
  }

  static final _id_startService = _class.instanceMethodId(
    r'startService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.content.ComponentName startService(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startService(jni$_.JObject? intent) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startService(
      reference.pointer,
      _id_startService as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startForegroundService = _class.instanceMethodId(
    r'startForegroundService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startForegroundService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startForegroundService(jni$_.JObject? intent) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startForegroundService(
      reference.pointer,
      _id_startForegroundService as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_stopService = _class.instanceMethodId(
    r'stopService',
    r'(Landroid/content/Intent;)Z',
  );

  static final _stopService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean stopService(android.content.Intent intent)`
  bool stopService(jni$_.JObject? intent) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _stopService(
      reference.pointer,
      _id_stopService as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).boolean;
  }

  static final _id_bindService = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z',
  );

  static final _bindService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)`
  bool bindService(
    jni$_.JObject? intent,
    jni$_.JObject? serviceConnection,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService(
      reference.pointer,
      _id_bindService as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$serviceConnection.pointer,
      i,
    ).boolean;
  }

  static final _id_bindService$1 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;)Z',
  );

  static final _bindService$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags)`
  bool bindService$1(
    jni$_.JObject? intent,
    jni$_.JObject? serviceConnection,
    Context$BindServiceFlags? bindServiceFlags,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags =
        bindServiceFlags?.reference ?? jni$_.jNullReference;
    return _bindService$1(
      reference.pointer,
      _id_bindService$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$serviceConnection.pointer,
      _$bindServiceFlags.pointer,
    ).boolean;
  }

  static final _id_bindService$2 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindService$2(
    jni$_.JObject? intent,
    int i,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService$2(
      reference.pointer,
      _id_bindService$2 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
      _$executor.pointer,
      _$serviceConnection.pointer,
    ).boolean;
  }

  static final _id_bindService$3 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindService$3(
    jni$_.JObject? intent,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags =
        bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService$3(
      reference.pointer,
      _id_bindService$3 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bindServiceFlags.pointer,
      _$executor.pointer,
      _$serviceConnection.pointer,
    ).boolean;
  }

  static final _id_bindIsolatedService = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindIsolatedService(
    jni$_.JObject? intent,
    int i,
    jni$_.JString? string,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindIsolatedService(
      reference.pointer,
      _id_bindIsolatedService as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
      _$string.pointer,
      _$executor.pointer,
      _$serviceConnection.pointer,
    ).boolean;
  }

  static final _id_bindIsolatedService$1 = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindIsolatedService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindIsolatedService$1(
    jni$_.JObject? intent,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JString? string,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags =
        bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindIsolatedService$1(
      reference.pointer,
      _id_bindIsolatedService$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bindServiceFlags.pointer,
      _$string.pointer,
      _$executor.pointer,
      _$serviceConnection.pointer,
    ).boolean;
  }

  static final _id_bindServiceAsUser = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)`
  bool bindServiceAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? serviceConnection,
    int i,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    return _bindServiceAsUser(
      reference.pointer,
      _id_bindServiceAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$serviceConnection.pointer,
      i,
      _$userHandle.pointer,
    ).boolean;
  }

  static final _id_bindServiceAsUser$1 = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;Landroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags, android.os.UserHandle userHandle)`
  bool bindServiceAsUser$1(
    jni$_.JObject? intent,
    jni$_.JObject? serviceConnection,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags =
        bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    return _bindServiceAsUser$1(
      reference.pointer,
      _id_bindServiceAsUser$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$serviceConnection.pointer,
      _$bindServiceFlags.pointer,
      _$userHandle.pointer,
    ).boolean;
  }

  static final _id_updateServiceGroup = _class.instanceMethodId(
    r'updateServiceGroup',
    r'(Landroid/content/ServiceConnection;II)V',
  );

  static final _updateServiceGroup =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)`
  void updateServiceGroup(jni$_.JObject? serviceConnection, int i, int i1) {
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    _updateServiceGroup(
      reference.pointer,
      _id_updateServiceGroup as jni$_.JMethodIDPtr,
      _$serviceConnection.pointer,
      i,
      i1,
    ).check();
  }

  static final _id_unbindService = _class.instanceMethodId(
    r'unbindService',
    r'(Landroid/content/ServiceConnection;)V',
  );

  static final _unbindService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void unbindService(android.content.ServiceConnection serviceConnection)`
  void unbindService(jni$_.JObject? serviceConnection) {
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    _unbindService(
      reference.pointer,
      _id_unbindService as jni$_.JMethodIDPtr,
      _$serviceConnection.pointer,
    ).check();
  }

  static final _id_startInstrumentation = _class.instanceMethodId(
    r'startInstrumentation',
    r'(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z',
  );

  static final _startInstrumentation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)`
  bool startInstrumentation(
    jni$_.JObject? componentName,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startInstrumentation(
      reference.pointer,
      _id_startInstrumentation as jni$_.JMethodIDPtr,
      _$componentName.pointer,
      _$string.pointer,
      _$bundle.pointer,
    ).boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _getSystemService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract java.lang.Object getSystemService(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSystemService(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSystemService(
      reference.pointer,
      _id_getSystemService as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSystemService$1 = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getSystemService$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final T getSystemService(java.lang.Class<T> class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getSystemService$1<$T extends jni$_.JObject?>(
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSystemService$1(
      reference.pointer,
      _id_getSystemService$1 as jni$_.JMethodIDPtr,
      _$class$.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_getSystemServiceName = _class.instanceMethodId(
    r'getSystemServiceName',
    r'(Ljava/lang/Class;)Ljava/lang/String;',
  );

  static final _getSystemServiceName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract java.lang.String getSystemServiceName(java.lang.Class<?> class)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getSystemServiceName(jni$_.JObject? class$) {
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSystemServiceName(
      reference.pointer,
      _id_getSystemServiceName as jni$_.JMethodIDPtr,
      _$class$.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_checkPermission = _class.instanceMethodId(
    r'checkPermission',
    r'(Ljava/lang/String;II)I',
  );

  static final _checkPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public abstract int checkPermission(java.lang.String string, int i, int i1)`
  int checkPermission(jni$_.JString? string, int i, int i1) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkPermission(
      reference.pointer,
      _id_checkPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
      i1,
    ).integer;
  }

  static final _id_checkCallingPermission = _class.instanceMethodId(
    r'checkCallingPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract int checkCallingPermission(java.lang.String string)`
  int checkCallingPermission(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkCallingPermission(
      reference.pointer,
      _id_checkCallingPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).integer;
  }

  static final _id_checkCallingOrSelfPermission = _class.instanceMethodId(
    r'checkCallingOrSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingOrSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract int checkCallingOrSelfPermission(java.lang.String string)`
  int checkCallingOrSelfPermission(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfPermission(
      reference.pointer,
      _id_checkCallingOrSelfPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).integer;
  }

  static final _id_checkSelfPermission = _class.instanceMethodId(
    r'checkSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract int checkSelfPermission(java.lang.String string)`
  int checkSelfPermission(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkSelfPermission(
      reference.pointer,
      _id_checkSelfPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).integer;
  }

  static final _id_enforcePermission = _class.instanceMethodId(
    r'enforcePermission',
    r'(Ljava/lang/String;IILjava/lang/String;)V',
  );

  static final _enforcePermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)`
  void enforcePermission(
    jni$_.JString? string,
    int i,
    int i1,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforcePermission(
      reference.pointer,
      _id_enforcePermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
      i1,
      _$string1.pointer,
    ).check();
  }

  static final _id_enforceCallingPermission = _class.instanceMethodId(
    r'enforceCallingPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)`
  void enforceCallingPermission(jni$_.JString? string, jni$_.JString? string1) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforceCallingPermission(
      reference.pointer,
      _id_enforceCallingPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).check();
  }

  static final _id_enforceCallingOrSelfPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingOrSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)`
  void enforceCallingOrSelfPermission(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforceCallingOrSelfPermission(
      reference.pointer,
      _id_enforceCallingOrSelfPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).check();
  }

  static final _id_grantUriPermission = _class.instanceMethodId(
    r'grantUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _grantUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)`
  void grantUriPermission(jni$_.JString? string, jni$_.JObject? uri, int i) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _grantUriPermission(
      reference.pointer,
      _id_grantUriPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$uri.pointer,
      i,
    ).check();
  }

  static final _id_revokeUriPermission = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract void revokeUriPermission(android.net.Uri uri, int i)`
  void revokeUriPermission(jni$_.JObject? uri, int i) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _revokeUriPermission(
      reference.pointer,
      _id_revokeUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
    ).check();
  }

  static final _id_revokeUriPermission$1 = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)`
  void revokeUriPermission$1(jni$_.JString? string, jni$_.JObject? uri, int i) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _revokeUriPermission$1(
      reference.pointer,
      _id_revokeUriPermission$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$uri.pointer,
      i,
    ).check();
  }

  static final _id_checkUriPermission = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;III)I',
  );

  static final _checkUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)`
  int checkUriPermission(jni$_.JObject? uri, int i, int i1, int i2) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkUriPermission(
      reference.pointer,
      _id_checkUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_checkContentUriPermissionFull = _class.instanceMethodId(
    r'checkContentUriPermissionFull',
    r'(Landroid/net/Uri;III)I',
  );

  static final _checkContentUriPermissionFull =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public int checkContentUriPermissionFull(android.net.Uri uri, int i, int i1, int i2)`
  int checkContentUriPermissionFull(jni$_.JObject? uri, int i, int i1, int i2) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkContentUriPermissionFull(
      reference.pointer,
      _id_checkContentUriPermissionFull as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_checkUriPermissions = _class.instanceMethodId(
    r'checkUriPermissions',
    r'(Ljava/util/List;III)[I',
  );

  static final _checkUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public int[] checkUriPermissions(java.util.List<android.net.Uri> list, int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
    int i1,
    int i2,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkUriPermissions(
      reference.pointer,
      _id_checkUriPermissions as jni$_.JMethodIDPtr,
      _$list.pointer,
      i,
      i1,
      i2,
    ).object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkCallingUriPermission = _class.instanceMethodId(
    r'checkCallingUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract int checkCallingUriPermission(android.net.Uri uri, int i)`
  int checkCallingUriPermission(jni$_.JObject? uri, int i) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkCallingUriPermission(
      reference.pointer,
      _id_checkCallingUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
    ).integer;
  }

  static final _id_checkCallingUriPermissions = _class.instanceMethodId(
    r'checkCallingUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public int[] checkCallingUriPermissions(java.util.List<android.net.Uri> list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkCallingUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkCallingUriPermissions(
      reference.pointer,
      _id_checkCallingUriPermissions as jni$_.JMethodIDPtr,
      _$list.pointer,
      i,
    ).object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkCallingOrSelfUriPermission = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingOrSelfUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)`
  int checkCallingOrSelfUriPermission(jni$_.JObject? uri, int i) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfUriPermission(
      reference.pointer,
      _id_checkCallingOrSelfUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
    ).integer;
  }

  static final _id_checkCallingOrSelfUriPermissions = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingOrSelfUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public int[] checkCallingOrSelfUriPermissions(java.util.List<android.net.Uri> list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkCallingOrSelfUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfUriPermissions(
      reference.pointer,
      _id_checkCallingOrSelfUriPermissions as jni$_.JMethodIDPtr,
      _$list.pointer,
      i,
    ).object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkUriPermission$1 = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I',
  );

  static final _checkUriPermission$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)`
  int checkUriPermission$1(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _checkUriPermission$1(
      reference.pointer,
      _id_checkUriPermission$1 as jni$_.JMethodIDPtr,
      _$uri.pointer,
      _$string.pointer,
      _$string1.pointer,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_enforceUriPermission = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)`
  void enforceUriPermission(
    jni$_.JObject? uri,
    int i,
    int i1,
    int i2,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceUriPermission(
      reference.pointer,
      _id_enforceUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      i1,
      i2,
      _$string.pointer,
    ).check();
  }

  static final _id_enforceCallingUriPermission = _class.instanceMethodId(
    r'enforceCallingUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)`
  void enforceCallingUriPermission(
    jni$_.JObject? uri,
    int i,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceCallingUriPermission(
      reference.pointer,
      _id_enforceCallingUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      _$string.pointer,
    ).check();
  }

  static final _id_enforceCallingOrSelfUriPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingOrSelfUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)`
  void enforceCallingOrSelfUriPermission(
    jni$_.JObject? uri,
    int i,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceCallingOrSelfUriPermission(
      reference.pointer,
      _id_enforceCallingOrSelfUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      _$string.pointer,
    ).check();
  }

  static final _id_enforceUriPermission$1 = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)`
  void enforceUriPermission$1(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    int i2,
    jni$_.JString? string2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    _enforceUriPermission$1(
      reference.pointer,
      _id_enforceUriPermission$1 as jni$_.JMethodIDPtr,
      _$uri.pointer,
      _$string.pointer,
      _$string1.pointer,
      i,
      i1,
      i2,
      _$string2.pointer,
    ).check();
  }

  static final _id_revokeSelfPermissionOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionOnKill',
    r'(Ljava/lang/String;)V',
  );

  static final _revokeSelfPermissionOnKill =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void revokeSelfPermissionOnKill(java.lang.String string)`
  void revokeSelfPermissionOnKill(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _revokeSelfPermissionOnKill(
      reference.pointer,
      _id_revokeSelfPermissionOnKill as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).check();
  }

  static final _id_revokeSelfPermissionsOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionsOnKill',
    r'(Ljava/util/Collection;)V',
  );

  static final _revokeSelfPermissionsOnKill =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void revokeSelfPermissionsOnKill(java.util.Collection<java.lang.String> collection)`
  void revokeSelfPermissionsOnKill(jni$_.JObject? collection) {
    final _$collection = collection?.reference ?? jni$_.jNullReference;
    _revokeSelfPermissionsOnKill(
      reference.pointer,
      _id_revokeSelfPermissionsOnKill as jni$_.JMethodIDPtr,
      _$collection.pointer,
    ).check();
  }

  static final _id_createPackageContext = _class.instanceMethodId(
    r'createPackageContext',
    r'(Ljava/lang/String;I)Landroid/content/Context;',
  );

  static final _createPackageContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract android.content.Context createPackageContext(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createPackageContext(jni$_.JString? string, int i) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createPackageContext(
      reference.pointer,
      _id_createPackageContext as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createContextForSplit = _class.instanceMethodId(
    r'createContextForSplit',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createContextForSplit =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.content.Context createContextForSplit(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createContextForSplit(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createContextForSplit(
      reference.pointer,
      _id_createContextForSplit as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createConfigurationContext = _class.instanceMethodId(
    r'createConfigurationContext',
    r'(Landroid/content/res/Configuration;)Landroid/content/Context;',
  );

  static final _createConfigurationContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createConfigurationContext(jni$_.JObject? configuration) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    return _createConfigurationContext(
      reference.pointer,
      _id_createConfigurationContext as jni$_.JMethodIDPtr,
      _$configuration.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createDisplayContext = _class.instanceMethodId(
    r'createDisplayContext',
    r'(Landroid/view/Display;)Landroid/content/Context;',
  );

  static final _createDisplayContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.content.Context createDisplayContext(android.view.Display display)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDisplayContext(jni$_.JObject? display) {
    final _$display = display?.reference ?? jni$_.jNullReference;
    return _createDisplayContext(
      reference.pointer,
      _id_createDisplayContext as jni$_.JMethodIDPtr,
      _$display.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createDeviceContext = _class.instanceMethodId(
    r'createDeviceContext',
    r'(I)Landroid/content/Context;',
  );

  static final _createDeviceContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.content.Context createDeviceContext(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDeviceContext(int i) {
    return _createDeviceContext(
      reference.pointer,
      _id_createDeviceContext as jni$_.JMethodIDPtr,
      i,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createWindowContext = _class.instanceMethodId(
    r'createWindowContext',
    r'(ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Context createWindowContext(int i, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createWindowContext(int i, jni$_.JObject? bundle) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _createWindowContext(
      reference.pointer,
      _id_createWindowContext as jni$_.JMethodIDPtr,
      i,
      _$bundle.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createWindowContext$1 = _class.instanceMethodId(
    r'createWindowContext',
    r'(Landroid/view/Display;ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createWindowContext$1(
    jni$_.JObject? display,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$display = display?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _createWindowContext$1(
      reference.pointer,
      _id_createWindowContext$1 as jni$_.JMethodIDPtr,
      _$display.pointer,
      i,
      _$bundle.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createContext = _class.instanceMethodId(
    r'createContext',
    r'(Landroid/content/ContextParams;)Landroid/content/Context;',
  );

  static final _createContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Context createContext(android.content.ContextParams contextParams)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createContext(jni$_.JObject? contextParams) {
    final _$contextParams = contextParams?.reference ?? jni$_.jNullReference;
    return _createContext(
      reference.pointer,
      _id_createContext as jni$_.JMethodIDPtr,
      _$contextParams.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createAttributionContext = _class.instanceMethodId(
    r'createAttributionContext',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createAttributionContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Context createAttributionContext(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createAttributionContext(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createAttributionContext(
      reference.pointer,
      _id_createAttributionContext as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createDeviceProtectedStorageContext = _class
      .instanceMethodId(
        r'createDeviceProtectedStorageContext',
        r'()Landroid/content/Context;',
      );

  static final _createDeviceProtectedStorageContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.Context createDeviceProtectedStorageContext()`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDeviceProtectedStorageContext() {
    return _createDeviceProtectedStorageContext(
      reference.pointer,
      _id_createDeviceProtectedStorageContext as jni$_.JMethodIDPtr,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_getDisplay = _class.instanceMethodId(
    r'getDisplay',
    r'()Landroid/view/Display;',
  );

  static final _getDisplay =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.Display getDisplay()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDisplay() {
    return _getDisplay(
      reference.pointer,
      _id_getDisplay as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDeviceId = _class.instanceMethodId(
    r'getDeviceId',
    r'()I',
  );

  static final _getDeviceId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getDeviceId()`
  int getDeviceId() {
    return _getDeviceId(
      reference.pointer,
      _id_getDeviceId as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_registerDeviceIdChangeListener = _class.instanceMethodId(
    r'registerDeviceIdChangeListener',
    r'(Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V',
  );

  static final _registerDeviceIdChangeListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void registerDeviceIdChangeListener(java.util.concurrent.Executor executor, java.util.function.IntConsumer intConsumer)`
  void registerDeviceIdChangeListener(
    jni$_.JObject? executor,
    jni$_.JObject? intConsumer,
  ) {
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$intConsumer = intConsumer?.reference ?? jni$_.jNullReference;
    _registerDeviceIdChangeListener(
      reference.pointer,
      _id_registerDeviceIdChangeListener as jni$_.JMethodIDPtr,
      _$executor.pointer,
      _$intConsumer.pointer,
    ).check();
  }

  static final _id_unregisterDeviceIdChangeListener = _class.instanceMethodId(
    r'unregisterDeviceIdChangeListener',
    r'(Ljava/util/function/IntConsumer;)V',
  );

  static final _unregisterDeviceIdChangeListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void unregisterDeviceIdChangeListener(java.util.function.IntConsumer intConsumer)`
  void unregisterDeviceIdChangeListener(jni$_.JObject? intConsumer) {
    final _$intConsumer = intConsumer?.reference ?? jni$_.jNullReference;
    _unregisterDeviceIdChangeListener(
      reference.pointer,
      _id_unregisterDeviceIdChangeListener as jni$_.JMethodIDPtr,
      _$intConsumer.pointer,
    ).check();
  }

  static final _id_isRestricted = _class.instanceMethodId(
    r'isRestricted',
    r'()Z',
  );

  static final _isRestricted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isRestricted()`
  bool isRestricted() {
    return _isRestricted(
      reference.pointer,
      _id_isRestricted as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isDeviceProtectedStorage = _class.instanceMethodId(
    r'isDeviceProtectedStorage',
    r'()Z',
  );

  static final _isDeviceProtectedStorage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract boolean isDeviceProtectedStorage()`
  bool isDeviceProtectedStorage() {
    return _isDeviceProtectedStorage(
      reference.pointer,
      _id_isDeviceProtectedStorage as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isUiContext = _class.instanceMethodId(
    r'isUiContext',
    r'()Z',
  );

  static final _isUiContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isUiContext()`
  bool isUiContext() {
    return _isUiContext(
      reference.pointer,
      _id_isUiContext as jni$_.JMethodIDPtr,
    ).boolean;
  }
}

final class $Context$NullableType extends jni$_.JObjType<Context?> {
  @jni$_.internal
  const $Context$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context;';

  @jni$_.internal
  @core$_.override
  Context? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : Context.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$NullableType) &&
        other is $Context$NullableType;
  }
}

final class $Context$Type extends jni$_.JObjType<Context> {
  @jni$_.internal
  const $Context$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context;';

  @jni$_.internal
  @core$_.override
  Context fromReference(jni$_.JReference reference) =>
      Context.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context?> get nullableType => const $Context$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$Type) && other is $Context$Type;
  }
}

/// from: `java.util.UUID`
class UUID extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<UUID> $type;

  @jni$_.internal
  UUID.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'java/util/UUID');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $UUID$NullableType();
  static const type = $UUID$Type();
  static final _id_new$ = _class.constructorId(r'(JJ)V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int64, jni$_.Int64)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
            )
          >();

  /// from: `public void <init>(long j, long j1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory UUID(int j, int j1) {
    return UUID.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        j,
        j1,
      ).reference,
    );
  }

  static final _id_randomUUID = _class.staticMethodId(
    r'randomUUID',
    r'()Ljava/util/UUID;',
  );

  static final _randomUUID =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `static public java.util.UUID randomUUID()`
  /// The returned object must be released after use, by calling the [release] method.
  static UUID? randomUUID() {
    return _randomUUID(
      _class.reference.pointer,
      _id_randomUUID as jni$_.JMethodIDPtr,
    ).object<UUID?>(const $UUID$NullableType());
  }

  static final _id_nameUUIDFromBytes = _class.staticMethodId(
    r'nameUUIDFromBytes',
    r'([B)Ljava/util/UUID;',
  );

  static final _nameUUIDFromBytes =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.util.UUID nameUUIDFromBytes(byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  static UUID? nameUUIDFromBytes(jni$_.JByteArray? bs) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _nameUUIDFromBytes(
      _class.reference.pointer,
      _id_nameUUIDFromBytes as jni$_.JMethodIDPtr,
      _$bs.pointer,
    ).object<UUID?>(const $UUID$NullableType());
  }

  static final _id_fromString = _class.staticMethodId(
    r'fromString',
    r'(Ljava/lang/String;)Ljava/util/UUID;',
  );

  static final _fromString =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.util.UUID fromString(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static UUID? fromString(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fromString(
      _class.reference.pointer,
      _id_fromString as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<UUID?>(const $UUID$NullableType());
  }

  static final _id_getLeastSignificantBits = _class.instanceMethodId(
    r'getLeastSignificantBits',
    r'()J',
  );

  static final _getLeastSignificantBits =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallLongMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public long getLeastSignificantBits()`
  int getLeastSignificantBits() {
    return _getLeastSignificantBits(
      reference.pointer,
      _id_getLeastSignificantBits as jni$_.JMethodIDPtr,
    ).long;
  }

  static final _id_getMostSignificantBits = _class.instanceMethodId(
    r'getMostSignificantBits',
    r'()J',
  );

  static final _getMostSignificantBits =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallLongMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public long getMostSignificantBits()`
  int getMostSignificantBits() {
    return _getMostSignificantBits(
      reference.pointer,
      _id_getMostSignificantBits as jni$_.JMethodIDPtr,
    ).long;
  }

  static final _id_version = _class.instanceMethodId(r'version', r'()I');

  static final _version =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int version()`
  int version() {
    return _version(
      reference.pointer,
      _id_version as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_variant = _class.instanceMethodId(r'variant', r'()I');

  static final _variant =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int variant()`
  int variant() {
    return _variant(
      reference.pointer,
      _id_variant as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_timestamp = _class.instanceMethodId(r'timestamp', r'()J');

  static final _timestamp =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallLongMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public long timestamp()`
  int timestamp() {
    return _timestamp(
      reference.pointer,
      _id_timestamp as jni$_.JMethodIDPtr,
    ).long;
  }

  static final _id_clockSequence = _class.instanceMethodId(
    r'clockSequence',
    r'()I',
  );

  static final _clockSequence =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int clockSequence()`
  int clockSequence() {
    return _clockSequence(
      reference.pointer,
      _id_clockSequence as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_node = _class.instanceMethodId(r'node', r'()J');

  static final _node =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallLongMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public long node()`
  int node() {
    return _node(reference.pointer, _id_node as jni$_.JMethodIDPtr).long;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_hashCode$1 = _class.instanceMethodId(r'hashCode', r'()I');

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(
      reference.pointer,
      _id_hashCode$1 as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(jni$_.JObject? object) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(
      reference.pointer,
      _id_equals as jni$_.JMethodIDPtr,
      _$object.pointer,
    ).boolean;
  }

  static final _id_compareTo = _class.instanceMethodId(
    r'compareTo',
    r'(Ljava/util/UUID;)I',
  );

  static final _compareTo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public int compareTo(java.util.UUID uUID)`
  int compareTo(UUID? uUID) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _compareTo(
      reference.pointer,
      _id_compareTo as jni$_.JMethodIDPtr,
      _$uUID.pointer,
    ).integer;
  }

  bool operator <(UUID? uUID) {
    return compareTo(uUID) < 0;
  }

  bool operator <=(UUID? uUID) {
    return compareTo(uUID) <= 0;
  }

  bool operator >(UUID? uUID) {
    return compareTo(uUID) > 0;
  }

  bool operator >=(UUID? uUID) {
    return compareTo(uUID) >= 0;
  }
}

final class $UUID$NullableType extends jni$_.JObjType<UUID?> {
  @jni$_.internal
  const $UUID$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ljava/util/UUID;';

  @jni$_.internal
  @core$_.override
  UUID? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : UUID.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<UUID?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($UUID$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UUID$NullableType) &&
        other is $UUID$NullableType;
  }
}

final class $UUID$Type extends jni$_.JObjType<UUID> {
  @jni$_.internal
  const $UUID$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ljava/util/UUID;';

  @jni$_.internal
  @core$_.override
  UUID fromReference(jni$_.JReference reference) =>
      UUID.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<UUID?> get nullableType => const $UUID$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($UUID$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UUID$Type) && other is $UUID$Type;
  }
}

/// from: `androidx.core.app.ActivityCompat$OnRequestPermissionsResultCallback`
class ActivityCompat$OnRequestPermissionsResultCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ActivityCompat$OnRequestPermissionsResultCallback> $type;

  @jni$_.internal
  ActivityCompat$OnRequestPermissionsResultCallback.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'androidx/core/app/ActivityCompat$OnRequestPermissionsResultCallback',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $ActivityCompat$OnRequestPermissionsResultCallback$NullableType();
  static const type = $ActivityCompat$OnRequestPermissionsResultCallback$Type();
  static final _id_onRequestPermissionsResult = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[I)V',
  );

  static final _onRequestPermissionsResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)`
  void onRequestPermissionsResult(
    int i,
    jni$_.JArray<jni$_.JString?> strings,
    jni$_.JIntArray is$,
  ) {
    final _$strings = strings.reference;
    final _$is$ = is$.reference;
    _onRequestPermissionsResult(
      reference.pointer,
      _id_onRequestPermissionsResult as jni$_.JMethodIDPtr,
      i,
      _$strings.pointer,
      _$is$.pointer,
    ).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<
    int,
    $ActivityCompat$OnRequestPermissionsResultCallback
  >
  _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onRequestPermissionsResult(I[Ljava/lang/String;[I)V') {
        _$impls[$p]!.onRequestPermissionsResult(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![1]!.as(
            const jni$_.JArrayType<jni$_.JString?>(jni$_.JStringNullableType()),
            releaseOriginal: true,
          ),
          $a![2]!.as(const jni$_.JIntArrayType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $ActivityCompat$OnRequestPermissionsResultCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.core.app.ActivityCompat$OnRequestPermissionsResultCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onRequestPermissionsResult$async)
          r'onRequestPermissionsResult(I[Ljava/lang/String;[I)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ActivityCompat$OnRequestPermissionsResultCallback.implement(
    $ActivityCompat$OnRequestPermissionsResultCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return ActivityCompat$OnRequestPermissionsResultCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ActivityCompat$OnRequestPermissionsResultCallback {
  factory $ActivityCompat$OnRequestPermissionsResultCallback({
    required void Function(
      int i,
      jni$_.JArray<jni$_.JString?> strings,
      jni$_.JIntArray is$,
    )
    onRequestPermissionsResult,
    bool onRequestPermissionsResult$async,
  }) = _$ActivityCompat$OnRequestPermissionsResultCallback;

  void onRequestPermissionsResult(
    int i,
    jni$_.JArray<jni$_.JString?> strings,
    jni$_.JIntArray is$,
  );
  bool get onRequestPermissionsResult$async => false;
}

final class _$ActivityCompat$OnRequestPermissionsResultCallback
    with $ActivityCompat$OnRequestPermissionsResultCallback {
  _$ActivityCompat$OnRequestPermissionsResultCallback({
    required void Function(
      int i,
      jni$_.JArray<jni$_.JString?> strings,
      jni$_.JIntArray is$,
    )
    onRequestPermissionsResult,
    this.onRequestPermissionsResult$async = false,
  }) : _onRequestPermissionsResult = onRequestPermissionsResult;

  final void Function(
    int i,
    jni$_.JArray<jni$_.JString?> strings,
    jni$_.JIntArray is$,
  )
  _onRequestPermissionsResult;
  final bool onRequestPermissionsResult$async;

  void onRequestPermissionsResult(
    int i,
    jni$_.JArray<jni$_.JString?> strings,
    jni$_.JIntArray is$,
  ) {
    return _onRequestPermissionsResult(i, strings, is$);
  }
}

final class $ActivityCompat$OnRequestPermissionsResultCallback$NullableType
    extends jni$_.JObjType<ActivityCompat$OnRequestPermissionsResultCallback?> {
  @jni$_.internal
  const $ActivityCompat$OnRequestPermissionsResultCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/core/app/ActivityCompat$OnRequestPermissionsResultCallback;';

  @jni$_.internal
  @core$_.override
  ActivityCompat$OnRequestPermissionsResultCallback? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : ActivityCompat$OnRequestPermissionsResultCallback.fromReference(
            reference,
          );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityCompat$OnRequestPermissionsResultCallback?>
  get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($ActivityCompat$OnRequestPermissionsResultCallback$NullableType)
          .hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ActivityCompat$OnRequestPermissionsResultCallback$NullableType) &&
        other
            is $ActivityCompat$OnRequestPermissionsResultCallback$NullableType;
  }
}

final class $ActivityCompat$OnRequestPermissionsResultCallback$Type
    extends jni$_.JObjType<ActivityCompat$OnRequestPermissionsResultCallback> {
  @jni$_.internal
  const $ActivityCompat$OnRequestPermissionsResultCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/core/app/ActivityCompat$OnRequestPermissionsResultCallback;';

  @jni$_.internal
  @core$_.override
  ActivityCompat$OnRequestPermissionsResultCallback fromReference(
    jni$_.JReference reference,
  ) => ActivityCompat$OnRequestPermissionsResultCallback.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityCompat$OnRequestPermissionsResultCallback?>
  get nullableType =>
      const $ActivityCompat$OnRequestPermissionsResultCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($ActivityCompat$OnRequestPermissionsResultCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ActivityCompat$OnRequestPermissionsResultCallback$Type) &&
        other is $ActivityCompat$OnRequestPermissionsResultCallback$Type;
  }
}

/// from: `androidx.core.app.ActivityCompat$PermissionCompatDelegate`
class ActivityCompat$PermissionCompatDelegate extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ActivityCompat$PermissionCompatDelegate> $type;

  @jni$_.internal
  ActivityCompat$PermissionCompatDelegate.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'androidx/core/app/ActivityCompat$PermissionCompatDelegate',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $ActivityCompat$PermissionCompatDelegate$NullableType();
  static const type = $ActivityCompat$PermissionCompatDelegate$Type();
  static final _id_requestPermissions = _class.instanceMethodId(
    r'requestPermissions',
    r'(Landroid/app/Activity;[Ljava/lang/String;I)Z',
  );

  static final _requestPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract boolean requestPermissions(android.app.Activity activity, java.lang.String[] strings, int i)`
  bool requestPermissions(
    jni$_.JObject activity,
    jni$_.JArray<jni$_.JString?> strings,
    int i,
  ) {
    final _$activity = activity.reference;
    final _$strings = strings.reference;
    return _requestPermissions(
      reference.pointer,
      _id_requestPermissions as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$strings.pointer,
      i,
    ).boolean;
  }

  static final _id_onActivityResult = _class.instanceMethodId(
    r'onActivityResult',
    r'(Landroid/app/Activity;IILandroid/content/Intent;)Z',
  );

  static final _onActivityResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean onActivityResult(android.app.Activity activity, int i, int i1, android.content.Intent intent)`
  bool onActivityResult(
    jni$_.JObject activity,
    int i,
    int i1,
    jni$_.JObject? intent,
  ) {
    final _$activity = activity.reference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _onActivityResult(
      reference.pointer,
      _id_onActivityResult as jni$_.JMethodIDPtr,
      _$activity.pointer,
      i,
      i1,
      _$intent.pointer,
    ).boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $ActivityCompat$PermissionCompatDelegate>
  _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'requestPermissions(Landroid/app/Activity;[Ljava/lang/String;I)Z') {
        final $r = _$impls[$p]!.requestPermissions(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(
            const jni$_.JArrayType<jni$_.JString?>(jni$_.JStringNullableType()),
            releaseOriginal: true,
          ),
          $a![2]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d ==
          r'onActivityResult(Landroid/app/Activity;IILandroid/content/Intent;)Z') {
        final $r = _$impls[$p]!.onActivityResult(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![2]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![3]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $ActivityCompat$PermissionCompatDelegate $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.core.app.ActivityCompat$PermissionCompatDelegate',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ActivityCompat$PermissionCompatDelegate.implement(
    $ActivityCompat$PermissionCompatDelegate $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return ActivityCompat$PermissionCompatDelegate.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ActivityCompat$PermissionCompatDelegate {
  factory $ActivityCompat$PermissionCompatDelegate({
    required bool Function(
      jni$_.JObject activity,
      jni$_.JArray<jni$_.JString?> strings,
      int i,
    )
    requestPermissions,
    required bool Function(
      jni$_.JObject activity,
      int i,
      int i1,
      jni$_.JObject? intent,
    )
    onActivityResult,
  }) = _$ActivityCompat$PermissionCompatDelegate;

  bool requestPermissions(
    jni$_.JObject activity,
    jni$_.JArray<jni$_.JString?> strings,
    int i,
  );
  bool onActivityResult(
    jni$_.JObject activity,
    int i,
    int i1,
    jni$_.JObject? intent,
  );
}

final class _$ActivityCompat$PermissionCompatDelegate
    with $ActivityCompat$PermissionCompatDelegate {
  _$ActivityCompat$PermissionCompatDelegate({
    required bool Function(
      jni$_.JObject activity,
      jni$_.JArray<jni$_.JString?> strings,
      int i,
    )
    requestPermissions,
    required bool Function(
      jni$_.JObject activity,
      int i,
      int i1,
      jni$_.JObject? intent,
    )
    onActivityResult,
  }) : _requestPermissions = requestPermissions,
       _onActivityResult = onActivityResult;

  final bool Function(
    jni$_.JObject activity,
    jni$_.JArray<jni$_.JString?> strings,
    int i,
  )
  _requestPermissions;
  final bool Function(
    jni$_.JObject activity,
    int i,
    int i1,
    jni$_.JObject? intent,
  )
  _onActivityResult;

  bool requestPermissions(
    jni$_.JObject activity,
    jni$_.JArray<jni$_.JString?> strings,
    int i,
  ) {
    return _requestPermissions(activity, strings, i);
  }

  bool onActivityResult(
    jni$_.JObject activity,
    int i,
    int i1,
    jni$_.JObject? intent,
  ) {
    return _onActivityResult(activity, i, i1, intent);
  }
}

final class $ActivityCompat$PermissionCompatDelegate$NullableType
    extends jni$_.JObjType<ActivityCompat$PermissionCompatDelegate?> {
  @jni$_.internal
  const $ActivityCompat$PermissionCompatDelegate$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/core/app/ActivityCompat$PermissionCompatDelegate;';

  @jni$_.internal
  @core$_.override
  ActivityCompat$PermissionCompatDelegate? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : ActivityCompat$PermissionCompatDelegate.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityCompat$PermissionCompatDelegate?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($ActivityCompat$PermissionCompatDelegate$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ActivityCompat$PermissionCompatDelegate$NullableType) &&
        other is $ActivityCompat$PermissionCompatDelegate$NullableType;
  }
}

final class $ActivityCompat$PermissionCompatDelegate$Type
    extends jni$_.JObjType<ActivityCompat$PermissionCompatDelegate> {
  @jni$_.internal
  const $ActivityCompat$PermissionCompatDelegate$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/core/app/ActivityCompat$PermissionCompatDelegate;';

  @jni$_.internal
  @core$_.override
  ActivityCompat$PermissionCompatDelegate fromReference(
    jni$_.JReference reference,
  ) => ActivityCompat$PermissionCompatDelegate.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityCompat$PermissionCompatDelegate?> get nullableType =>
      const $ActivityCompat$PermissionCompatDelegate$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ActivityCompat$PermissionCompatDelegate$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ActivityCompat$PermissionCompatDelegate$Type) &&
        other is $ActivityCompat$PermissionCompatDelegate$Type;
  }
}

/// from: `androidx.core.app.ActivityCompat$RequestPermissionsRequestCodeValidator`
class ActivityCompat$RequestPermissionsRequestCodeValidator
    extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ActivityCompat$RequestPermissionsRequestCodeValidator>
  $type;

  @jni$_.internal
  ActivityCompat$RequestPermissionsRequestCodeValidator.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'androidx/core/app/ActivityCompat$RequestPermissionsRequestCodeValidator',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $ActivityCompat$RequestPermissionsRequestCodeValidator$NullableType();
  static const type =
      $ActivityCompat$RequestPermissionsRequestCodeValidator$Type();
  static final _id_validateRequestPermissionsRequestCode = _class
      .instanceMethodId(r'validateRequestPermissionsRequestCode', r'(I)V');

  static final _validateRequestPermissionsRequestCode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public abstract void validateRequestPermissionsRequestCode(int i)`
  void validateRequestPermissionsRequestCode(int i) {
    _validateRequestPermissionsRequestCode(
      reference.pointer,
      _id_validateRequestPermissionsRequestCode as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<
    int,
    $ActivityCompat$RequestPermissionsRequestCodeValidator
  >
  _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'validateRequestPermissionsRequestCode(I)V') {
        _$impls[$p]!.validateRequestPermissionsRequestCode(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $ActivityCompat$RequestPermissionsRequestCodeValidator $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.core.app.ActivityCompat$RequestPermissionsRequestCodeValidator',
      $p,
      _$invokePointer,
      [
        if ($impl.validateRequestPermissionsRequestCode$async)
          r'validateRequestPermissionsRequestCode(I)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ActivityCompat$RequestPermissionsRequestCodeValidator.implement(
    $ActivityCompat$RequestPermissionsRequestCodeValidator $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return ActivityCompat$RequestPermissionsRequestCodeValidator.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ActivityCompat$RequestPermissionsRequestCodeValidator {
  factory $ActivityCompat$RequestPermissionsRequestCodeValidator({
    required void Function(int i) validateRequestPermissionsRequestCode,
    bool validateRequestPermissionsRequestCode$async,
  }) = _$ActivityCompat$RequestPermissionsRequestCodeValidator;

  void validateRequestPermissionsRequestCode(int i);
  bool get validateRequestPermissionsRequestCode$async => false;
}

final class _$ActivityCompat$RequestPermissionsRequestCodeValidator
    with $ActivityCompat$RequestPermissionsRequestCodeValidator {
  _$ActivityCompat$RequestPermissionsRequestCodeValidator({
    required void Function(int i) validateRequestPermissionsRequestCode,
    this.validateRequestPermissionsRequestCode$async = false,
  }) : _validateRequestPermissionsRequestCode =
           validateRequestPermissionsRequestCode;

  final void Function(int i) _validateRequestPermissionsRequestCode;
  final bool validateRequestPermissionsRequestCode$async;

  void validateRequestPermissionsRequestCode(int i) {
    return _validateRequestPermissionsRequestCode(i);
  }
}

final class $ActivityCompat$RequestPermissionsRequestCodeValidator$NullableType
    extends
        jni$_.JObjType<ActivityCompat$RequestPermissionsRequestCodeValidator?> {
  @jni$_.internal
  const $ActivityCompat$RequestPermissionsRequestCodeValidator$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/core/app/ActivityCompat$RequestPermissionsRequestCodeValidator;';

  @jni$_.internal
  @core$_.override
  ActivityCompat$RequestPermissionsRequestCodeValidator? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : ActivityCompat$RequestPermissionsRequestCodeValidator.fromReference(
            reference,
          );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityCompat$RequestPermissionsRequestCodeValidator?>
  get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($ActivityCompat$RequestPermissionsRequestCodeValidator$NullableType)
          .hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ActivityCompat$RequestPermissionsRequestCodeValidator$NullableType) &&
        other
            is $ActivityCompat$RequestPermissionsRequestCodeValidator$NullableType;
  }
}

final class $ActivityCompat$RequestPermissionsRequestCodeValidator$Type
    extends
        jni$_.JObjType<ActivityCompat$RequestPermissionsRequestCodeValidator> {
  @jni$_.internal
  const $ActivityCompat$RequestPermissionsRequestCodeValidator$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/core/app/ActivityCompat$RequestPermissionsRequestCodeValidator;';

  @jni$_.internal
  @core$_.override
  ActivityCompat$RequestPermissionsRequestCodeValidator fromReference(
    jni$_.JReference reference,
  ) => ActivityCompat$RequestPermissionsRequestCodeValidator.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityCompat$RequestPermissionsRequestCodeValidator?>
  get nullableType =>
      const $ActivityCompat$RequestPermissionsRequestCodeValidator$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($ActivityCompat$RequestPermissionsRequestCodeValidator$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ActivityCompat$RequestPermissionsRequestCodeValidator$Type) &&
        other is $ActivityCompat$RequestPermissionsRequestCodeValidator$Type;
  }
}

/// from: `androidx.core.app.ActivityCompat`
class ActivityCompat extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ActivityCompat> $type;

  @jni$_.internal
  ActivityCompat.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'androidx/core/app/ActivityCompat',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ActivityCompat$NullableType();
  static const type = $ActivityCompat$Type();
  static final _id_setPermissionCompatDelegate = _class.staticMethodId(
    r'setPermissionCompatDelegate',
    r'(Landroidx/core/app/ActivityCompat$PermissionCompatDelegate;)V',
  );

  static final _setPermissionCompatDelegate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void setPermissionCompatDelegate(androidx.core.app.ActivityCompat$PermissionCompatDelegate permissionCompatDelegate)`
  static void setPermissionCompatDelegate(
    ActivityCompat$PermissionCompatDelegate? permissionCompatDelegate,
  ) {
    final _$permissionCompatDelegate =
        permissionCompatDelegate?.reference ?? jni$_.jNullReference;
    _setPermissionCompatDelegate(
      _class.reference.pointer,
      _id_setPermissionCompatDelegate as jni$_.JMethodIDPtr,
      _$permissionCompatDelegate.pointer,
    ).check();
  }

  static final _id_getPermissionCompatDelegate = _class.staticMethodId(
    r'getPermissionCompatDelegate',
    r'()Landroidx/core/app/ActivityCompat$PermissionCompatDelegate;',
  );

  static final _getPermissionCompatDelegate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `static public androidx.core.app.ActivityCompat$PermissionCompatDelegate getPermissionCompatDelegate()`
  /// The returned object must be released after use, by calling the [release] method.
  static ActivityCompat$PermissionCompatDelegate?
  getPermissionCompatDelegate() {
    return _getPermissionCompatDelegate(
      _class.reference.pointer,
      _id_getPermissionCompatDelegate as jni$_.JMethodIDPtr,
    ).object<ActivityCompat$PermissionCompatDelegate?>(
      const $ActivityCompat$PermissionCompatDelegate$NullableType(),
    );
  }

  static final _id_invalidateOptionsMenu = _class.staticMethodId(
    r'invalidateOptionsMenu',
    r'(Landroid/app/Activity;)Z',
  );

  static final _invalidateOptionsMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public boolean invalidateOptionsMenu(android.app.Activity activity)`
  static bool invalidateOptionsMenu(jni$_.JObject? activity) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    return _invalidateOptionsMenu(
      _class.reference.pointer,
      _id_invalidateOptionsMenu as jni$_.JMethodIDPtr,
      _$activity.pointer,
    ).boolean;
  }

  static final _id_startActivityForResult = _class.staticMethodId(
    r'startActivityForResult',
    r'(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityForResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void startActivityForResult(android.app.Activity activity, android.content.Intent intent, int i, android.os.Bundle bundle)`
  static void startActivityForResult(
    jni$_.JObject activity,
    jni$_.JObject intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity.reference;
    final _$intent = intent.reference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivityForResult(
      _class.reference.pointer,
      _id_startActivityForResult as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$intent.pointer,
      i,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startIntentSenderForResult = _class.staticMethodId(
    r'startIntentSenderForResult',
    r'(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSenderForResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void startIntentSenderForResult(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)`
  static void startIntentSenderForResult(
    jni$_.JObject activity,
    jni$_.JObject intentSender,
    int i,
    jni$_.JObject? intent,
    int i1,
    int i2,
    int i3,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity.reference;
    final _$intentSender = intentSender.reference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSenderForResult(
      _class.reference.pointer,
      _id_startIntentSenderForResult as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$intentSender.pointer,
      i,
      _$intent.pointer,
      i1,
      i2,
      i3,
      _$bundle.pointer,
    ).check();
  }

  static final _id_finishAffinity = _class.staticMethodId(
    r'finishAffinity',
    r'(Landroid/app/Activity;)V',
  );

  static final _finishAffinity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void finishAffinity(android.app.Activity activity)`
  static void finishAffinity(jni$_.JObject activity) {
    final _$activity = activity.reference;
    _finishAffinity(
      _class.reference.pointer,
      _id_finishAffinity as jni$_.JMethodIDPtr,
      _$activity.pointer,
    ).check();
  }

  static final _id_finishAfterTransition = _class.staticMethodId(
    r'finishAfterTransition',
    r'(Landroid/app/Activity;)V',
  );

  static final _finishAfterTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void finishAfterTransition(android.app.Activity activity)`
  static void finishAfterTransition(jni$_.JObject activity) {
    final _$activity = activity.reference;
    _finishAfterTransition(
      _class.reference.pointer,
      _id_finishAfterTransition as jni$_.JMethodIDPtr,
      _$activity.pointer,
    ).check();
  }

  static final _id_getReferrer = _class.staticMethodId(
    r'getReferrer',
    r'(Landroid/app/Activity;)Landroid/net/Uri;',
  );

  static final _getReferrer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.net.Uri getReferrer(android.app.Activity activity)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getReferrer(jni$_.JObject activity) {
    final _$activity = activity.reference;
    return _getReferrer(
      _class.reference.pointer,
      _id_getReferrer as jni$_.JMethodIDPtr,
      _$activity.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_requireViewById = _class.staticMethodId(
    r'requireViewById',
    r'(Landroid/app/Activity;I)Landroid/view/View;',
  );

  static final _requireViewById =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `static public T requireViewById(android.app.Activity activity, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static $T requireViewById<$T extends jni$_.JObject?>(
    jni$_.JObject activity,
    int i, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$activity = activity.reference;
    return _requireViewById(
      _class.reference.pointer,
      _id_requireViewById as jni$_.JMethodIDPtr,
      _$activity.pointer,
      i,
    ).object<$T>(T);
  }

  static final _id_setEnterSharedElementCallback = _class.staticMethodId(
    r'setEnterSharedElementCallback',
    r'(Landroid/app/Activity;Landroidx/core/app/SharedElementCallback;)V',
  );

  static final _setEnterSharedElementCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void setEnterSharedElementCallback(android.app.Activity activity, androidx.core.app.SharedElementCallback sharedElementCallback)`
  static void setEnterSharedElementCallback(
    jni$_.JObject activity,
    jni$_.JObject? sharedElementCallback,
  ) {
    final _$activity = activity.reference;
    final _$sharedElementCallback =
        sharedElementCallback?.reference ?? jni$_.jNullReference;
    _setEnterSharedElementCallback(
      _class.reference.pointer,
      _id_setEnterSharedElementCallback as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$sharedElementCallback.pointer,
    ).check();
  }

  static final _id_setExitSharedElementCallback = _class.staticMethodId(
    r'setExitSharedElementCallback',
    r'(Landroid/app/Activity;Landroidx/core/app/SharedElementCallback;)V',
  );

  static final _setExitSharedElementCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void setExitSharedElementCallback(android.app.Activity activity, androidx.core.app.SharedElementCallback sharedElementCallback)`
  static void setExitSharedElementCallback(
    jni$_.JObject activity,
    jni$_.JObject? sharedElementCallback,
  ) {
    final _$activity = activity.reference;
    final _$sharedElementCallback =
        sharedElementCallback?.reference ?? jni$_.jNullReference;
    _setExitSharedElementCallback(
      _class.reference.pointer,
      _id_setExitSharedElementCallback as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$sharedElementCallback.pointer,
    ).check();
  }

  static final _id_postponeEnterTransition = _class.staticMethodId(
    r'postponeEnterTransition',
    r'(Landroid/app/Activity;)V',
  );

  static final _postponeEnterTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void postponeEnterTransition(android.app.Activity activity)`
  static void postponeEnterTransition(jni$_.JObject activity) {
    final _$activity = activity.reference;
    _postponeEnterTransition(
      _class.reference.pointer,
      _id_postponeEnterTransition as jni$_.JMethodIDPtr,
      _$activity.pointer,
    ).check();
  }

  static final _id_startPostponedEnterTransition = _class.staticMethodId(
    r'startPostponedEnterTransition',
    r'(Landroid/app/Activity;)V',
  );

  static final _startPostponedEnterTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void startPostponedEnterTransition(android.app.Activity activity)`
  static void startPostponedEnterTransition(jni$_.JObject activity) {
    final _$activity = activity.reference;
    _startPostponedEnterTransition(
      _class.reference.pointer,
      _id_startPostponedEnterTransition as jni$_.JMethodIDPtr,
      _$activity.pointer,
    ).check();
  }

  static final _id_requestPermissions = _class.staticMethodId(
    r'requestPermissions',
    r'(Landroid/app/Activity;[Ljava/lang/String;I)V',
  );

  static final _requestPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `static public void requestPermissions(android.app.Activity activity, java.lang.String[] strings, int i)`
  static void requestPermissions(
    jni$_.JObject activity,
    jni$_.JArray<jni$_.JString?> strings,
    int i,
  ) {
    final _$activity = activity.reference;
    final _$strings = strings.reference;
    _requestPermissions(
      _class.reference.pointer,
      _id_requestPermissions as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$strings.pointer,
      i,
    ).check();
  }

  static final _id_shouldShowRequestPermissionRationale = _class.staticMethodId(
    r'shouldShowRequestPermissionRationale',
    r'(Landroid/app/Activity;Ljava/lang/String;)Z',
  );

  static final _shouldShowRequestPermissionRationale =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public boolean shouldShowRequestPermissionRationale(android.app.Activity activity, java.lang.String string)`
  static bool shouldShowRequestPermissionRationale(
    jni$_.JObject activity,
    jni$_.JString string,
  ) {
    final _$activity = activity.reference;
    final _$string = string.reference;
    return _shouldShowRequestPermissionRationale(
      _class.reference.pointer,
      _id_shouldShowRequestPermissionRationale as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$string.pointer,
    ).boolean;
  }

  static final _id_isLaunchedFromBubble = _class.staticMethodId(
    r'isLaunchedFromBubble',
    r'(Landroid/app/Activity;)Z',
  );

  static final _isLaunchedFromBubble =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public boolean isLaunchedFromBubble(android.app.Activity activity)`
  static bool isLaunchedFromBubble(jni$_.JObject activity) {
    final _$activity = activity.reference;
    return _isLaunchedFromBubble(
      _class.reference.pointer,
      _id_isLaunchedFromBubble as jni$_.JMethodIDPtr,
      _$activity.pointer,
    ).boolean;
  }

  static final _id_requestDragAndDropPermissions = _class.staticMethodId(
    r'requestDragAndDropPermissions',
    r'(Landroid/app/Activity;Landroid/view/DragEvent;)Landroidx/core/view/DragAndDropPermissionsCompat;',
  );

  static final _requestDragAndDropPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public androidx.core.view.DragAndDropPermissionsCompat requestDragAndDropPermissions(android.app.Activity activity, android.view.DragEvent dragEvent)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? requestDragAndDropPermissions(
    jni$_.JObject activity,
    jni$_.JObject dragEvent,
  ) {
    final _$activity = activity.reference;
    final _$dragEvent = dragEvent.reference;
    return _requestDragAndDropPermissions(
      _class.reference.pointer,
      _id_requestDragAndDropPermissions as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$dragEvent.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_recreate = _class.staticMethodId(
    r'recreate',
    r'(Landroid/app/Activity;)V',
  );

  static final _recreate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void recreate(android.app.Activity activity)`
  static void recreate(jni$_.JObject activity) {
    final _$activity = activity.reference;
    _recreate(
      _class.reference.pointer,
      _id_recreate as jni$_.JMethodIDPtr,
      _$activity.pointer,
    ).check();
  }

  static final _id_setLocusContext = _class.staticMethodId(
    r'setLocusContext',
    r'(Landroid/app/Activity;Landroidx/core/content/LocusIdCompat;Landroid/os/Bundle;)V',
  );

  static final _setLocusContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void setLocusContext(android.app.Activity activity, androidx.core.content.LocusIdCompat locusIdCompat, android.os.Bundle bundle)`
  static void setLocusContext(
    jni$_.JObject activity,
    jni$_.JObject? locusIdCompat,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity.reference;
    final _$locusIdCompat = locusIdCompat?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _setLocusContext(
      _class.reference.pointer,
      _id_setLocusContext as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$locusIdCompat.pointer,
      _$bundle.pointer,
    ).check();
  }
}

final class $ActivityCompat$NullableType
    extends jni$_.JObjType<ActivityCompat?> {
  @jni$_.internal
  const $ActivityCompat$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/core/app/ActivityCompat;';

  @jni$_.internal
  @core$_.override
  ActivityCompat? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : ActivityCompat.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityCompat?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ActivityCompat$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityCompat$NullableType) &&
        other is $ActivityCompat$NullableType;
  }
}

final class $ActivityCompat$Type extends jni$_.JObjType<ActivityCompat> {
  @jni$_.internal
  const $ActivityCompat$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/core/app/ActivityCompat;';

  @jni$_.internal
  @core$_.override
  ActivityCompat fromReference(jni$_.JReference reference) =>
      ActivityCompat.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityCompat?> get nullableType =>
      const $ActivityCompat$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ActivityCompat$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityCompat$Type) &&
        other is $ActivityCompat$Type;
  }
}

/// from: `android.Manifest$permission`
class Manifest$permission extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Manifest$permission> $type;

  @jni$_.internal
  Manifest$permission.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/Manifest$permission');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Manifest$permission$NullableType();
  static const type = $Manifest$permission$Type();
  static final _id_ACCEPT_HANDOVER = _class.staticFieldId(
    r'ACCEPT_HANDOVER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCEPT_HANDOVER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCEPT_HANDOVER =>
      _id_ACCEPT_HANDOVER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCESS_BACKGROUND_LOCATION = _class.staticFieldId(
    r'ACCESS_BACKGROUND_LOCATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESS_BACKGROUND_LOCATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESS_BACKGROUND_LOCATION =>
      _id_ACCESS_BACKGROUND_LOCATION.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACCESS_BLOBS_ACROSS_USERS = _class.staticFieldId(
    r'ACCESS_BLOBS_ACROSS_USERS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESS_BLOBS_ACROSS_USERS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESS_BLOBS_ACROSS_USERS =>
      _id_ACCESS_BLOBS_ACROSS_USERS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACCESS_CHECKIN_PROPERTIES = _class.staticFieldId(
    r'ACCESS_CHECKIN_PROPERTIES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESS_CHECKIN_PROPERTIES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESS_CHECKIN_PROPERTIES =>
      _id_ACCESS_CHECKIN_PROPERTIES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACCESS_COARSE_LOCATION = _class.staticFieldId(
    r'ACCESS_COARSE_LOCATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESS_COARSE_LOCATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESS_COARSE_LOCATION =>
      _id_ACCESS_COARSE_LOCATION.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCESS_FINE_LOCATION = _class.staticFieldId(
    r'ACCESS_FINE_LOCATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESS_FINE_LOCATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESS_FINE_LOCATION =>
      _id_ACCESS_FINE_LOCATION.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCESS_HIDDEN_PROFILES = _class.staticFieldId(
    r'ACCESS_HIDDEN_PROFILES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESS_HIDDEN_PROFILES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESS_HIDDEN_PROFILES =>
      _id_ACCESS_HIDDEN_PROFILES.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCESS_LOCATION_EXTRA_COMMANDS = _class.staticFieldId(
    r'ACCESS_LOCATION_EXTRA_COMMANDS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESS_LOCATION_EXTRA_COMMANDS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESS_LOCATION_EXTRA_COMMANDS =>
      _id_ACCESS_LOCATION_EXTRA_COMMANDS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACCESS_MEDIA_LOCATION = _class.staticFieldId(
    r'ACCESS_MEDIA_LOCATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESS_MEDIA_LOCATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESS_MEDIA_LOCATION =>
      _id_ACCESS_MEDIA_LOCATION.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCESS_NETWORK_STATE = _class.staticFieldId(
    r'ACCESS_NETWORK_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESS_NETWORK_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESS_NETWORK_STATE =>
      _id_ACCESS_NETWORK_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCESS_NOTIFICATION_POLICY = _class.staticFieldId(
    r'ACCESS_NOTIFICATION_POLICY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESS_NOTIFICATION_POLICY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESS_NOTIFICATION_POLICY =>
      _id_ACCESS_NOTIFICATION_POLICY.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_ACCESS_WIFI_STATE = _class.staticFieldId(
    r'ACCESS_WIFI_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESS_WIFI_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESS_WIFI_STATE =>
      _id_ACCESS_WIFI_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCOUNT_MANAGER = _class.staticFieldId(
    r'ACCOUNT_MANAGER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCOUNT_MANAGER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCOUNT_MANAGER =>
      _id_ACCOUNT_MANAGER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTIVITY_RECOGNITION = _class.staticFieldId(
    r'ACTIVITY_RECOGNITION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTIVITY_RECOGNITION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTIVITY_RECOGNITION =>
      _id_ACTIVITY_RECOGNITION.get(_class, const jni$_.JStringNullableType());

  static final _id_ADD_VOICEMAIL = _class.staticFieldId(
    r'ADD_VOICEMAIL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ADD_VOICEMAIL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ADD_VOICEMAIL =>
      _id_ADD_VOICEMAIL.get(_class, const jni$_.JStringNullableType());

  static final _id_ANSWER_PHONE_CALLS = _class.staticFieldId(
    r'ANSWER_PHONE_CALLS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ANSWER_PHONE_CALLS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ANSWER_PHONE_CALLS =>
      _id_ANSWER_PHONE_CALLS.get(_class, const jni$_.JStringNullableType());

  static final _id_BATTERY_STATS = _class.staticFieldId(
    r'BATTERY_STATS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BATTERY_STATS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BATTERY_STATS =>
      _id_BATTERY_STATS.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_ACCESSIBILITY_SERVICE = _class.staticFieldId(
    r'BIND_ACCESSIBILITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_ACCESSIBILITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_ACCESSIBILITY_SERVICE =>
      _id_BIND_ACCESSIBILITY_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_APPWIDGET = _class.staticFieldId(
    r'BIND_APPWIDGET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_APPWIDGET`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_APPWIDGET =>
      _id_BIND_APPWIDGET.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_AUTOFILL_SERVICE = _class.staticFieldId(
    r'BIND_AUTOFILL_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_AUTOFILL_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_AUTOFILL_SERVICE =>
      _id_BIND_AUTOFILL_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_CALL_REDIRECTION_SERVICE = _class.staticFieldId(
    r'BIND_CALL_REDIRECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_CALL_REDIRECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_CALL_REDIRECTION_SERVICE =>
      _id_BIND_CALL_REDIRECTION_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_CARRIER_MESSAGING_CLIENT_SERVICE = _class.staticFieldId(
    r'BIND_CARRIER_MESSAGING_CLIENT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_CARRIER_MESSAGING_CLIENT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_CARRIER_MESSAGING_CLIENT_SERVICE =>
      _id_BIND_CARRIER_MESSAGING_CLIENT_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_CARRIER_MESSAGING_SERVICE = _class.staticFieldId(
    r'BIND_CARRIER_MESSAGING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_CARRIER_MESSAGING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_CARRIER_MESSAGING_SERVICE =>
      _id_BIND_CARRIER_MESSAGING_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_CARRIER_SERVICES = _class.staticFieldId(
    r'BIND_CARRIER_SERVICES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_CARRIER_SERVICES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_CARRIER_SERVICES =>
      _id_BIND_CARRIER_SERVICES.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_CHOOSER_TARGET_SERVICE = _class.staticFieldId(
    r'BIND_CHOOSER_TARGET_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_CHOOSER_TARGET_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_CHOOSER_TARGET_SERVICE =>
      _id_BIND_CHOOSER_TARGET_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_COMPANION_DEVICE_SERVICE = _class.staticFieldId(
    r'BIND_COMPANION_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_COMPANION_DEVICE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_COMPANION_DEVICE_SERVICE =>
      _id_BIND_COMPANION_DEVICE_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_CONDITION_PROVIDER_SERVICE = _class.staticFieldId(
    r'BIND_CONDITION_PROVIDER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_CONDITION_PROVIDER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_CONDITION_PROVIDER_SERVICE =>
      _id_BIND_CONDITION_PROVIDER_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_CONTROLS = _class.staticFieldId(
    r'BIND_CONTROLS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_CONTROLS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_CONTROLS =>
      _id_BIND_CONTROLS.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_CREDENTIAL_PROVIDER_SERVICE = _class.staticFieldId(
    r'BIND_CREDENTIAL_PROVIDER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_CREDENTIAL_PROVIDER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_CREDENTIAL_PROVIDER_SERVICE =>
      _id_BIND_CREDENTIAL_PROVIDER_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_DEVICE_ADMIN = _class.staticFieldId(
    r'BIND_DEVICE_ADMIN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_DEVICE_ADMIN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_DEVICE_ADMIN =>
      _id_BIND_DEVICE_ADMIN.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_DREAM_SERVICE = _class.staticFieldId(
    r'BIND_DREAM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_DREAM_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_DREAM_SERVICE =>
      _id_BIND_DREAM_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_INCALL_SERVICE = _class.staticFieldId(
    r'BIND_INCALL_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_INCALL_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_INCALL_SERVICE =>
      _id_BIND_INCALL_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_INPUT_METHOD = _class.staticFieldId(
    r'BIND_INPUT_METHOD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_INPUT_METHOD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_INPUT_METHOD =>
      _id_BIND_INPUT_METHOD.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_MIDI_DEVICE_SERVICE = _class.staticFieldId(
    r'BIND_MIDI_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_MIDI_DEVICE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_MIDI_DEVICE_SERVICE =>
      _id_BIND_MIDI_DEVICE_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_NFC_SERVICE = _class.staticFieldId(
    r'BIND_NFC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_NFC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_NFC_SERVICE =>
      _id_BIND_NFC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_NOTIFICATION_LISTENER_SERVICE = _class.staticFieldId(
    r'BIND_NOTIFICATION_LISTENER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_NOTIFICATION_LISTENER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_NOTIFICATION_LISTENER_SERVICE =>
      _id_BIND_NOTIFICATION_LISTENER_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_PRINT_SERVICE = _class.staticFieldId(
    r'BIND_PRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_PRINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_PRINT_SERVICE =>
      _id_BIND_PRINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_QUICK_ACCESS_WALLET_SERVICE = _class.staticFieldId(
    r'BIND_QUICK_ACCESS_WALLET_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_QUICK_ACCESS_WALLET_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_QUICK_ACCESS_WALLET_SERVICE =>
      _id_BIND_QUICK_ACCESS_WALLET_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_QUICK_SETTINGS_TILE = _class.staticFieldId(
    r'BIND_QUICK_SETTINGS_TILE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_QUICK_SETTINGS_TILE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_QUICK_SETTINGS_TILE =>
      _id_BIND_QUICK_SETTINGS_TILE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_REMOTEVIEWS = _class.staticFieldId(
    r'BIND_REMOTEVIEWS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_REMOTEVIEWS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_REMOTEVIEWS =>
      _id_BIND_REMOTEVIEWS.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_SCREENING_SERVICE = _class.staticFieldId(
    r'BIND_SCREENING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_SCREENING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_SCREENING_SERVICE =>
      _id_BIND_SCREENING_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_TELECOM_CONNECTION_SERVICE = _class.staticFieldId(
    r'BIND_TELECOM_CONNECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_TELECOM_CONNECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_TELECOM_CONNECTION_SERVICE =>
      _id_BIND_TELECOM_CONNECTION_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_TEXT_SERVICE = _class.staticFieldId(
    r'BIND_TEXT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_TEXT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_TEXT_SERVICE =>
      _id_BIND_TEXT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_TV_INPUT = _class.staticFieldId(
    r'BIND_TV_INPUT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_TV_INPUT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_TV_INPUT =>
      _id_BIND_TV_INPUT.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_TV_INTERACTIVE_APP = _class.staticFieldId(
    r'BIND_TV_INTERACTIVE_APP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_TV_INTERACTIVE_APP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_TV_INTERACTIVE_APP =>
      _id_BIND_TV_INTERACTIVE_APP.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_VISUAL_VOICEMAIL_SERVICE = _class.staticFieldId(
    r'BIND_VISUAL_VOICEMAIL_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_VISUAL_VOICEMAIL_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_VISUAL_VOICEMAIL_SERVICE =>
      _id_BIND_VISUAL_VOICEMAIL_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_VOICE_INTERACTION = _class.staticFieldId(
    r'BIND_VOICE_INTERACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_VOICE_INTERACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_VOICE_INTERACTION =>
      _id_BIND_VOICE_INTERACTION.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_VPN_SERVICE = _class.staticFieldId(
    r'BIND_VPN_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_VPN_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_VPN_SERVICE =>
      _id_BIND_VPN_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BIND_VR_LISTENER_SERVICE = _class.staticFieldId(
    r'BIND_VR_LISTENER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_VR_LISTENER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_VR_LISTENER_SERVICE =>
      _id_BIND_VR_LISTENER_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BIND_WALLPAPER = _class.staticFieldId(
    r'BIND_WALLPAPER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIND_WALLPAPER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIND_WALLPAPER =>
      _id_BIND_WALLPAPER.get(_class, const jni$_.JStringNullableType());

  static final _id_BLUETOOTH = _class.staticFieldId(
    r'BLUETOOTH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLUETOOTH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLUETOOTH =>
      _id_BLUETOOTH.get(_class, const jni$_.JStringNullableType());

  static final _id_BLUETOOTH_ADMIN = _class.staticFieldId(
    r'BLUETOOTH_ADMIN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLUETOOTH_ADMIN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLUETOOTH_ADMIN =>
      _id_BLUETOOTH_ADMIN.get(_class, const jni$_.JStringNullableType());

  static final _id_BLUETOOTH_ADVERTISE = _class.staticFieldId(
    r'BLUETOOTH_ADVERTISE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLUETOOTH_ADVERTISE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLUETOOTH_ADVERTISE =>
      _id_BLUETOOTH_ADVERTISE.get(_class, const jni$_.JStringNullableType());

  static final _id_BLUETOOTH_CONNECT = _class.staticFieldId(
    r'BLUETOOTH_CONNECT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLUETOOTH_CONNECT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLUETOOTH_CONNECT =>
      _id_BLUETOOTH_CONNECT.get(_class, const jni$_.JStringNullableType());

  static final _id_BLUETOOTH_PRIVILEGED = _class.staticFieldId(
    r'BLUETOOTH_PRIVILEGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLUETOOTH_PRIVILEGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLUETOOTH_PRIVILEGED =>
      _id_BLUETOOTH_PRIVILEGED.get(_class, const jni$_.JStringNullableType());

  static final _id_BLUETOOTH_SCAN = _class.staticFieldId(
    r'BLUETOOTH_SCAN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLUETOOTH_SCAN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLUETOOTH_SCAN =>
      _id_BLUETOOTH_SCAN.get(_class, const jni$_.JStringNullableType());

  static final _id_BODY_SENSORS = _class.staticFieldId(
    r'BODY_SENSORS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BODY_SENSORS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BODY_SENSORS =>
      _id_BODY_SENSORS.get(_class, const jni$_.JStringNullableType());

  static final _id_BODY_SENSORS_BACKGROUND = _class.staticFieldId(
    r'BODY_SENSORS_BACKGROUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BODY_SENSORS_BACKGROUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BODY_SENSORS_BACKGROUND =>
      _id_BODY_SENSORS_BACKGROUND.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BROADCAST_PACKAGE_REMOVED = _class.staticFieldId(
    r'BROADCAST_PACKAGE_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BROADCAST_PACKAGE_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BROADCAST_PACKAGE_REMOVED =>
      _id_BROADCAST_PACKAGE_REMOVED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_BROADCAST_SMS = _class.staticFieldId(
    r'BROADCAST_SMS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BROADCAST_SMS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BROADCAST_SMS =>
      _id_BROADCAST_SMS.get(_class, const jni$_.JStringNullableType());

  static final _id_BROADCAST_STICKY = _class.staticFieldId(
    r'BROADCAST_STICKY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BROADCAST_STICKY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BROADCAST_STICKY =>
      _id_BROADCAST_STICKY.get(_class, const jni$_.JStringNullableType());

  static final _id_BROADCAST_WAP_PUSH = _class.staticFieldId(
    r'BROADCAST_WAP_PUSH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BROADCAST_WAP_PUSH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BROADCAST_WAP_PUSH =>
      _id_BROADCAST_WAP_PUSH.get(_class, const jni$_.JStringNullableType());

  static final _id_CALL_COMPANION_APP = _class.staticFieldId(
    r'CALL_COMPANION_APP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CALL_COMPANION_APP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CALL_COMPANION_APP =>
      _id_CALL_COMPANION_APP.get(_class, const jni$_.JStringNullableType());

  static final _id_CALL_PHONE = _class.staticFieldId(
    r'CALL_PHONE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CALL_PHONE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CALL_PHONE =>
      _id_CALL_PHONE.get(_class, const jni$_.JStringNullableType());

  static final _id_CALL_PRIVILEGED = _class.staticFieldId(
    r'CALL_PRIVILEGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CALL_PRIVILEGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CALL_PRIVILEGED =>
      _id_CALL_PRIVILEGED.get(_class, const jni$_.JStringNullableType());

  static final _id_CAMERA = _class.staticFieldId(
    r'CAMERA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAMERA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAMERA =>
      _id_CAMERA.get(_class, const jni$_.JStringNullableType());

  static final _id_CAPTURE_AUDIO_OUTPUT = _class.staticFieldId(
    r'CAPTURE_AUDIO_OUTPUT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAPTURE_AUDIO_OUTPUT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAPTURE_AUDIO_OUTPUT =>
      _id_CAPTURE_AUDIO_OUTPUT.get(_class, const jni$_.JStringNullableType());

  static final _id_CHANGE_COMPONENT_ENABLED_STATE = _class.staticFieldId(
    r'CHANGE_COMPONENT_ENABLED_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CHANGE_COMPONENT_ENABLED_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CHANGE_COMPONENT_ENABLED_STATE =>
      _id_CHANGE_COMPONENT_ENABLED_STATE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_CHANGE_CONFIGURATION = _class.staticFieldId(
    r'CHANGE_CONFIGURATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CHANGE_CONFIGURATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CHANGE_CONFIGURATION =>
      _id_CHANGE_CONFIGURATION.get(_class, const jni$_.JStringNullableType());

  static final _id_CHANGE_NETWORK_STATE = _class.staticFieldId(
    r'CHANGE_NETWORK_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CHANGE_NETWORK_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CHANGE_NETWORK_STATE =>
      _id_CHANGE_NETWORK_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_CHANGE_WIFI_MULTICAST_STATE = _class.staticFieldId(
    r'CHANGE_WIFI_MULTICAST_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CHANGE_WIFI_MULTICAST_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CHANGE_WIFI_MULTICAST_STATE =>
      _id_CHANGE_WIFI_MULTICAST_STATE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_CHANGE_WIFI_STATE = _class.staticFieldId(
    r'CHANGE_WIFI_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CHANGE_WIFI_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CHANGE_WIFI_STATE =>
      _id_CHANGE_WIFI_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_CLEAR_APP_CACHE = _class.staticFieldId(
    r'CLEAR_APP_CACHE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CLEAR_APP_CACHE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CLEAR_APP_CACHE =>
      _id_CLEAR_APP_CACHE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONFIGURE_WIFI_DISPLAY = _class.staticFieldId(
    r'CONFIGURE_WIFI_DISPLAY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONFIGURE_WIFI_DISPLAY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONFIGURE_WIFI_DISPLAY =>
      _id_CONFIGURE_WIFI_DISPLAY.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTROL_LOCATION_UPDATES = _class.staticFieldId(
    r'CONTROL_LOCATION_UPDATES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTROL_LOCATION_UPDATES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTROL_LOCATION_UPDATES =>
      _id_CONTROL_LOCATION_UPDATES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALS = _class
      .staticFieldId(
        r'CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALS',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALS =>
      _id_CREDENTIAL_MANAGER_QUERY_CANDIDATE_CREDENTIALS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERS = _class
      .staticFieldId(
        r'CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERS',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERS =>
      _id_CREDENTIAL_MANAGER_SET_ALLOWED_PROVIDERS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_CREDENTIAL_MANAGER_SET_ORIGIN = _class.staticFieldId(
    r'CREDENTIAL_MANAGER_SET_ORIGIN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CREDENTIAL_MANAGER_SET_ORIGIN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CREDENTIAL_MANAGER_SET_ORIGIN =>
      _id_CREDENTIAL_MANAGER_SET_ORIGIN.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_DELETE_CACHE_FILES = _class.staticFieldId(
    r'DELETE_CACHE_FILES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DELETE_CACHE_FILES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DELETE_CACHE_FILES =>
      _id_DELETE_CACHE_FILES.get(_class, const jni$_.JStringNullableType());

  static final _id_DELETE_PACKAGES = _class.staticFieldId(
    r'DELETE_PACKAGES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DELETE_PACKAGES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DELETE_PACKAGES =>
      _id_DELETE_PACKAGES.get(_class, const jni$_.JStringNullableType());

  static final _id_DELIVER_COMPANION_MESSAGES = _class.staticFieldId(
    r'DELIVER_COMPANION_MESSAGES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DELIVER_COMPANION_MESSAGES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DELIVER_COMPANION_MESSAGES =>
      _id_DELIVER_COMPANION_MESSAGES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_DETECT_SCREEN_CAPTURE = _class.staticFieldId(
    r'DETECT_SCREEN_CAPTURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DETECT_SCREEN_CAPTURE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DETECT_SCREEN_CAPTURE =>
      _id_DETECT_SCREEN_CAPTURE.get(_class, const jni$_.JStringNullableType());

  static final _id_DETECT_SCREEN_RECORDING = _class.staticFieldId(
    r'DETECT_SCREEN_RECORDING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DETECT_SCREEN_RECORDING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DETECT_SCREEN_RECORDING =>
      _id_DETECT_SCREEN_RECORDING.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_DIAGNOSTIC = _class.staticFieldId(
    r'DIAGNOSTIC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DIAGNOSTIC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DIAGNOSTIC =>
      _id_DIAGNOSTIC.get(_class, const jni$_.JStringNullableType());

  static final _id_DISABLE_KEYGUARD = _class.staticFieldId(
    r'DISABLE_KEYGUARD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISABLE_KEYGUARD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISABLE_KEYGUARD =>
      _id_DISABLE_KEYGUARD.get(_class, const jni$_.JStringNullableType());

  static final _id_DUMP = _class.staticFieldId(r'DUMP', r'Ljava/lang/String;');

  /// from: `static public final java.lang.String DUMP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DUMP =>
      _id_DUMP.get(_class, const jni$_.JStringNullableType());

  static final _id_ENFORCE_UPDATE_OWNERSHIP = _class.staticFieldId(
    r'ENFORCE_UPDATE_OWNERSHIP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ENFORCE_UPDATE_OWNERSHIP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ENFORCE_UPDATE_OWNERSHIP =>
      _id_ENFORCE_UPDATE_OWNERSHIP.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_EXECUTE_APP_ACTION = _class.staticFieldId(
    r'EXECUTE_APP_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXECUTE_APP_ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXECUTE_APP_ACTION =>
      _id_EXECUTE_APP_ACTION.get(_class, const jni$_.JStringNullableType());

  static final _id_EXPAND_STATUS_BAR = _class.staticFieldId(
    r'EXPAND_STATUS_BAR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXPAND_STATUS_BAR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXPAND_STATUS_BAR =>
      _id_EXPAND_STATUS_BAR.get(_class, const jni$_.JStringNullableType());

  static final _id_FACTORY_TEST = _class.staticFieldId(
    r'FACTORY_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FACTORY_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FACTORY_TEST =>
      _id_FACTORY_TEST.get(_class, const jni$_.JStringNullableType());

  static final _id_FOREGROUND_SERVICE = _class.staticFieldId(
    r'FOREGROUND_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE =>
      _id_FOREGROUND_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_FOREGROUND_SERVICE_CAMERA = _class.staticFieldId(
    r'FOREGROUND_SERVICE_CAMERA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE_CAMERA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE_CAMERA =>
      _id_FOREGROUND_SERVICE_CAMERA.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_FOREGROUND_SERVICE_CONNECTED_DEVICE = _class.staticFieldId(
    r'FOREGROUND_SERVICE_CONNECTED_DEVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE_CONNECTED_DEVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE_CONNECTED_DEVICE =>
      _id_FOREGROUND_SERVICE_CONNECTED_DEVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_FOREGROUND_SERVICE_DATA_SYNC = _class.staticFieldId(
    r'FOREGROUND_SERVICE_DATA_SYNC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE_DATA_SYNC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE_DATA_SYNC =>
      _id_FOREGROUND_SERVICE_DATA_SYNC.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_FOREGROUND_SERVICE_HEALTH = _class.staticFieldId(
    r'FOREGROUND_SERVICE_HEALTH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE_HEALTH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE_HEALTH =>
      _id_FOREGROUND_SERVICE_HEALTH.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_FOREGROUND_SERVICE_LOCATION = _class.staticFieldId(
    r'FOREGROUND_SERVICE_LOCATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE_LOCATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE_LOCATION =>
      _id_FOREGROUND_SERVICE_LOCATION.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_FOREGROUND_SERVICE_MEDIA_PLAYBACK = _class.staticFieldId(
    r'FOREGROUND_SERVICE_MEDIA_PLAYBACK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE_MEDIA_PLAYBACK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE_MEDIA_PLAYBACK =>
      _id_FOREGROUND_SERVICE_MEDIA_PLAYBACK.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_FOREGROUND_SERVICE_MEDIA_PROCESSING = _class.staticFieldId(
    r'FOREGROUND_SERVICE_MEDIA_PROCESSING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE_MEDIA_PROCESSING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE_MEDIA_PROCESSING =>
      _id_FOREGROUND_SERVICE_MEDIA_PROCESSING.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_FOREGROUND_SERVICE_MEDIA_PROJECTION = _class.staticFieldId(
    r'FOREGROUND_SERVICE_MEDIA_PROJECTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE_MEDIA_PROJECTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE_MEDIA_PROJECTION =>
      _id_FOREGROUND_SERVICE_MEDIA_PROJECTION.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_FOREGROUND_SERVICE_MICROPHONE = _class.staticFieldId(
    r'FOREGROUND_SERVICE_MICROPHONE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE_MICROPHONE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE_MICROPHONE =>
      _id_FOREGROUND_SERVICE_MICROPHONE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_FOREGROUND_SERVICE_PHONE_CALL = _class.staticFieldId(
    r'FOREGROUND_SERVICE_PHONE_CALL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE_PHONE_CALL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE_PHONE_CALL =>
      _id_FOREGROUND_SERVICE_PHONE_CALL.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_FOREGROUND_SERVICE_REMOTE_MESSAGING = _class.staticFieldId(
    r'FOREGROUND_SERVICE_REMOTE_MESSAGING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE_REMOTE_MESSAGING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE_REMOTE_MESSAGING =>
      _id_FOREGROUND_SERVICE_REMOTE_MESSAGING.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_FOREGROUND_SERVICE_SPECIAL_USE = _class.staticFieldId(
    r'FOREGROUND_SERVICE_SPECIAL_USE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE_SPECIAL_USE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE_SPECIAL_USE =>
      _id_FOREGROUND_SERVICE_SPECIAL_USE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_FOREGROUND_SERVICE_SYSTEM_EXEMPTED = _class.staticFieldId(
    r'FOREGROUND_SERVICE_SYSTEM_EXEMPTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FOREGROUND_SERVICE_SYSTEM_EXEMPTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FOREGROUND_SERVICE_SYSTEM_EXEMPTED =>
      _id_FOREGROUND_SERVICE_SYSTEM_EXEMPTED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_GET_ACCOUNTS = _class.staticFieldId(
    r'GET_ACCOUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GET_ACCOUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GET_ACCOUNTS =>
      _id_GET_ACCOUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_GET_ACCOUNTS_PRIVILEGED = _class.staticFieldId(
    r'GET_ACCOUNTS_PRIVILEGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GET_ACCOUNTS_PRIVILEGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GET_ACCOUNTS_PRIVILEGED =>
      _id_GET_ACCOUNTS_PRIVILEGED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_GET_PACKAGE_SIZE = _class.staticFieldId(
    r'GET_PACKAGE_SIZE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GET_PACKAGE_SIZE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GET_PACKAGE_SIZE =>
      _id_GET_PACKAGE_SIZE.get(_class, const jni$_.JStringNullableType());

  static final _id_GET_TASKS = _class.staticFieldId(
    r'GET_TASKS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GET_TASKS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GET_TASKS =>
      _id_GET_TASKS.get(_class, const jni$_.JStringNullableType());

  static final _id_GLOBAL_SEARCH = _class.staticFieldId(
    r'GLOBAL_SEARCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GLOBAL_SEARCH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GLOBAL_SEARCH =>
      _id_GLOBAL_SEARCH.get(_class, const jni$_.JStringNullableType());

  static final _id_HIDE_OVERLAY_WINDOWS = _class.staticFieldId(
    r'HIDE_OVERLAY_WINDOWS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HIDE_OVERLAY_WINDOWS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get HIDE_OVERLAY_WINDOWS =>
      _id_HIDE_OVERLAY_WINDOWS.get(_class, const jni$_.JStringNullableType());

  static final _id_HIGH_SAMPLING_RATE_SENSORS = _class.staticFieldId(
    r'HIGH_SAMPLING_RATE_SENSORS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HIGH_SAMPLING_RATE_SENSORS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get HIGH_SAMPLING_RATE_SENSORS =>
      _id_HIGH_SAMPLING_RATE_SENSORS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_INSTALL_LOCATION_PROVIDER = _class.staticFieldId(
    r'INSTALL_LOCATION_PROVIDER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INSTALL_LOCATION_PROVIDER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INSTALL_LOCATION_PROVIDER =>
      _id_INSTALL_LOCATION_PROVIDER.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_INSTALL_PACKAGES = _class.staticFieldId(
    r'INSTALL_PACKAGES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INSTALL_PACKAGES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INSTALL_PACKAGES =>
      _id_INSTALL_PACKAGES.get(_class, const jni$_.JStringNullableType());

  static final _id_INSTALL_SHORTCUT = _class.staticFieldId(
    r'INSTALL_SHORTCUT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INSTALL_SHORTCUT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INSTALL_SHORTCUT =>
      _id_INSTALL_SHORTCUT.get(_class, const jni$_.JStringNullableType());

  static final _id_INSTANT_APP_FOREGROUND_SERVICE = _class.staticFieldId(
    r'INSTANT_APP_FOREGROUND_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INSTANT_APP_FOREGROUND_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INSTANT_APP_FOREGROUND_SERVICE =>
      _id_INSTANT_APP_FOREGROUND_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_INTERACT_ACROSS_PROFILES = _class.staticFieldId(
    r'INTERACT_ACROSS_PROFILES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INTERACT_ACROSS_PROFILES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INTERACT_ACROSS_PROFILES =>
      _id_INTERACT_ACROSS_PROFILES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_INTERNET = _class.staticFieldId(
    r'INTERNET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INTERNET`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INTERNET =>
      _id_INTERNET.get(_class, const jni$_.JStringNullableType());

  static final _id_KILL_BACKGROUND_PROCESSES = _class.staticFieldId(
    r'KILL_BACKGROUND_PROCESSES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String KILL_BACKGROUND_PROCESSES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get KILL_BACKGROUND_PROCESSES =>
      _id_KILL_BACKGROUND_PROCESSES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE = _class
      .staticFieldId(
        r'LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE =>
      _id_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINK = _class.staticFieldId(
    r'LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINK =>
      _id_LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINK.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_LOADER_USAGE_STATS = _class.staticFieldId(
    r'LOADER_USAGE_STATS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOADER_USAGE_STATS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOADER_USAGE_STATS =>
      _id_LOADER_USAGE_STATS.get(_class, const jni$_.JStringNullableType());

  static final _id_LOCATION_HARDWARE = _class.staticFieldId(
    r'LOCATION_HARDWARE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCATION_HARDWARE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCATION_HARDWARE =>
      _id_LOCATION_HARDWARE.get(_class, const jni$_.JStringNullableType());

  static final _id_MANAGE_DEVICE_LOCK_STATE = _class.staticFieldId(
    r'MANAGE_DEVICE_LOCK_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_LOCK_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_LOCK_STATE =>
      _id_MANAGE_DEVICE_LOCK_STATE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_ACCESSIBILITY = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_ACCESSIBILITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_ACCESSIBILITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_ACCESSIBILITY =>
      _id_MANAGE_DEVICE_POLICY_ACCESSIBILITY.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT =>
      _id_MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_ACROSS_USERS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_ACROSS_USERS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_ACROSS_USERS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_ACROSS_USERS =>
      _id_MANAGE_DEVICE_POLICY_ACROSS_USERS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL =>
      _id_MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString?
  get MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL =>
      _id_MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_AIRPLANE_MODE = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_AIRPLANE_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_AIRPLANE_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_AIRPLANE_MODE =>
      _id_MANAGE_DEVICE_POLICY_AIRPLANE_MODE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_APPS_CONTROL = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_APPS_CONTROL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_APPS_CONTROL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_APPS_CONTROL =>
      _id_MANAGE_DEVICE_POLICY_APPS_CONTROL.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_APP_RESTRICTIONS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_APP_RESTRICTIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_APP_RESTRICTIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_APP_RESTRICTIONS =>
      _id_MANAGE_DEVICE_POLICY_APP_RESTRICTIONS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_APP_USER_DATA = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_APP_USER_DATA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_APP_USER_DATA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_APP_USER_DATA =>
      _id_MANAGE_DEVICE_POLICY_APP_USER_DATA.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_ASSIST_CONTENT = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_ASSIST_CONTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_ASSIST_CONTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_ASSIST_CONTENT =>
      _id_MANAGE_DEVICE_POLICY_ASSIST_CONTENT.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_AUDIO_OUTPUT = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_AUDIO_OUTPUT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_AUDIO_OUTPUT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_AUDIO_OUTPUT =>
      _id_MANAGE_DEVICE_POLICY_AUDIO_OUTPUT.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_AUTOFILL = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_AUTOFILL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_AUTOFILL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_AUTOFILL =>
      _id_MANAGE_DEVICE_POLICY_AUTOFILL.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_BACKUP_SERVICE = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_BACKUP_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_BACKUP_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_BACKUP_SERVICE =>
      _id_MANAGE_DEVICE_POLICY_BACKUP_SERVICE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_BLOCK_UNINSTALL = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_BLOCK_UNINSTALL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_BLOCK_UNINSTALL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_BLOCK_UNINSTALL =>
      _id_MANAGE_DEVICE_POLICY_BLOCK_UNINSTALL.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_BLUETOOTH = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_BLUETOOTH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_BLUETOOTH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_BLUETOOTH =>
      _id_MANAGE_DEVICE_POLICY_BLUETOOTH.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_BUGREPORT = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_BUGREPORT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_BUGREPORT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_BUGREPORT =>
      _id_MANAGE_DEVICE_POLICY_BUGREPORT.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_CALLS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_CALLS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_CALLS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_CALLS =>
      _id_MANAGE_DEVICE_POLICY_CALLS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_CAMERA = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_CAMERA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_CAMERA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_CAMERA =>
      _id_MANAGE_DEVICE_POLICY_CAMERA.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_CAMERA_TOGGLE = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_CAMERA_TOGGLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_CAMERA_TOGGLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_CAMERA_TOGGLE =>
      _id_MANAGE_DEVICE_POLICY_CAMERA_TOGGLE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_CERTIFICATES = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_CERTIFICATES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_CERTIFICATES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_CERTIFICATES =>
      _id_MANAGE_DEVICE_POLICY_CERTIFICATES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODE = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODE',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODE =>
      _id_MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_CONTENT_PROTECTION = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_CONTENT_PROTECTION',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_CONTENT_PROTECTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_CONTENT_PROTECTION =>
      _id_MANAGE_DEVICE_POLICY_CONTENT_PROTECTION.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_DEBUGGING_FEATURES = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_DEBUGGING_FEATURES',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_DEBUGGING_FEATURES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_DEBUGGING_FEATURES =>
      _id_MANAGE_DEVICE_POLICY_DEBUGGING_FEATURES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_DEFAULT_SMS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_DEFAULT_SMS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_DEFAULT_SMS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_DEFAULT_SMS =>
      _id_MANAGE_DEVICE_POLICY_DEFAULT_SMS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERS = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERS',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERS =>
      _id_MANAGE_DEVICE_POLICY_DEVICE_IDENTIFIERS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_DISPLAY = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_DISPLAY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_DISPLAY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_DISPLAY =>
      _id_MANAGE_DEVICE_POLICY_DISPLAY.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_FACTORY_RESET = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_FACTORY_RESET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_FACTORY_RESET`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_FACTORY_RESET =>
      _id_MANAGE_DEVICE_POLICY_FACTORY_RESET.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_FUN = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_FUN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_FUN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_FUN =>
      _id_MANAGE_DEVICE_POLICY_FUN.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_INPUT_METHODS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_INPUT_METHODS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_INPUT_METHODS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_INPUT_METHODS =>
      _id_MANAGE_DEVICE_POLICY_INPUT_METHODS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES =>
      _id_MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGES = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGES',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGES =>
      _id_MANAGE_DEVICE_POLICY_KEEP_UNINSTALLED_PACKAGES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_KEYGUARD = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_KEYGUARD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_KEYGUARD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_KEYGUARD =>
      _id_MANAGE_DEVICE_POLICY_KEYGUARD.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_LOCALE = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_LOCALE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_LOCALE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_LOCALE =>
      _id_MANAGE_DEVICE_POLICY_LOCALE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_LOCATION = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_LOCATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_LOCATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_LOCATION =>
      _id_MANAGE_DEVICE_POLICY_LOCATION.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_LOCK = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_LOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_LOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_LOCK =>
      _id_MANAGE_DEVICE_POLICY_LOCK.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS =>
      _id_MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_LOCK_TASK = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_LOCK_TASK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_LOCK_TASK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_LOCK_TASK =>
      _id_MANAGE_DEVICE_POLICY_LOCK_TASK.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONS = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONS',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONS =>
      _id_MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_METERED_DATA = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_METERED_DATA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_METERED_DATA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_METERED_DATA =>
      _id_MANAGE_DEVICE_POLICY_METERED_DATA.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_MICROPHONE = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_MICROPHONE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_MICROPHONE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_MICROPHONE =>
      _id_MANAGE_DEVICE_POLICY_MICROPHONE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLE = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLE',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLE =>
      _id_MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_MOBILE_NETWORK = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_MOBILE_NETWORK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_MOBILE_NETWORK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_MOBILE_NETWORK =>
      _id_MANAGE_DEVICE_POLICY_MOBILE_NETWORK.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_MODIFY_USERS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_MODIFY_USERS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_MODIFY_USERS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_MODIFY_USERS =>
      _id_MANAGE_DEVICE_POLICY_MODIFY_USERS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_MTE = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_MTE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_MTE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_MTE =>
      _id_MANAGE_DEVICE_POLICY_MTE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION =>
      _id_MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_NETWORK_LOGGING = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_NETWORK_LOGGING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_NETWORK_LOGGING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_NETWORK_LOGGING =>
      _id_MANAGE_DEVICE_POLICY_NETWORK_LOGGING.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY =>
      _id_MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_OVERRIDE_APN = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_OVERRIDE_APN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_OVERRIDE_APN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_OVERRIDE_APN =>
      _id_MANAGE_DEVICE_POLICY_OVERRIDE_APN.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_PACKAGE_STATE = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_PACKAGE_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_PACKAGE_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_PACKAGE_STATE =>
      _id_MANAGE_DEVICE_POLICY_PACKAGE_STATE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_PHYSICAL_MEDIA = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_PHYSICAL_MEDIA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_PHYSICAL_MEDIA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_PHYSICAL_MEDIA =>
      _id_MANAGE_DEVICE_POLICY_PHYSICAL_MEDIA.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_PRINTING = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_PRINTING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_PRINTING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_PRINTING =>
      _id_MANAGE_DEVICE_POLICY_PRINTING.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_PRIVATE_DNS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_PRIVATE_DNS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_PRIVATE_DNS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_PRIVATE_DNS =>
      _id_MANAGE_DEVICE_POLICY_PRIVATE_DNS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_PROFILES = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_PROFILES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_PROFILES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_PROFILES =>
      _id_MANAGE_DEVICE_POLICY_PROFILES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_PROFILE_INTERACTION = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_PROFILE_INTERACTION',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_PROFILE_INTERACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_PROFILE_INTERACTION =>
      _id_MANAGE_DEVICE_POLICY_PROFILE_INTERACTION.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_PROXY = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_PROXY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_PROXY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_PROXY =>
      _id_MANAGE_DEVICE_POLICY_PROXY.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATES = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATES',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATES =>
      _id_MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_RESET_PASSWORD = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_RESET_PASSWORD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_RESET_PASSWORD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_RESET_PASSWORD =>
      _id_MANAGE_DEVICE_POLICY_RESET_PASSWORD.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNS = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNS',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNS =>
      _id_MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS =>
      _id_MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUND = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUND',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUND =>
      _id_MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUND.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_SAFE_BOOT = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_SAFE_BOOT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_SAFE_BOOT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_SAFE_BOOT =>
      _id_MANAGE_DEVICE_POLICY_SAFE_BOOT.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_SCREEN_CAPTURE = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_SCREEN_CAPTURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_SCREEN_CAPTURE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_SCREEN_CAPTURE =>
      _id_MANAGE_DEVICE_POLICY_SCREEN_CAPTURE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_SCREEN_CONTENT = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_SCREEN_CONTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_SCREEN_CONTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_SCREEN_CONTENT =>
      _id_MANAGE_DEVICE_POLICY_SCREEN_CONTENT.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_SECURITY_LOGGING = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_SECURITY_LOGGING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_SECURITY_LOGGING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_SECURITY_LOGGING =>
      _id_MANAGE_DEVICE_POLICY_SECURITY_LOGGING.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_SETTINGS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_SETTINGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_SETTINGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_SETTINGS =>
      _id_MANAGE_DEVICE_POLICY_SETTINGS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_SMS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_SMS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_SMS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_SMS =>
      _id_MANAGE_DEVICE_POLICY_SMS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_STATUS_BAR = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_STATUS_BAR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_STATUS_BAR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_STATUS_BAR =>
      _id_MANAGE_DEVICE_POLICY_STATUS_BAR.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE =>
      _id_MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPS = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPS',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPS =>
      _id_MANAGE_DEVICE_POLICY_SUSPEND_PERSONAL_APPS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_SYSTEM_APPS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_SYSTEM_APPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_SYSTEM_APPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_SYSTEM_APPS =>
      _id_MANAGE_DEVICE_POLICY_SYSTEM_APPS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_SYSTEM_DIALOGS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_SYSTEM_DIALOGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_SYSTEM_DIALOGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_SYSTEM_DIALOGS =>
      _id_MANAGE_DEVICE_POLICY_SYSTEM_DIALOGS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_SYSTEM_UPDATES = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_SYSTEM_UPDATES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_SYSTEM_UPDATES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_SYSTEM_UPDATES =>
      _id_MANAGE_DEVICE_POLICY_SYSTEM_UPDATES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_TIME = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_TIME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_TIME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_TIME =>
      _id_MANAGE_DEVICE_POLICY_TIME.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLING = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLING',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLING =>
      _id_MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLING.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_USB_FILE_TRANSFER = _class
      .staticFieldId(
        r'MANAGE_DEVICE_POLICY_USB_FILE_TRANSFER',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_USB_FILE_TRANSFER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_USB_FILE_TRANSFER =>
      _id_MANAGE_DEVICE_POLICY_USB_FILE_TRANSFER.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_USERS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_USERS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_USERS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_USERS =>
      _id_MANAGE_DEVICE_POLICY_USERS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_VPN = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_VPN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_VPN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_VPN =>
      _id_MANAGE_DEVICE_POLICY_VPN.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_WALLPAPER = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_WALLPAPER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_WALLPAPER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_WALLPAPER =>
      _id_MANAGE_DEVICE_POLICY_WALLPAPER.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_WIFI = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_WIFI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_WIFI`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_WIFI =>
      _id_MANAGE_DEVICE_POLICY_WIFI.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_WINDOWS = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_WINDOWS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_WINDOWS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_WINDOWS =>
      _id_MANAGE_DEVICE_POLICY_WINDOWS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DEVICE_POLICY_WIPE_DATA = _class.staticFieldId(
    r'MANAGE_DEVICE_POLICY_WIPE_DATA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DEVICE_POLICY_WIPE_DATA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DEVICE_POLICY_WIPE_DATA =>
      _id_MANAGE_DEVICE_POLICY_WIPE_DATA.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_DOCUMENTS = _class.staticFieldId(
    r'MANAGE_DOCUMENTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_DOCUMENTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_DOCUMENTS =>
      _id_MANAGE_DOCUMENTS.get(_class, const jni$_.JStringNullableType());

  static final _id_MANAGE_EXTERNAL_STORAGE = _class.staticFieldId(
    r'MANAGE_EXTERNAL_STORAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_EXTERNAL_STORAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_EXTERNAL_STORAGE =>
      _id_MANAGE_EXTERNAL_STORAGE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MANAGE_MEDIA = _class.staticFieldId(
    r'MANAGE_MEDIA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_MEDIA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_MEDIA =>
      _id_MANAGE_MEDIA.get(_class, const jni$_.JStringNullableType());

  static final _id_MANAGE_ONGOING_CALLS = _class.staticFieldId(
    r'MANAGE_ONGOING_CALLS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_ONGOING_CALLS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_ONGOING_CALLS =>
      _id_MANAGE_ONGOING_CALLS.get(_class, const jni$_.JStringNullableType());

  static final _id_MANAGE_OWN_CALLS = _class.staticFieldId(
    r'MANAGE_OWN_CALLS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_OWN_CALLS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_OWN_CALLS =>
      _id_MANAGE_OWN_CALLS.get(_class, const jni$_.JStringNullableType());

  static final _id_MANAGE_WIFI_INTERFACES = _class.staticFieldId(
    r'MANAGE_WIFI_INTERFACES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_WIFI_INTERFACES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_WIFI_INTERFACES =>
      _id_MANAGE_WIFI_INTERFACES.get(_class, const jni$_.JStringNullableType());

  static final _id_MANAGE_WIFI_NETWORK_SELECTION = _class.staticFieldId(
    r'MANAGE_WIFI_NETWORK_SELECTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MANAGE_WIFI_NETWORK_SELECTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MANAGE_WIFI_NETWORK_SELECTION =>
      _id_MANAGE_WIFI_NETWORK_SELECTION.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MASTER_CLEAR = _class.staticFieldId(
    r'MASTER_CLEAR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MASTER_CLEAR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MASTER_CLEAR =>
      _id_MASTER_CLEAR.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_CONTENT_CONTROL = _class.staticFieldId(
    r'MEDIA_CONTENT_CONTROL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_CONTENT_CONTROL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_CONTENT_CONTROL =>
      _id_MEDIA_CONTENT_CONTROL.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_ROUTING_CONTROL = _class.staticFieldId(
    r'MEDIA_ROUTING_CONTROL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_ROUTING_CONTROL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_ROUTING_CONTROL =>
      _id_MEDIA_ROUTING_CONTROL.get(_class, const jni$_.JStringNullableType());

  static final _id_MODIFY_AUDIO_SETTINGS = _class.staticFieldId(
    r'MODIFY_AUDIO_SETTINGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MODIFY_AUDIO_SETTINGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MODIFY_AUDIO_SETTINGS =>
      _id_MODIFY_AUDIO_SETTINGS.get(_class, const jni$_.JStringNullableType());

  static final _id_MODIFY_PHONE_STATE = _class.staticFieldId(
    r'MODIFY_PHONE_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MODIFY_PHONE_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MODIFY_PHONE_STATE =>
      _id_MODIFY_PHONE_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_MOUNT_FORMAT_FILESYSTEMS = _class.staticFieldId(
    r'MOUNT_FORMAT_FILESYSTEMS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MOUNT_FORMAT_FILESYSTEMS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MOUNT_FORMAT_FILESYSTEMS =>
      _id_MOUNT_FORMAT_FILESYSTEMS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_MOUNT_UNMOUNT_FILESYSTEMS = _class.staticFieldId(
    r'MOUNT_UNMOUNT_FILESYSTEMS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MOUNT_UNMOUNT_FILESYSTEMS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MOUNT_UNMOUNT_FILESYSTEMS =>
      _id_MOUNT_UNMOUNT_FILESYSTEMS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_NEARBY_WIFI_DEVICES = _class.staticFieldId(
    r'NEARBY_WIFI_DEVICES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NEARBY_WIFI_DEVICES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NEARBY_WIFI_DEVICES =>
      _id_NEARBY_WIFI_DEVICES.get(_class, const jni$_.JStringNullableType());

  static final _id_NFC = _class.staticFieldId(r'NFC', r'Ljava/lang/String;');

  /// from: `static public final java.lang.String NFC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NFC =>
      _id_NFC.get(_class, const jni$_.JStringNullableType());

  static final _id_NFC_PREFERRED_PAYMENT_INFO = _class.staticFieldId(
    r'NFC_PREFERRED_PAYMENT_INFO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NFC_PREFERRED_PAYMENT_INFO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NFC_PREFERRED_PAYMENT_INFO =>
      _id_NFC_PREFERRED_PAYMENT_INFO.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_NFC_TRANSACTION_EVENT = _class.staticFieldId(
    r'NFC_TRANSACTION_EVENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NFC_TRANSACTION_EVENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NFC_TRANSACTION_EVENT =>
      _id_NFC_TRANSACTION_EVENT.get(_class, const jni$_.JStringNullableType());

  static final _id_OVERRIDE_WIFI_CONFIG = _class.staticFieldId(
    r'OVERRIDE_WIFI_CONFIG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String OVERRIDE_WIFI_CONFIG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get OVERRIDE_WIFI_CONFIG =>
      _id_OVERRIDE_WIFI_CONFIG.get(_class, const jni$_.JStringNullableType());

  static final _id_PACKAGE_USAGE_STATS = _class.staticFieldId(
    r'PACKAGE_USAGE_STATS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PACKAGE_USAGE_STATS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PACKAGE_USAGE_STATS =>
      _id_PACKAGE_USAGE_STATS.get(_class, const jni$_.JStringNullableType());

  static final _id_PERSISTENT_ACTIVITY = _class.staticFieldId(
    r'PERSISTENT_ACTIVITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERSISTENT_ACTIVITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PERSISTENT_ACTIVITY =>
      _id_PERSISTENT_ACTIVITY.get(_class, const jni$_.JStringNullableType());

  static final _id_POST_NOTIFICATIONS = _class.staticFieldId(
    r'POST_NOTIFICATIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String POST_NOTIFICATIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get POST_NOTIFICATIONS =>
      _id_POST_NOTIFICATIONS.get(_class, const jni$_.JStringNullableType());

  static final _id_PROCESS_OUTGOING_CALLS = _class.staticFieldId(
    r'PROCESS_OUTGOING_CALLS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROCESS_OUTGOING_CALLS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PROCESS_OUTGOING_CALLS =>
      _id_PROCESS_OUTGOING_CALLS.get(_class, const jni$_.JStringNullableType());

  static final _id_PROVIDE_OWN_AUTOFILL_SUGGESTIONS = _class.staticFieldId(
    r'PROVIDE_OWN_AUTOFILL_SUGGESTIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROVIDE_OWN_AUTOFILL_SUGGESTIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PROVIDE_OWN_AUTOFILL_SUGGESTIONS =>
      _id_PROVIDE_OWN_AUTOFILL_SUGGESTIONS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_PROVIDE_REMOTE_CREDENTIALS = _class.staticFieldId(
    r'PROVIDE_REMOTE_CREDENTIALS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROVIDE_REMOTE_CREDENTIALS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PROVIDE_REMOTE_CREDENTIALS =>
      _id_PROVIDE_REMOTE_CREDENTIALS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_QUERY_ALL_PACKAGES = _class.staticFieldId(
    r'QUERY_ALL_PACKAGES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ALL_PACKAGES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get QUERY_ALL_PACKAGES =>
      _id_QUERY_ALL_PACKAGES.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_ASSISTANT_APP_SEARCH_DATA = _class.staticFieldId(
    r'READ_ASSISTANT_APP_SEARCH_DATA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_ASSISTANT_APP_SEARCH_DATA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_ASSISTANT_APP_SEARCH_DATA =>
      _id_READ_ASSISTANT_APP_SEARCH_DATA.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_READ_BASIC_PHONE_STATE = _class.staticFieldId(
    r'READ_BASIC_PHONE_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_BASIC_PHONE_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_BASIC_PHONE_STATE =>
      _id_READ_BASIC_PHONE_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_CALENDAR = _class.staticFieldId(
    r'READ_CALENDAR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_CALENDAR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_CALENDAR =>
      _id_READ_CALENDAR.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_CALL_LOG = _class.staticFieldId(
    r'READ_CALL_LOG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_CALL_LOG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_CALL_LOG =>
      _id_READ_CALL_LOG.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_CONTACTS = _class.staticFieldId(
    r'READ_CONTACTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_CONTACTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_CONTACTS =>
      _id_READ_CONTACTS.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_DROPBOX_DATA = _class.staticFieldId(
    r'READ_DROPBOX_DATA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_DROPBOX_DATA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_DROPBOX_DATA =>
      _id_READ_DROPBOX_DATA.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_EXTERNAL_STORAGE = _class.staticFieldId(
    r'READ_EXTERNAL_STORAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_EXTERNAL_STORAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_EXTERNAL_STORAGE =>
      _id_READ_EXTERNAL_STORAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_HOME_APP_SEARCH_DATA = _class.staticFieldId(
    r'READ_HOME_APP_SEARCH_DATA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_HOME_APP_SEARCH_DATA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_HOME_APP_SEARCH_DATA =>
      _id_READ_HOME_APP_SEARCH_DATA.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_READ_INPUT_STATE = _class.staticFieldId(
    r'READ_INPUT_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_INPUT_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_INPUT_STATE =>
      _id_READ_INPUT_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_LOGS = _class.staticFieldId(
    r'READ_LOGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_LOGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_LOGS =>
      _id_READ_LOGS.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_MEDIA_AUDIO = _class.staticFieldId(
    r'READ_MEDIA_AUDIO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_MEDIA_AUDIO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_MEDIA_AUDIO =>
      _id_READ_MEDIA_AUDIO.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_MEDIA_IMAGES = _class.staticFieldId(
    r'READ_MEDIA_IMAGES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_MEDIA_IMAGES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_MEDIA_IMAGES =>
      _id_READ_MEDIA_IMAGES.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_MEDIA_VIDEO = _class.staticFieldId(
    r'READ_MEDIA_VIDEO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_MEDIA_VIDEO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_MEDIA_VIDEO =>
      _id_READ_MEDIA_VIDEO.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_MEDIA_VISUAL_USER_SELECTED = _class.staticFieldId(
    r'READ_MEDIA_VISUAL_USER_SELECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_MEDIA_VISUAL_USER_SELECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_MEDIA_VISUAL_USER_SELECTED =>
      _id_READ_MEDIA_VISUAL_USER_SELECTED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_READ_NEARBY_STREAMING_POLICY = _class.staticFieldId(
    r'READ_NEARBY_STREAMING_POLICY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_NEARBY_STREAMING_POLICY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_NEARBY_STREAMING_POLICY =>
      _id_READ_NEARBY_STREAMING_POLICY.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_READ_PHONE_NUMBERS = _class.staticFieldId(
    r'READ_PHONE_NUMBERS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_PHONE_NUMBERS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_PHONE_NUMBERS =>
      _id_READ_PHONE_NUMBERS.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_PHONE_STATE = _class.staticFieldId(
    r'READ_PHONE_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_PHONE_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_PHONE_STATE =>
      _id_READ_PHONE_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_PRECISE_PHONE_STATE = _class.staticFieldId(
    r'READ_PRECISE_PHONE_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_PRECISE_PHONE_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_PRECISE_PHONE_STATE =>
      _id_READ_PRECISE_PHONE_STATE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_READ_SMS = _class.staticFieldId(
    r'READ_SMS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_SMS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_SMS =>
      _id_READ_SMS.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_SYNC_SETTINGS = _class.staticFieldId(
    r'READ_SYNC_SETTINGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_SYNC_SETTINGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_SYNC_SETTINGS =>
      _id_READ_SYNC_SETTINGS.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_SYNC_STATS = _class.staticFieldId(
    r'READ_SYNC_STATS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_SYNC_STATS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_SYNC_STATS =>
      _id_READ_SYNC_STATS.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_VOICEMAIL = _class.staticFieldId(
    r'READ_VOICEMAIL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_VOICEMAIL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_VOICEMAIL =>
      _id_READ_VOICEMAIL.get(_class, const jni$_.JStringNullableType());

  static final _id_REBOOT = _class.staticFieldId(
    r'REBOOT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REBOOT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REBOOT =>
      _id_REBOOT.get(_class, const jni$_.JStringNullableType());

  static final _id_RECEIVE_BOOT_COMPLETED = _class.staticFieldId(
    r'RECEIVE_BOOT_COMPLETED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RECEIVE_BOOT_COMPLETED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RECEIVE_BOOT_COMPLETED =>
      _id_RECEIVE_BOOT_COMPLETED.get(_class, const jni$_.JStringNullableType());

  static final _id_RECEIVE_MMS = _class.staticFieldId(
    r'RECEIVE_MMS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RECEIVE_MMS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RECEIVE_MMS =>
      _id_RECEIVE_MMS.get(_class, const jni$_.JStringNullableType());

  static final _id_RECEIVE_SMS = _class.staticFieldId(
    r'RECEIVE_SMS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RECEIVE_SMS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RECEIVE_SMS =>
      _id_RECEIVE_SMS.get(_class, const jni$_.JStringNullableType());

  static final _id_RECEIVE_WAP_PUSH = _class.staticFieldId(
    r'RECEIVE_WAP_PUSH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RECEIVE_WAP_PUSH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RECEIVE_WAP_PUSH =>
      _id_RECEIVE_WAP_PUSH.get(_class, const jni$_.JStringNullableType());

  static final _id_RECORD_AUDIO = _class.staticFieldId(
    r'RECORD_AUDIO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RECORD_AUDIO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RECORD_AUDIO =>
      _id_RECORD_AUDIO.get(_class, const jni$_.JStringNullableType());

  static final _id_REORDER_TASKS = _class.staticFieldId(
    r'REORDER_TASKS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REORDER_TASKS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REORDER_TASKS =>
      _id_REORDER_TASKS.get(_class, const jni$_.JStringNullableType());

  static final _id_REQUEST_COMPANION_PROFILE_APP_STREAMING = _class
      .staticFieldId(
        r'REQUEST_COMPANION_PROFILE_APP_STREAMING',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String REQUEST_COMPANION_PROFILE_APP_STREAMING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_COMPANION_PROFILE_APP_STREAMING =>
      _id_REQUEST_COMPANION_PROFILE_APP_STREAMING.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION = _class
      .staticFieldId(
        r'REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION =>
      _id_REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_COMPANION_PROFILE_COMPUTER = _class.staticFieldId(
    r'REQUEST_COMPANION_PROFILE_COMPUTER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REQUEST_COMPANION_PROFILE_COMPUTER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_COMPANION_PROFILE_COMPUTER =>
      _id_REQUEST_COMPANION_PROFILE_COMPUTER.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_COMPANION_PROFILE_GLASSES = _class.staticFieldId(
    r'REQUEST_COMPANION_PROFILE_GLASSES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REQUEST_COMPANION_PROFILE_GLASSES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_COMPANION_PROFILE_GLASSES =>
      _id_REQUEST_COMPANION_PROFILE_GLASSES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMING = _class
      .staticFieldId(
        r'REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMING',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMING =>
      _id_REQUEST_COMPANION_PROFILE_NEARBY_DEVICE_STREAMING.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_COMPANION_PROFILE_WATCH = _class.staticFieldId(
    r'REQUEST_COMPANION_PROFILE_WATCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REQUEST_COMPANION_PROFILE_WATCH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_COMPANION_PROFILE_WATCH =>
      _id_REQUEST_COMPANION_PROFILE_WATCH.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_COMPANION_RUN_IN_BACKGROUND = _class.staticFieldId(
    r'REQUEST_COMPANION_RUN_IN_BACKGROUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REQUEST_COMPANION_RUN_IN_BACKGROUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_COMPANION_RUN_IN_BACKGROUND =>
      _id_REQUEST_COMPANION_RUN_IN_BACKGROUND.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_COMPANION_SELF_MANAGED = _class.staticFieldId(
    r'REQUEST_COMPANION_SELF_MANAGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REQUEST_COMPANION_SELF_MANAGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_COMPANION_SELF_MANAGED =>
      _id_REQUEST_COMPANION_SELF_MANAGED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUND =
      _class.staticFieldId(
        r'REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUND',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString?
  get REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUND =>
      _id_REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUND.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_COMPANION_USE_DATA_IN_BACKGROUND = _class
      .staticFieldId(
        r'REQUEST_COMPANION_USE_DATA_IN_BACKGROUND',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String REQUEST_COMPANION_USE_DATA_IN_BACKGROUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_COMPANION_USE_DATA_IN_BACKGROUND =>
      _id_REQUEST_COMPANION_USE_DATA_IN_BACKGROUND.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_DELETE_PACKAGES = _class.staticFieldId(
    r'REQUEST_DELETE_PACKAGES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REQUEST_DELETE_PACKAGES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_DELETE_PACKAGES =>
      _id_REQUEST_DELETE_PACKAGES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS = _class.staticFieldId(
    r'REQUEST_IGNORE_BATTERY_OPTIMIZATIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REQUEST_IGNORE_BATTERY_OPTIMIZATIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_IGNORE_BATTERY_OPTIMIZATIONS =>
      _id_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_INSTALL_PACKAGES = _class.staticFieldId(
    r'REQUEST_INSTALL_PACKAGES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REQUEST_INSTALL_PACKAGES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_INSTALL_PACKAGES =>
      _id_REQUEST_INSTALL_PACKAGES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE = _class
      .staticFieldId(
        r'REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE =>
      _id_REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_REQUEST_PASSWORD_COMPLEXITY = _class.staticFieldId(
    r'REQUEST_PASSWORD_COMPLEXITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REQUEST_PASSWORD_COMPLEXITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REQUEST_PASSWORD_COMPLEXITY =>
      _id_REQUEST_PASSWORD_COMPLEXITY.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_RESTART_PACKAGES = _class.staticFieldId(
    r'RESTART_PACKAGES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RESTART_PACKAGES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RESTART_PACKAGES =>
      _id_RESTART_PACKAGES.get(_class, const jni$_.JStringNullableType());

  static final _id_RUN_USER_INITIATED_JOBS = _class.staticFieldId(
    r'RUN_USER_INITIATED_JOBS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RUN_USER_INITIATED_JOBS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RUN_USER_INITIATED_JOBS =>
      _id_RUN_USER_INITIATED_JOBS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_SCHEDULE_EXACT_ALARM = _class.staticFieldId(
    r'SCHEDULE_EXACT_ALARM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SCHEDULE_EXACT_ALARM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SCHEDULE_EXACT_ALARM =>
      _id_SCHEDULE_EXACT_ALARM.get(_class, const jni$_.JStringNullableType());

  static final _id_SEND_RESPOND_VIA_MESSAGE = _class.staticFieldId(
    r'SEND_RESPOND_VIA_MESSAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SEND_RESPOND_VIA_MESSAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SEND_RESPOND_VIA_MESSAGE =>
      _id_SEND_RESPOND_VIA_MESSAGE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_SEND_SMS = _class.staticFieldId(
    r'SEND_SMS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SEND_SMS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SEND_SMS =>
      _id_SEND_SMS.get(_class, const jni$_.JStringNullableType());

  static final _id_SET_ALARM = _class.staticFieldId(
    r'SET_ALARM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SET_ALARM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SET_ALARM =>
      _id_SET_ALARM.get(_class, const jni$_.JStringNullableType());

  static final _id_SET_ALWAYS_FINISH = _class.staticFieldId(
    r'SET_ALWAYS_FINISH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SET_ALWAYS_FINISH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SET_ALWAYS_FINISH =>
      _id_SET_ALWAYS_FINISH.get(_class, const jni$_.JStringNullableType());

  static final _id_SET_ANIMATION_SCALE = _class.staticFieldId(
    r'SET_ANIMATION_SCALE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SET_ANIMATION_SCALE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SET_ANIMATION_SCALE =>
      _id_SET_ANIMATION_SCALE.get(_class, const jni$_.JStringNullableType());

  static final _id_SET_BIOMETRIC_DIALOG_ADVANCED = _class.staticFieldId(
    r'SET_BIOMETRIC_DIALOG_ADVANCED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SET_BIOMETRIC_DIALOG_ADVANCED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SET_BIOMETRIC_DIALOG_ADVANCED =>
      _id_SET_BIOMETRIC_DIALOG_ADVANCED.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_SET_DEBUG_APP = _class.staticFieldId(
    r'SET_DEBUG_APP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SET_DEBUG_APP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SET_DEBUG_APP =>
      _id_SET_DEBUG_APP.get(_class, const jni$_.JStringNullableType());

  static final _id_SET_PREFERRED_APPLICATIONS = _class.staticFieldId(
    r'SET_PREFERRED_APPLICATIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SET_PREFERRED_APPLICATIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SET_PREFERRED_APPLICATIONS =>
      _id_SET_PREFERRED_APPLICATIONS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_SET_PROCESS_LIMIT = _class.staticFieldId(
    r'SET_PROCESS_LIMIT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SET_PROCESS_LIMIT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SET_PROCESS_LIMIT =>
      _id_SET_PROCESS_LIMIT.get(_class, const jni$_.JStringNullableType());

  static final _id_SET_TIME = _class.staticFieldId(
    r'SET_TIME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SET_TIME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SET_TIME =>
      _id_SET_TIME.get(_class, const jni$_.JStringNullableType());

  static final _id_SET_TIME_ZONE = _class.staticFieldId(
    r'SET_TIME_ZONE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SET_TIME_ZONE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SET_TIME_ZONE =>
      _id_SET_TIME_ZONE.get(_class, const jni$_.JStringNullableType());

  static final _id_SET_WALLPAPER = _class.staticFieldId(
    r'SET_WALLPAPER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SET_WALLPAPER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SET_WALLPAPER =>
      _id_SET_WALLPAPER.get(_class, const jni$_.JStringNullableType());

  static final _id_SET_WALLPAPER_HINTS = _class.staticFieldId(
    r'SET_WALLPAPER_HINTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SET_WALLPAPER_HINTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SET_WALLPAPER_HINTS =>
      _id_SET_WALLPAPER_HINTS.get(_class, const jni$_.JStringNullableType());

  static final _id_SIGNAL_PERSISTENT_PROCESSES = _class.staticFieldId(
    r'SIGNAL_PERSISTENT_PROCESSES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SIGNAL_PERSISTENT_PROCESSES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SIGNAL_PERSISTENT_PROCESSES =>
      _id_SIGNAL_PERSISTENT_PROCESSES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_SMS_FINANCIAL_TRANSACTIONS = _class.staticFieldId(
    r'SMS_FINANCIAL_TRANSACTIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SMS_FINANCIAL_TRANSACTIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SMS_FINANCIAL_TRANSACTIONS =>
      _id_SMS_FINANCIAL_TRANSACTIONS.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_START_FOREGROUND_SERVICES_FROM_BACKGROUND = _class
      .staticFieldId(
        r'START_FOREGROUND_SERVICES_FROM_BACKGROUND',
        r'Ljava/lang/String;',
      );

  /// from: `static public final java.lang.String START_FOREGROUND_SERVICES_FROM_BACKGROUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get START_FOREGROUND_SERVICES_FROM_BACKGROUND =>
      _id_START_FOREGROUND_SERVICES_FROM_BACKGROUND.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_START_VIEW_APP_FEATURES = _class.staticFieldId(
    r'START_VIEW_APP_FEATURES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String START_VIEW_APP_FEATURES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get START_VIEW_APP_FEATURES =>
      _id_START_VIEW_APP_FEATURES.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_START_VIEW_PERMISSION_USAGE = _class.staticFieldId(
    r'START_VIEW_PERMISSION_USAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String START_VIEW_PERMISSION_USAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get START_VIEW_PERMISSION_USAGE =>
      _id_START_VIEW_PERMISSION_USAGE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_STATUS_BAR = _class.staticFieldId(
    r'STATUS_BAR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STATUS_BAR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STATUS_BAR =>
      _id_STATUS_BAR.get(_class, const jni$_.JStringNullableType());

  static final _id_SUBSCRIBE_TO_KEYGUARD_LOCKED_STATE = _class.staticFieldId(
    r'SUBSCRIBE_TO_KEYGUARD_LOCKED_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SUBSCRIBE_TO_KEYGUARD_LOCKED_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SUBSCRIBE_TO_KEYGUARD_LOCKED_STATE =>
      _id_SUBSCRIBE_TO_KEYGUARD_LOCKED_STATE.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_SYSTEM_ALERT_WINDOW = _class.staticFieldId(
    r'SYSTEM_ALERT_WINDOW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYSTEM_ALERT_WINDOW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SYSTEM_ALERT_WINDOW =>
      _id_SYSTEM_ALERT_WINDOW.get(_class, const jni$_.JStringNullableType());

  static final _id_TRANSMIT_IR = _class.staticFieldId(
    r'TRANSMIT_IR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TRANSMIT_IR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TRANSMIT_IR =>
      _id_TRANSMIT_IR.get(_class, const jni$_.JStringNullableType());

  static final _id_TURN_SCREEN_ON = _class.staticFieldId(
    r'TURN_SCREEN_ON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TURN_SCREEN_ON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TURN_SCREEN_ON =>
      _id_TURN_SCREEN_ON.get(_class, const jni$_.JStringNullableType());

  static final _id_UNINSTALL_SHORTCUT = _class.staticFieldId(
    r'UNINSTALL_SHORTCUT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String UNINSTALL_SHORTCUT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get UNINSTALL_SHORTCUT =>
      _id_UNINSTALL_SHORTCUT.get(_class, const jni$_.JStringNullableType());

  static final _id_UPDATE_DEVICE_STATS = _class.staticFieldId(
    r'UPDATE_DEVICE_STATS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String UPDATE_DEVICE_STATS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get UPDATE_DEVICE_STATS =>
      _id_UPDATE_DEVICE_STATS.get(_class, const jni$_.JStringNullableType());

  static final _id_UPDATE_PACKAGES_WITHOUT_USER_ACTION = _class.staticFieldId(
    r'UPDATE_PACKAGES_WITHOUT_USER_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String UPDATE_PACKAGES_WITHOUT_USER_ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get UPDATE_PACKAGES_WITHOUT_USER_ACTION =>
      _id_UPDATE_PACKAGES_WITHOUT_USER_ACTION.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_USE_BIOMETRIC = _class.staticFieldId(
    r'USE_BIOMETRIC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USE_BIOMETRIC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USE_BIOMETRIC =>
      _id_USE_BIOMETRIC.get(_class, const jni$_.JStringNullableType());

  static final _id_USE_EXACT_ALARM = _class.staticFieldId(
    r'USE_EXACT_ALARM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USE_EXACT_ALARM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USE_EXACT_ALARM =>
      _id_USE_EXACT_ALARM.get(_class, const jni$_.JStringNullableType());

  static final _id_USE_FINGERPRINT = _class.staticFieldId(
    r'USE_FINGERPRINT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USE_FINGERPRINT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USE_FINGERPRINT =>
      _id_USE_FINGERPRINT.get(_class, const jni$_.JStringNullableType());

  static final _id_USE_FULL_SCREEN_INTENT = _class.staticFieldId(
    r'USE_FULL_SCREEN_INTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USE_FULL_SCREEN_INTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USE_FULL_SCREEN_INTENT =>
      _id_USE_FULL_SCREEN_INTENT.get(_class, const jni$_.JStringNullableType());

  static final _id_USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER = _class.staticFieldId(
    r'USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER =>
      _id_USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER.get(
        _class,
        const jni$_.JStringNullableType(),
      );

  static final _id_USE_SIP = _class.staticFieldId(
    r'USE_SIP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USE_SIP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USE_SIP =>
      _id_USE_SIP.get(_class, const jni$_.JStringNullableType());

  static final _id_UWB_RANGING = _class.staticFieldId(
    r'UWB_RANGING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String UWB_RANGING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get UWB_RANGING =>
      _id_UWB_RANGING.get(_class, const jni$_.JStringNullableType());

  static final _id_VIBRATE = _class.staticFieldId(
    r'VIBRATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIBRATE =>
      _id_VIBRATE.get(_class, const jni$_.JStringNullableType());

  static final _id_WAKE_LOCK = _class.staticFieldId(
    r'WAKE_LOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WAKE_LOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WAKE_LOCK =>
      _id_WAKE_LOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_WRITE_APN_SETTINGS = _class.staticFieldId(
    r'WRITE_APN_SETTINGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_APN_SETTINGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WRITE_APN_SETTINGS =>
      _id_WRITE_APN_SETTINGS.get(_class, const jni$_.JStringNullableType());

  static final _id_WRITE_CALENDAR = _class.staticFieldId(
    r'WRITE_CALENDAR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_CALENDAR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WRITE_CALENDAR =>
      _id_WRITE_CALENDAR.get(_class, const jni$_.JStringNullableType());

  static final _id_WRITE_CALL_LOG = _class.staticFieldId(
    r'WRITE_CALL_LOG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_CALL_LOG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WRITE_CALL_LOG =>
      _id_WRITE_CALL_LOG.get(_class, const jni$_.JStringNullableType());

  static final _id_WRITE_CONTACTS = _class.staticFieldId(
    r'WRITE_CONTACTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_CONTACTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WRITE_CONTACTS =>
      _id_WRITE_CONTACTS.get(_class, const jni$_.JStringNullableType());

  static final _id_WRITE_EXTERNAL_STORAGE = _class.staticFieldId(
    r'WRITE_EXTERNAL_STORAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_EXTERNAL_STORAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WRITE_EXTERNAL_STORAGE =>
      _id_WRITE_EXTERNAL_STORAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_WRITE_GSERVICES = _class.staticFieldId(
    r'WRITE_GSERVICES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_GSERVICES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WRITE_GSERVICES =>
      _id_WRITE_GSERVICES.get(_class, const jni$_.JStringNullableType());

  static final _id_WRITE_SECURE_SETTINGS = _class.staticFieldId(
    r'WRITE_SECURE_SETTINGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_SECURE_SETTINGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WRITE_SECURE_SETTINGS =>
      _id_WRITE_SECURE_SETTINGS.get(_class, const jni$_.JStringNullableType());

  static final _id_WRITE_SETTINGS = _class.staticFieldId(
    r'WRITE_SETTINGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_SETTINGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WRITE_SETTINGS =>
      _id_WRITE_SETTINGS.get(_class, const jni$_.JStringNullableType());

  static final _id_WRITE_SYNC_SETTINGS = _class.staticFieldId(
    r'WRITE_SYNC_SETTINGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_SYNC_SETTINGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WRITE_SYNC_SETTINGS =>
      _id_WRITE_SYNC_SETTINGS.get(_class, const jni$_.JStringNullableType());

  static final _id_WRITE_VOICEMAIL = _class.staticFieldId(
    r'WRITE_VOICEMAIL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_VOICEMAIL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WRITE_VOICEMAIL =>
      _id_WRITE_VOICEMAIL.get(_class, const jni$_.JStringNullableType());

  static final _id_new$ = _class.constructorId(r'()V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Manifest$permission() {
    return Manifest$permission.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }
}

final class $Manifest$permission$NullableType
    extends jni$_.JObjType<Manifest$permission?> {
  @jni$_.internal
  const $Manifest$permission$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/Manifest$permission;';

  @jni$_.internal
  @core$_.override
  Manifest$permission? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : Manifest$permission.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Manifest$permission?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Manifest$permission$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Manifest$permission$NullableType) &&
        other is $Manifest$permission$NullableType;
  }
}

final class $Manifest$permission$Type
    extends jni$_.JObjType<Manifest$permission> {
  @jni$_.internal
  const $Manifest$permission$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/Manifest$permission;';

  @jni$_.internal
  @core$_.override
  Manifest$permission fromReference(jni$_.JReference reference) =>
      Manifest$permission.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Manifest$permission?> get nullableType =>
      const $Manifest$permission$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Manifest$permission$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Manifest$permission$Type) &&
        other is $Manifest$permission$Type;
  }
}

/// from: `android.Manifest$permission_group`
class Manifest$permission_group extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Manifest$permission_group> $type;

  @jni$_.internal
  Manifest$permission_group.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/Manifest$permission_group',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Manifest$permission_group$NullableType();
  static const type = $Manifest$permission_group$Type();
  static final _id_ACTIVITY_RECOGNITION = _class.staticFieldId(
    r'ACTIVITY_RECOGNITION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTIVITY_RECOGNITION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTIVITY_RECOGNITION =>
      _id_ACTIVITY_RECOGNITION.get(_class, const jni$_.JStringNullableType());

  static final _id_CALENDAR = _class.staticFieldId(
    r'CALENDAR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CALENDAR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CALENDAR =>
      _id_CALENDAR.get(_class, const jni$_.JStringNullableType());

  static final _id_CALL_LOG = _class.staticFieldId(
    r'CALL_LOG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CALL_LOG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CALL_LOG =>
      _id_CALL_LOG.get(_class, const jni$_.JStringNullableType());

  static final _id_CAMERA = _class.staticFieldId(
    r'CAMERA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAMERA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAMERA =>
      _id_CAMERA.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTACTS = _class.staticFieldId(
    r'CONTACTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTACTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTACTS =>
      _id_CONTACTS.get(_class, const jni$_.JStringNullableType());

  static final _id_LOCATION = _class.staticFieldId(
    r'LOCATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCATION =>
      _id_LOCATION.get(_class, const jni$_.JStringNullableType());

  static final _id_MICROPHONE = _class.staticFieldId(
    r'MICROPHONE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MICROPHONE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MICROPHONE =>
      _id_MICROPHONE.get(_class, const jni$_.JStringNullableType());

  static final _id_NEARBY_DEVICES = _class.staticFieldId(
    r'NEARBY_DEVICES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NEARBY_DEVICES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NEARBY_DEVICES =>
      _id_NEARBY_DEVICES.get(_class, const jni$_.JStringNullableType());

  static final _id_NOTIFICATIONS = _class.staticFieldId(
    r'NOTIFICATIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NOTIFICATIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NOTIFICATIONS =>
      _id_NOTIFICATIONS.get(_class, const jni$_.JStringNullableType());

  static final _id_PHONE = _class.staticFieldId(
    r'PHONE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHONE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHONE =>
      _id_PHONE.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_MEDIA_AURAL = _class.staticFieldId(
    r'READ_MEDIA_AURAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_MEDIA_AURAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_MEDIA_AURAL =>
      _id_READ_MEDIA_AURAL.get(_class, const jni$_.JStringNullableType());

  static final _id_READ_MEDIA_VISUAL = _class.staticFieldId(
    r'READ_MEDIA_VISUAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_MEDIA_VISUAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get READ_MEDIA_VISUAL =>
      _id_READ_MEDIA_VISUAL.get(_class, const jni$_.JStringNullableType());

  static final _id_SENSORS = _class.staticFieldId(
    r'SENSORS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SENSORS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SENSORS =>
      _id_SENSORS.get(_class, const jni$_.JStringNullableType());

  static final _id_SMS = _class.staticFieldId(r'SMS', r'Ljava/lang/String;');

  /// from: `static public final java.lang.String SMS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SMS =>
      _id_SMS.get(_class, const jni$_.JStringNullableType());

  static final _id_STORAGE = _class.staticFieldId(
    r'STORAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STORAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STORAGE =>
      _id_STORAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_new$ = _class.constructorId(r'()V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Manifest$permission_group() {
    return Manifest$permission_group.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }
}

final class $Manifest$permission_group$NullableType
    extends jni$_.JObjType<Manifest$permission_group?> {
  @jni$_.internal
  const $Manifest$permission_group$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/Manifest$permission_group;';

  @jni$_.internal
  @core$_.override
  Manifest$permission_group? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : Manifest$permission_group.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Manifest$permission_group?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Manifest$permission_group$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Manifest$permission_group$NullableType) &&
        other is $Manifest$permission_group$NullableType;
  }
}

final class $Manifest$permission_group$Type
    extends jni$_.JObjType<Manifest$permission_group> {
  @jni$_.internal
  const $Manifest$permission_group$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/Manifest$permission_group;';

  @jni$_.internal
  @core$_.override
  Manifest$permission_group fromReference(jni$_.JReference reference) =>
      Manifest$permission_group.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Manifest$permission_group?> get nullableType =>
      const $Manifest$permission_group$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Manifest$permission_group$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Manifest$permission_group$Type) &&
        other is $Manifest$permission_group$Type;
  }
}

/// from: `android.Manifest`
class Manifest extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Manifest> $type;

  @jni$_.internal
  Manifest.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/Manifest');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Manifest$NullableType();
  static const type = $Manifest$Type();
  static final _id_new$ = _class.constructorId(r'()V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Manifest() {
    return Manifest.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }
}

final class $Manifest$NullableType extends jni$_.JObjType<Manifest?> {
  @jni$_.internal
  const $Manifest$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/Manifest;';

  @jni$_.internal
  @core$_.override
  Manifest? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : Manifest.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Manifest?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Manifest$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Manifest$NullableType) &&
        other is $Manifest$NullableType;
  }
}

final class $Manifest$Type extends jni$_.JObjType<Manifest> {
  @jni$_.internal
  const $Manifest$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/Manifest;';

  @jni$_.internal
  @core$_.override
  Manifest fromReference(jni$_.JReference reference) =>
      Manifest.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Manifest?> get nullableType => const $Manifest$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Manifest$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Manifest$Type) && other is $Manifest$Type;
  }
}

/// from: `com.example.plugin_binding_demo.BluetoothGattCallbackProxy$CallbackInterface`
class BluetoothGattCallbackProxy$CallbackInterface extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothGattCallbackProxy$CallbackInterface> $type;

  @jni$_.internal
  BluetoothGattCallbackProxy$CallbackInterface.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'com/example/plugin_binding_demo/BluetoothGattCallbackProxy$CallbackInterface',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $BluetoothGattCallbackProxy$CallbackInterface$NullableType();
  static const type = $BluetoothGattCallbackProxy$CallbackInterface$Type();
  static final _id_onConnectionStateChange = _class.instanceMethodId(
    r'onConnectionStateChange',
    r'(Landroid/bluetooth/BluetoothGatt;II)V',
  );

  static final _onConnectionStateChange =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public abstract void onConnectionStateChange(android.bluetooth.BluetoothGatt bluetoothGatt, int i, int i1)`
  void onConnectionStateChange(BluetoothGatt bluetoothGatt, int i, int i1) {
    final _$bluetoothGatt = bluetoothGatt.reference;
    _onConnectionStateChange(
      reference.pointer,
      _id_onConnectionStateChange as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
      i1,
    ).check();
  }

  static final _id_onServicesDiscovered = _class.instanceMethodId(
    r'onServicesDiscovered',
    r'(Landroid/bluetooth/BluetoothGatt;I)V',
  );

  static final _onServicesDiscovered =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract void onServicesDiscovered(android.bluetooth.BluetoothGatt bluetoothGatt, int i)`
  void onServicesDiscovered(BluetoothGatt bluetoothGatt, int i) {
    final _$bluetoothGatt = bluetoothGatt.reference;
    _onServicesDiscovered(
      reference.pointer,
      _id_onServicesDiscovered as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
    ).check();
  }

  static final _id_onPhyUpdate = _class.instanceMethodId(
    r'onPhyUpdate',
    r'(Landroid/bluetooth/BluetoothGatt;III)V',
  );

  static final _onPhyUpdate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public abstract void onPhyUpdate(android.bluetooth.BluetoothGatt bluetoothGatt, int i, int i1, int i2)`
  void onPhyUpdate(BluetoothGatt? bluetoothGatt, int i, int i1, int i2) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    _onPhyUpdate(
      reference.pointer,
      _id_onPhyUpdate as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_onPhyRead = _class.instanceMethodId(
    r'onPhyRead',
    r'(Landroid/bluetooth/BluetoothGatt;III)V',
  );

  static final _onPhyRead =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public abstract void onPhyRead(android.bluetooth.BluetoothGatt bluetoothGatt, int i, int i1, int i2)`
  void onPhyRead(BluetoothGatt? bluetoothGatt, int i, int i1, int i2) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    _onPhyRead(
      reference.pointer,
      _id_onPhyRead as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_onCharacteristicRead = _class.instanceMethodId(
    r'onCharacteristicRead',
    r'(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[BI)V',
  );

  static final _onCharacteristicRead =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract void onCharacteristicRead(android.bluetooth.BluetoothGatt bluetoothGatt, android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic, byte[] bs, int i)`
  void onCharacteristicRead(
    BluetoothGatt bluetoothGatt,
    BluetoothGattCharacteristic bluetoothGattCharacteristic,
    jni$_.JByteArray bs,
    int i,
  ) {
    final _$bluetoothGatt = bluetoothGatt.reference;
    final _$bluetoothGattCharacteristic = bluetoothGattCharacteristic.reference;
    final _$bs = bs.reference;
    _onCharacteristicRead(
      reference.pointer,
      _id_onCharacteristicRead as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      _$bluetoothGattCharacteristic.pointer,
      _$bs.pointer,
      i,
    ).check();
  }

  static final _id_onCharacteristicWrite = _class.instanceMethodId(
    r'onCharacteristicWrite',
    r'(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;I)V',
  );

  static final _onCharacteristicWrite =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract void onCharacteristicWrite(android.bluetooth.BluetoothGatt bluetoothGatt, android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic, int i)`
  void onCharacteristicWrite(
    BluetoothGatt? bluetoothGatt,
    BluetoothGattCharacteristic? bluetoothGattCharacteristic,
    int i,
  ) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattCharacteristic =
        bluetoothGattCharacteristic?.reference ?? jni$_.jNullReference;
    _onCharacteristicWrite(
      reference.pointer,
      _id_onCharacteristicWrite as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      _$bluetoothGattCharacteristic.pointer,
      i,
    ).check();
  }

  static final _id_onCharacteristicChanged = _class.instanceMethodId(
    r'onCharacteristicChanged',
    r'(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[B)V',
  );

  static final _onCharacteristicChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void onCharacteristicChanged(android.bluetooth.BluetoothGatt bluetoothGatt, android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic, byte[] bs)`
  void onCharacteristicChanged(
    BluetoothGatt bluetoothGatt,
    BluetoothGattCharacteristic bluetoothGattCharacteristic,
    jni$_.JByteArray bs,
  ) {
    final _$bluetoothGatt = bluetoothGatt.reference;
    final _$bluetoothGattCharacteristic = bluetoothGattCharacteristic.reference;
    final _$bs = bs.reference;
    _onCharacteristicChanged(
      reference.pointer,
      _id_onCharacteristicChanged as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      _$bluetoothGattCharacteristic.pointer,
      _$bs.pointer,
    ).check();
  }

  static final _id_onDescriptorRead = _class.instanceMethodId(
    r'onDescriptorRead',
    r'(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I[B)V',
  );

  static final _onDescriptorRead =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void onDescriptorRead(android.bluetooth.BluetoothGatt bluetoothGatt, android.bluetooth.BluetoothGattDescriptor bluetoothGattDescriptor, int i, byte[] bs)`
  void onDescriptorRead(
    BluetoothGatt bluetoothGatt,
    BluetoothGattDescriptor bluetoothGattDescriptor,
    int i,
    jni$_.JByteArray bs,
  ) {
    final _$bluetoothGatt = bluetoothGatt.reference;
    final _$bluetoothGattDescriptor = bluetoothGattDescriptor.reference;
    final _$bs = bs.reference;
    _onDescriptorRead(
      reference.pointer,
      _id_onDescriptorRead as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      _$bluetoothGattDescriptor.pointer,
      i,
      _$bs.pointer,
    ).check();
  }

  static final _id_onDescriptorWrite = _class.instanceMethodId(
    r'onDescriptorWrite',
    r'(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I)V',
  );

  static final _onDescriptorWrite =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract void onDescriptorWrite(android.bluetooth.BluetoothGatt bluetoothGatt, android.bluetooth.BluetoothGattDescriptor bluetoothGattDescriptor, int i)`
  void onDescriptorWrite(
    BluetoothGatt? bluetoothGatt,
    BluetoothGattDescriptor? bluetoothGattDescriptor,
    int i,
  ) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattDescriptor =
        bluetoothGattDescriptor?.reference ?? jni$_.jNullReference;
    _onDescriptorWrite(
      reference.pointer,
      _id_onDescriptorWrite as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      _$bluetoothGattDescriptor.pointer,
      i,
    ).check();
  }

  static final _id_onReliableWriteCompleted = _class.instanceMethodId(
    r'onReliableWriteCompleted',
    r'(Landroid/bluetooth/BluetoothGatt;I)V',
  );

  static final _onReliableWriteCompleted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract void onReliableWriteCompleted(android.bluetooth.BluetoothGatt bluetoothGatt, int i)`
  void onReliableWriteCompleted(BluetoothGatt? bluetoothGatt, int i) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    _onReliableWriteCompleted(
      reference.pointer,
      _id_onReliableWriteCompleted as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
    ).check();
  }

  static final _id_onReadRemoteRssi = _class.instanceMethodId(
    r'onReadRemoteRssi',
    r'(Landroid/bluetooth/BluetoothGatt;II)V',
  );

  static final _onReadRemoteRssi =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public abstract void onReadRemoteRssi(android.bluetooth.BluetoothGatt bluetoothGatt, int i, int i1)`
  void onReadRemoteRssi(BluetoothGatt? bluetoothGatt, int i, int i1) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    _onReadRemoteRssi(
      reference.pointer,
      _id_onReadRemoteRssi as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
      i1,
    ).check();
  }

  static final _id_onMtuChanged = _class.instanceMethodId(
    r'onMtuChanged',
    r'(Landroid/bluetooth/BluetoothGatt;II)V',
  );

  static final _onMtuChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public abstract void onMtuChanged(android.bluetooth.BluetoothGatt bluetoothGatt, int i, int i1)`
  void onMtuChanged(BluetoothGatt? bluetoothGatt, int i, int i1) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    _onMtuChanged(
      reference.pointer,
      _id_onMtuChanged as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
      i1,
    ).check();
  }

  static final _id_onServiceChanged = _class.instanceMethodId(
    r'onServiceChanged',
    r'(Landroid/bluetooth/BluetoothGatt;)V',
  );

  static final _onServiceChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void onServiceChanged(android.bluetooth.BluetoothGatt bluetoothGatt)`
  void onServiceChanged(BluetoothGatt bluetoothGatt) {
    final _$bluetoothGatt = bluetoothGatt.reference;
    _onServiceChanged(
      reference.pointer,
      _id_onServiceChanged as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
    ).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $BluetoothGattCallbackProxy$CallbackInterface>
  _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onConnectionStateChange(Landroid/bluetooth/BluetoothGatt;II)V') {
        _$impls[$p]!.onConnectionStateChange(
          $a![0]!.as(const $BluetoothGatt$Type(), releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![2]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onServicesDiscovered(Landroid/bluetooth/BluetoothGatt;I)V') {
        _$impls[$p]!.onServicesDiscovered(
          $a![0]!.as(const $BluetoothGatt$Type(), releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onPhyUpdate(Landroid/bluetooth/BluetoothGatt;III)V') {
        _$impls[$p]!.onPhyUpdate(
          $a![0]?.as(const $BluetoothGatt$Type(), releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![2]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![3]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onPhyRead(Landroid/bluetooth/BluetoothGatt;III)V') {
        _$impls[$p]!.onPhyRead(
          $a![0]?.as(const $BluetoothGatt$Type(), releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![2]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![3]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onCharacteristicRead(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[BI)V') {
        _$impls[$p]!.onCharacteristicRead(
          $a![0]!.as(const $BluetoothGatt$Type(), releaseOriginal: true),
          $a![1]!.as(
            const $BluetoothGattCharacteristic$Type(),
            releaseOriginal: true,
          ),
          $a![2]!.as(const jni$_.JByteArrayType(), releaseOriginal: true),
          $a![3]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onCharacteristicWrite(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;I)V') {
        _$impls[$p]!.onCharacteristicWrite(
          $a![0]?.as(const $BluetoothGatt$Type(), releaseOriginal: true),
          $a![1]?.as(
            const $BluetoothGattCharacteristic$Type(),
            releaseOriginal: true,
          ),
          $a![2]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onCharacteristicChanged(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[B)V') {
        _$impls[$p]!.onCharacteristicChanged(
          $a![0]!.as(const $BluetoothGatt$Type(), releaseOriginal: true),
          $a![1]!.as(
            const $BluetoothGattCharacteristic$Type(),
            releaseOriginal: true,
          ),
          $a![2]!.as(const jni$_.JByteArrayType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onDescriptorRead(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I[B)V') {
        _$impls[$p]!.onDescriptorRead(
          $a![0]!.as(const $BluetoothGatt$Type(), releaseOriginal: true),
          $a![1]!.as(
            const $BluetoothGattDescriptor$Type(),
            releaseOriginal: true,
          ),
          $a![2]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![3]!.as(const jni$_.JByteArrayType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onDescriptorWrite(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I)V') {
        _$impls[$p]!.onDescriptorWrite(
          $a![0]?.as(const $BluetoothGatt$Type(), releaseOriginal: true),
          $a![1]?.as(
            const $BluetoothGattDescriptor$Type(),
            releaseOriginal: true,
          ),
          $a![2]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onReliableWriteCompleted(Landroid/bluetooth/BluetoothGatt;I)V') {
        _$impls[$p]!.onReliableWriteCompleted(
          $a![0]?.as(const $BluetoothGatt$Type(), releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onReadRemoteRssi(Landroid/bluetooth/BluetoothGatt;II)V') {
        _$impls[$p]!.onReadRemoteRssi(
          $a![0]?.as(const $BluetoothGatt$Type(), releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![2]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onMtuChanged(Landroid/bluetooth/BluetoothGatt;II)V') {
        _$impls[$p]!.onMtuChanged(
          $a![0]?.as(const $BluetoothGatt$Type(), releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![2]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onServiceChanged(Landroid/bluetooth/BluetoothGatt;)V') {
        _$impls[$p]!.onServiceChanged(
          $a![0]!.as(const $BluetoothGatt$Type(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $BluetoothGattCallbackProxy$CallbackInterface $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.example.plugin_binding_demo.BluetoothGattCallbackProxy$CallbackInterface',
      $p,
      _$invokePointer,
      [
        if ($impl.onConnectionStateChange$async)
          r'onConnectionStateChange(Landroid/bluetooth/BluetoothGatt;II)V',
        if ($impl.onServicesDiscovered$async)
          r'onServicesDiscovered(Landroid/bluetooth/BluetoothGatt;I)V',
        if ($impl.onPhyUpdate$async)
          r'onPhyUpdate(Landroid/bluetooth/BluetoothGatt;III)V',
        if ($impl.onPhyRead$async)
          r'onPhyRead(Landroid/bluetooth/BluetoothGatt;III)V',
        if ($impl.onCharacteristicRead$async)
          r'onCharacteristicRead(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[BI)V',
        if ($impl.onCharacteristicWrite$async)
          r'onCharacteristicWrite(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;I)V',
        if ($impl.onCharacteristicChanged$async)
          r'onCharacteristicChanged(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[B)V',
        if ($impl.onDescriptorRead$async)
          r'onDescriptorRead(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I[B)V',
        if ($impl.onDescriptorWrite$async)
          r'onDescriptorWrite(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I)V',
        if ($impl.onReliableWriteCompleted$async)
          r'onReliableWriteCompleted(Landroid/bluetooth/BluetoothGatt;I)V',
        if ($impl.onReadRemoteRssi$async)
          r'onReadRemoteRssi(Landroid/bluetooth/BluetoothGatt;II)V',
        if ($impl.onMtuChanged$async)
          r'onMtuChanged(Landroid/bluetooth/BluetoothGatt;II)V',
        if ($impl.onServiceChanged$async)
          r'onServiceChanged(Landroid/bluetooth/BluetoothGatt;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory BluetoothGattCallbackProxy$CallbackInterface.implement(
    $BluetoothGattCallbackProxy$CallbackInterface $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return BluetoothGattCallbackProxy$CallbackInterface.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $BluetoothGattCallbackProxy$CallbackInterface {
  factory $BluetoothGattCallbackProxy$CallbackInterface({
    required void Function(BluetoothGatt bluetoothGatt, int i, int i1)
    onConnectionStateChange,
    bool onConnectionStateChange$async,
    required void Function(BluetoothGatt bluetoothGatt, int i)
    onServicesDiscovered,
    bool onServicesDiscovered$async,
    required void Function(BluetoothGatt? bluetoothGatt, int i, int i1, int i2)
    onPhyUpdate,
    bool onPhyUpdate$async,
    required void Function(BluetoothGatt? bluetoothGatt, int i, int i1, int i2)
    onPhyRead,
    bool onPhyRead$async,
    required void Function(
      BluetoothGatt bluetoothGatt,
      BluetoothGattCharacteristic bluetoothGattCharacteristic,
      jni$_.JByteArray bs,
      int i,
    )
    onCharacteristicRead,
    bool onCharacteristicRead$async,
    required void Function(
      BluetoothGatt? bluetoothGatt,
      BluetoothGattCharacteristic? bluetoothGattCharacteristic,
      int i,
    )
    onCharacteristicWrite,
    bool onCharacteristicWrite$async,
    required void Function(
      BluetoothGatt bluetoothGatt,
      BluetoothGattCharacteristic bluetoothGattCharacteristic,
      jni$_.JByteArray bs,
    )
    onCharacteristicChanged,
    bool onCharacteristicChanged$async,
    required void Function(
      BluetoothGatt bluetoothGatt,
      BluetoothGattDescriptor bluetoothGattDescriptor,
      int i,
      jni$_.JByteArray bs,
    )
    onDescriptorRead,
    bool onDescriptorRead$async,
    required void Function(
      BluetoothGatt? bluetoothGatt,
      BluetoothGattDescriptor? bluetoothGattDescriptor,
      int i,
    )
    onDescriptorWrite,
    bool onDescriptorWrite$async,
    required void Function(BluetoothGatt? bluetoothGatt, int i)
    onReliableWriteCompleted,
    bool onReliableWriteCompleted$async,
    required void Function(BluetoothGatt? bluetoothGatt, int i, int i1)
    onReadRemoteRssi,
    bool onReadRemoteRssi$async,
    required void Function(BluetoothGatt? bluetoothGatt, int i, int i1)
    onMtuChanged,
    bool onMtuChanged$async,
    required void Function(BluetoothGatt bluetoothGatt) onServiceChanged,
    bool onServiceChanged$async,
  }) = _$BluetoothGattCallbackProxy$CallbackInterface;

  void onConnectionStateChange(BluetoothGatt bluetoothGatt, int i, int i1);
  bool get onConnectionStateChange$async => false;
  void onServicesDiscovered(BluetoothGatt bluetoothGatt, int i);
  bool get onServicesDiscovered$async => false;
  void onPhyUpdate(BluetoothGatt? bluetoothGatt, int i, int i1, int i2);
  bool get onPhyUpdate$async => false;
  void onPhyRead(BluetoothGatt? bluetoothGatt, int i, int i1, int i2);
  bool get onPhyRead$async => false;
  void onCharacteristicRead(
    BluetoothGatt bluetoothGatt,
    BluetoothGattCharacteristic bluetoothGattCharacteristic,
    jni$_.JByteArray bs,
    int i,
  );
  bool get onCharacteristicRead$async => false;
  void onCharacteristicWrite(
    BluetoothGatt? bluetoothGatt,
    BluetoothGattCharacteristic? bluetoothGattCharacteristic,
    int i,
  );
  bool get onCharacteristicWrite$async => false;
  void onCharacteristicChanged(
    BluetoothGatt bluetoothGatt,
    BluetoothGattCharacteristic bluetoothGattCharacteristic,
    jni$_.JByteArray bs,
  );
  bool get onCharacteristicChanged$async => false;
  void onDescriptorRead(
    BluetoothGatt bluetoothGatt,
    BluetoothGattDescriptor bluetoothGattDescriptor,
    int i,
    jni$_.JByteArray bs,
  );
  bool get onDescriptorRead$async => false;
  void onDescriptorWrite(
    BluetoothGatt? bluetoothGatt,
    BluetoothGattDescriptor? bluetoothGattDescriptor,
    int i,
  );
  bool get onDescriptorWrite$async => false;
  void onReliableWriteCompleted(BluetoothGatt? bluetoothGatt, int i);
  bool get onReliableWriteCompleted$async => false;
  void onReadRemoteRssi(BluetoothGatt? bluetoothGatt, int i, int i1);
  bool get onReadRemoteRssi$async => false;
  void onMtuChanged(BluetoothGatt? bluetoothGatt, int i, int i1);
  bool get onMtuChanged$async => false;
  void onServiceChanged(BluetoothGatt bluetoothGatt);
  bool get onServiceChanged$async => false;
}

final class _$BluetoothGattCallbackProxy$CallbackInterface
    with $BluetoothGattCallbackProxy$CallbackInterface {
  _$BluetoothGattCallbackProxy$CallbackInterface({
    required void Function(BluetoothGatt bluetoothGatt, int i, int i1)
    onConnectionStateChange,
    this.onConnectionStateChange$async = false,
    required void Function(BluetoothGatt bluetoothGatt, int i)
    onServicesDiscovered,
    this.onServicesDiscovered$async = false,
    required void Function(BluetoothGatt? bluetoothGatt, int i, int i1, int i2)
    onPhyUpdate,
    this.onPhyUpdate$async = false,
    required void Function(BluetoothGatt? bluetoothGatt, int i, int i1, int i2)
    onPhyRead,
    this.onPhyRead$async = false,
    required void Function(
      BluetoothGatt bluetoothGatt,
      BluetoothGattCharacteristic bluetoothGattCharacteristic,
      jni$_.JByteArray bs,
      int i,
    )
    onCharacteristicRead,
    this.onCharacteristicRead$async = false,
    required void Function(
      BluetoothGatt? bluetoothGatt,
      BluetoothGattCharacteristic? bluetoothGattCharacteristic,
      int i,
    )
    onCharacteristicWrite,
    this.onCharacteristicWrite$async = false,
    required void Function(
      BluetoothGatt bluetoothGatt,
      BluetoothGattCharacteristic bluetoothGattCharacteristic,
      jni$_.JByteArray bs,
    )
    onCharacteristicChanged,
    this.onCharacteristicChanged$async = false,
    required void Function(
      BluetoothGatt bluetoothGatt,
      BluetoothGattDescriptor bluetoothGattDescriptor,
      int i,
      jni$_.JByteArray bs,
    )
    onDescriptorRead,
    this.onDescriptorRead$async = false,
    required void Function(
      BluetoothGatt? bluetoothGatt,
      BluetoothGattDescriptor? bluetoothGattDescriptor,
      int i,
    )
    onDescriptorWrite,
    this.onDescriptorWrite$async = false,
    required void Function(BluetoothGatt? bluetoothGatt, int i)
    onReliableWriteCompleted,
    this.onReliableWriteCompleted$async = false,
    required void Function(BluetoothGatt? bluetoothGatt, int i, int i1)
    onReadRemoteRssi,
    this.onReadRemoteRssi$async = false,
    required void Function(BluetoothGatt? bluetoothGatt, int i, int i1)
    onMtuChanged,
    this.onMtuChanged$async = false,
    required void Function(BluetoothGatt bluetoothGatt) onServiceChanged,
    this.onServiceChanged$async = false,
  }) : _onConnectionStateChange = onConnectionStateChange,
       _onServicesDiscovered = onServicesDiscovered,
       _onPhyUpdate = onPhyUpdate,
       _onPhyRead = onPhyRead,
       _onCharacteristicRead = onCharacteristicRead,
       _onCharacteristicWrite = onCharacteristicWrite,
       _onCharacteristicChanged = onCharacteristicChanged,
       _onDescriptorRead = onDescriptorRead,
       _onDescriptorWrite = onDescriptorWrite,
       _onReliableWriteCompleted = onReliableWriteCompleted,
       _onReadRemoteRssi = onReadRemoteRssi,
       _onMtuChanged = onMtuChanged,
       _onServiceChanged = onServiceChanged;

  final void Function(BluetoothGatt bluetoothGatt, int i, int i1)
  _onConnectionStateChange;
  final bool onConnectionStateChange$async;
  final void Function(BluetoothGatt bluetoothGatt, int i) _onServicesDiscovered;
  final bool onServicesDiscovered$async;
  final void Function(BluetoothGatt? bluetoothGatt, int i, int i1, int i2)
  _onPhyUpdate;
  final bool onPhyUpdate$async;
  final void Function(BluetoothGatt? bluetoothGatt, int i, int i1, int i2)
  _onPhyRead;
  final bool onPhyRead$async;
  final void Function(
    BluetoothGatt bluetoothGatt,
    BluetoothGattCharacteristic bluetoothGattCharacteristic,
    jni$_.JByteArray bs,
    int i,
  )
  _onCharacteristicRead;
  final bool onCharacteristicRead$async;
  final void Function(
    BluetoothGatt? bluetoothGatt,
    BluetoothGattCharacteristic? bluetoothGattCharacteristic,
    int i,
  )
  _onCharacteristicWrite;
  final bool onCharacteristicWrite$async;
  final void Function(
    BluetoothGatt bluetoothGatt,
    BluetoothGattCharacteristic bluetoothGattCharacteristic,
    jni$_.JByteArray bs,
  )
  _onCharacteristicChanged;
  final bool onCharacteristicChanged$async;
  final void Function(
    BluetoothGatt bluetoothGatt,
    BluetoothGattDescriptor bluetoothGattDescriptor,
    int i,
    jni$_.JByteArray bs,
  )
  _onDescriptorRead;
  final bool onDescriptorRead$async;
  final void Function(
    BluetoothGatt? bluetoothGatt,
    BluetoothGattDescriptor? bluetoothGattDescriptor,
    int i,
  )
  _onDescriptorWrite;
  final bool onDescriptorWrite$async;
  final void Function(BluetoothGatt? bluetoothGatt, int i)
  _onReliableWriteCompleted;
  final bool onReliableWriteCompleted$async;
  final void Function(BluetoothGatt? bluetoothGatt, int i, int i1)
  _onReadRemoteRssi;
  final bool onReadRemoteRssi$async;
  final void Function(BluetoothGatt? bluetoothGatt, int i, int i1)
  _onMtuChanged;
  final bool onMtuChanged$async;
  final void Function(BluetoothGatt bluetoothGatt) _onServiceChanged;
  final bool onServiceChanged$async;

  void onConnectionStateChange(BluetoothGatt bluetoothGatt, int i, int i1) {
    return _onConnectionStateChange(bluetoothGatt, i, i1);
  }

  void onServicesDiscovered(BluetoothGatt bluetoothGatt, int i) {
    return _onServicesDiscovered(bluetoothGatt, i);
  }

  void onPhyUpdate(BluetoothGatt? bluetoothGatt, int i, int i1, int i2) {
    return _onPhyUpdate(bluetoothGatt, i, i1, i2);
  }

  void onPhyRead(BluetoothGatt? bluetoothGatt, int i, int i1, int i2) {
    return _onPhyRead(bluetoothGatt, i, i1, i2);
  }

  void onCharacteristicRead(
    BluetoothGatt bluetoothGatt,
    BluetoothGattCharacteristic bluetoothGattCharacteristic,
    jni$_.JByteArray bs,
    int i,
  ) {
    return _onCharacteristicRead(
      bluetoothGatt,
      bluetoothGattCharacteristic,
      bs,
      i,
    );
  }

  void onCharacteristicWrite(
    BluetoothGatt? bluetoothGatt,
    BluetoothGattCharacteristic? bluetoothGattCharacteristic,
    int i,
  ) {
    return _onCharacteristicWrite(
      bluetoothGatt,
      bluetoothGattCharacteristic,
      i,
    );
  }

  void onCharacteristicChanged(
    BluetoothGatt bluetoothGatt,
    BluetoothGattCharacteristic bluetoothGattCharacteristic,
    jni$_.JByteArray bs,
  ) {
    return _onCharacteristicChanged(
      bluetoothGatt,
      bluetoothGattCharacteristic,
      bs,
    );
  }

  void onDescriptorRead(
    BluetoothGatt bluetoothGatt,
    BluetoothGattDescriptor bluetoothGattDescriptor,
    int i,
    jni$_.JByteArray bs,
  ) {
    return _onDescriptorRead(bluetoothGatt, bluetoothGattDescriptor, i, bs);
  }

  void onDescriptorWrite(
    BluetoothGatt? bluetoothGatt,
    BluetoothGattDescriptor? bluetoothGattDescriptor,
    int i,
  ) {
    return _onDescriptorWrite(bluetoothGatt, bluetoothGattDescriptor, i);
  }

  void onReliableWriteCompleted(BluetoothGatt? bluetoothGatt, int i) {
    return _onReliableWriteCompleted(bluetoothGatt, i);
  }

  void onReadRemoteRssi(BluetoothGatt? bluetoothGatt, int i, int i1) {
    return _onReadRemoteRssi(bluetoothGatt, i, i1);
  }

  void onMtuChanged(BluetoothGatt? bluetoothGatt, int i, int i1) {
    return _onMtuChanged(bluetoothGatt, i, i1);
  }

  void onServiceChanged(BluetoothGatt bluetoothGatt) {
    return _onServiceChanged(bluetoothGatt);
  }
}

final class $BluetoothGattCallbackProxy$CallbackInterface$NullableType
    extends jni$_.JObjType<BluetoothGattCallbackProxy$CallbackInterface?> {
  @jni$_.internal
  const $BluetoothGattCallbackProxy$CallbackInterface$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/example/plugin_binding_demo/BluetoothGattCallbackProxy$CallbackInterface;';

  @jni$_.internal
  @core$_.override
  BluetoothGattCallbackProxy$CallbackInterface? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : BluetoothGattCallbackProxy$CallbackInterface.fromReference(
            reference,
          );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothGattCallbackProxy$CallbackInterface?>
  get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($BluetoothGattCallbackProxy$CallbackInterface$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($BluetoothGattCallbackProxy$CallbackInterface$NullableType) &&
        other is $BluetoothGattCallbackProxy$CallbackInterface$NullableType;
  }
}

final class $BluetoothGattCallbackProxy$CallbackInterface$Type
    extends jni$_.JObjType<BluetoothGattCallbackProxy$CallbackInterface> {
  @jni$_.internal
  const $BluetoothGattCallbackProxy$CallbackInterface$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/example/plugin_binding_demo/BluetoothGattCallbackProxy$CallbackInterface;';

  @jni$_.internal
  @core$_.override
  BluetoothGattCallbackProxy$CallbackInterface fromReference(
    jni$_.JReference reference,
  ) => BluetoothGattCallbackProxy$CallbackInterface.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothGattCallbackProxy$CallbackInterface?>
  get nullableType =>
      const $BluetoothGattCallbackProxy$CallbackInterface$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($BluetoothGattCallbackProxy$CallbackInterface$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($BluetoothGattCallbackProxy$CallbackInterface$Type) &&
        other is $BluetoothGattCallbackProxy$CallbackInterface$Type;
  }
}

/// from: `com.example.plugin_binding_demo.BluetoothGattCallbackProxy`
class BluetoothGattCallbackProxy extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothGattCallbackProxy> $type;

  @jni$_.internal
  BluetoothGattCallbackProxy.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'com/example/plugin_binding_demo/BluetoothGattCallbackProxy',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothGattCallbackProxy$NullableType();
  static const type = $BluetoothGattCallbackProxy$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lcom/example/plugin_binding_demo/BluetoothGattCallbackProxy$CallbackInterface;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(com.example.plugin_binding_demo.BluetoothGattCallbackProxy$CallbackInterface callbackInterface)`
  /// The returned object must be released after use, by calling the [release] method.
  factory BluetoothGattCallbackProxy(
    BluetoothGattCallbackProxy$CallbackInterface callbackInterface,
  ) {
    final _$callbackInterface = callbackInterface.reference;
    return BluetoothGattCallbackProxy.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$callbackInterface.pointer,
      ).reference,
    );
  }

  static final _id_getCallback = _class.instanceMethodId(
    r'getCallback',
    r'()Lcom/example/plugin_binding_demo/BluetoothGattCallbackProxy$CallbackInterface;',
  );

  static final _getCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final com.example.plugin_binding_demo.BluetoothGattCallbackProxy$CallbackInterface getCallback()`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothGattCallbackProxy$CallbackInterface getCallback() {
    return _getCallback(
      reference.pointer,
      _id_getCallback as jni$_.JMethodIDPtr,
    ).object<BluetoothGattCallbackProxy$CallbackInterface>(
      const $BluetoothGattCallbackProxy$CallbackInterface$Type(),
    );
  }

  static final _id_onPhyUpdate = _class.instanceMethodId(
    r'onPhyUpdate',
    r'(Landroid/bluetooth/BluetoothGatt;III)V',
  );

  static final _onPhyUpdate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public void onPhyUpdate(android.bluetooth.BluetoothGatt bluetoothGatt, int i, int i1, int i2)`
  void onPhyUpdate(BluetoothGatt? bluetoothGatt, int i, int i1, int i2) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    _onPhyUpdate(
      reference.pointer,
      _id_onPhyUpdate as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_onPhyRead = _class.instanceMethodId(
    r'onPhyRead',
    r'(Landroid/bluetooth/BluetoothGatt;III)V',
  );

  static final _onPhyRead =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public void onPhyRead(android.bluetooth.BluetoothGatt bluetoothGatt, int i, int i1, int i2)`
  void onPhyRead(BluetoothGatt? bluetoothGatt, int i, int i1, int i2) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    _onPhyRead(
      reference.pointer,
      _id_onPhyRead as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_onConnectionStateChange = _class.instanceMethodId(
    r'onConnectionStateChange',
    r'(Landroid/bluetooth/BluetoothGatt;II)V',
  );

  static final _onConnectionStateChange =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public void onConnectionStateChange(android.bluetooth.BluetoothGatt bluetoothGatt, int i, int i1)`
  void onConnectionStateChange(BluetoothGatt bluetoothGatt, int i, int i1) {
    final _$bluetoothGatt = bluetoothGatt.reference;
    _onConnectionStateChange(
      reference.pointer,
      _id_onConnectionStateChange as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
      i1,
    ).check();
  }

  static final _id_onServicesDiscovered = _class.instanceMethodId(
    r'onServicesDiscovered',
    r'(Landroid/bluetooth/BluetoothGatt;I)V',
  );

  static final _onServicesDiscovered =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void onServicesDiscovered(android.bluetooth.BluetoothGatt bluetoothGatt, int i)`
  void onServicesDiscovered(BluetoothGatt bluetoothGatt, int i) {
    final _$bluetoothGatt = bluetoothGatt.reference;
    _onServicesDiscovered(
      reference.pointer,
      _id_onServicesDiscovered as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
    ).check();
  }

  static final _id_onCharacteristicRead = _class.instanceMethodId(
    r'onCharacteristicRead',
    r'(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[BI)V',
  );

  static final _onCharacteristicRead =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void onCharacteristicRead(android.bluetooth.BluetoothGatt bluetoothGatt, android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic, byte[] bs, int i)`
  void onCharacteristicRead(
    BluetoothGatt bluetoothGatt,
    BluetoothGattCharacteristic bluetoothGattCharacteristic,
    jni$_.JByteArray bs,
    int i,
  ) {
    final _$bluetoothGatt = bluetoothGatt.reference;
    final _$bluetoothGattCharacteristic = bluetoothGattCharacteristic.reference;
    final _$bs = bs.reference;
    _onCharacteristicRead(
      reference.pointer,
      _id_onCharacteristicRead as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      _$bluetoothGattCharacteristic.pointer,
      _$bs.pointer,
      i,
    ).check();
  }

  static final _id_onCharacteristicWrite = _class.instanceMethodId(
    r'onCharacteristicWrite',
    r'(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;I)V',
  );

  static final _onCharacteristicWrite =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void onCharacteristicWrite(android.bluetooth.BluetoothGatt bluetoothGatt, android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic, int i)`
  void onCharacteristicWrite(
    BluetoothGatt? bluetoothGatt,
    BluetoothGattCharacteristic? bluetoothGattCharacteristic,
    int i,
  ) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattCharacteristic =
        bluetoothGattCharacteristic?.reference ?? jni$_.jNullReference;
    _onCharacteristicWrite(
      reference.pointer,
      _id_onCharacteristicWrite as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      _$bluetoothGattCharacteristic.pointer,
      i,
    ).check();
  }

  static final _id_onCharacteristicChanged = _class.instanceMethodId(
    r'onCharacteristicChanged',
    r'(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattCharacteristic;[B)V',
  );

  static final _onCharacteristicChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onCharacteristicChanged(android.bluetooth.BluetoothGatt bluetoothGatt, android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic, byte[] bs)`
  void onCharacteristicChanged(
    BluetoothGatt bluetoothGatt,
    BluetoothGattCharacteristic bluetoothGattCharacteristic,
    jni$_.JByteArray bs,
  ) {
    final _$bluetoothGatt = bluetoothGatt.reference;
    final _$bluetoothGattCharacteristic = bluetoothGattCharacteristic.reference;
    final _$bs = bs.reference;
    _onCharacteristicChanged(
      reference.pointer,
      _id_onCharacteristicChanged as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      _$bluetoothGattCharacteristic.pointer,
      _$bs.pointer,
    ).check();
  }

  static final _id_onDescriptorRead = _class.instanceMethodId(
    r'onDescriptorRead',
    r'(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I[B)V',
  );

  static final _onDescriptorRead =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onDescriptorRead(android.bluetooth.BluetoothGatt bluetoothGatt, android.bluetooth.BluetoothGattDescriptor bluetoothGattDescriptor, int i, byte[] bs)`
  void onDescriptorRead(
    BluetoothGatt bluetoothGatt,
    BluetoothGattDescriptor bluetoothGattDescriptor,
    int i,
    jni$_.JByteArray bs,
  ) {
    final _$bluetoothGatt = bluetoothGatt.reference;
    final _$bluetoothGattDescriptor = bluetoothGattDescriptor.reference;
    final _$bs = bs.reference;
    _onDescriptorRead(
      reference.pointer,
      _id_onDescriptorRead as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      _$bluetoothGattDescriptor.pointer,
      i,
      _$bs.pointer,
    ).check();
  }

  static final _id_onDescriptorWrite = _class.instanceMethodId(
    r'onDescriptorWrite',
    r'(Landroid/bluetooth/BluetoothGatt;Landroid/bluetooth/BluetoothGattDescriptor;I)V',
  );

  static final _onDescriptorWrite =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void onDescriptorWrite(android.bluetooth.BluetoothGatt bluetoothGatt, android.bluetooth.BluetoothGattDescriptor bluetoothGattDescriptor, int i)`
  void onDescriptorWrite(
    BluetoothGatt? bluetoothGatt,
    BluetoothGattDescriptor? bluetoothGattDescriptor,
    int i,
  ) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattDescriptor =
        bluetoothGattDescriptor?.reference ?? jni$_.jNullReference;
    _onDescriptorWrite(
      reference.pointer,
      _id_onDescriptorWrite as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      _$bluetoothGattDescriptor.pointer,
      i,
    ).check();
  }

  static final _id_onReliableWriteCompleted = _class.instanceMethodId(
    r'onReliableWriteCompleted',
    r'(Landroid/bluetooth/BluetoothGatt;I)V',
  );

  static final _onReliableWriteCompleted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void onReliableWriteCompleted(android.bluetooth.BluetoothGatt bluetoothGatt, int i)`
  void onReliableWriteCompleted(BluetoothGatt? bluetoothGatt, int i) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    _onReliableWriteCompleted(
      reference.pointer,
      _id_onReliableWriteCompleted as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
    ).check();
  }

  static final _id_onReadRemoteRssi = _class.instanceMethodId(
    r'onReadRemoteRssi',
    r'(Landroid/bluetooth/BluetoothGatt;II)V',
  );

  static final _onReadRemoteRssi =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public void onReadRemoteRssi(android.bluetooth.BluetoothGatt bluetoothGatt, int i, int i1)`
  void onReadRemoteRssi(BluetoothGatt? bluetoothGatt, int i, int i1) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    _onReadRemoteRssi(
      reference.pointer,
      _id_onReadRemoteRssi as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
      i1,
    ).check();
  }

  static final _id_onMtuChanged = _class.instanceMethodId(
    r'onMtuChanged',
    r'(Landroid/bluetooth/BluetoothGatt;II)V',
  );

  static final _onMtuChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public void onMtuChanged(android.bluetooth.BluetoothGatt bluetoothGatt, int i, int i1)`
  void onMtuChanged(BluetoothGatt? bluetoothGatt, int i, int i1) {
    final _$bluetoothGatt = bluetoothGatt?.reference ?? jni$_.jNullReference;
    _onMtuChanged(
      reference.pointer,
      _id_onMtuChanged as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
      i,
      i1,
    ).check();
  }

  static final _id_onServiceChanged = _class.instanceMethodId(
    r'onServiceChanged',
    r'(Landroid/bluetooth/BluetoothGatt;)V',
  );

  static final _onServiceChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onServiceChanged(android.bluetooth.BluetoothGatt bluetoothGatt)`
  void onServiceChanged(BluetoothGatt bluetoothGatt) {
    final _$bluetoothGatt = bluetoothGatt.reference;
    _onServiceChanged(
      reference.pointer,
      _id_onServiceChanged as jni$_.JMethodIDPtr,
      _$bluetoothGatt.pointer,
    ).check();
  }
}

final class $BluetoothGattCallbackProxy$NullableType
    extends jni$_.JObjType<BluetoothGattCallbackProxy?> {
  @jni$_.internal
  const $BluetoothGattCallbackProxy$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/example/plugin_binding_demo/BluetoothGattCallbackProxy;';

  @jni$_.internal
  @core$_.override
  BluetoothGattCallbackProxy? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BluetoothGattCallbackProxy.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothGattCallbackProxy?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothGattCallbackProxy$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothGattCallbackProxy$NullableType) &&
        other is $BluetoothGattCallbackProxy$NullableType;
  }
}

final class $BluetoothGattCallbackProxy$Type
    extends jni$_.JObjType<BluetoothGattCallbackProxy> {
  @jni$_.internal
  const $BluetoothGattCallbackProxy$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/example/plugin_binding_demo/BluetoothGattCallbackProxy;';

  @jni$_.internal
  @core$_.override
  BluetoothGattCallbackProxy fromReference(jni$_.JReference reference) =>
      BluetoothGattCallbackProxy.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothGattCallbackProxy?> get nullableType =>
      const $BluetoothGattCallbackProxy$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothGattCallbackProxy$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothGattCallbackProxy$Type) &&
        other is $BluetoothGattCallbackProxy$Type;
  }
}
